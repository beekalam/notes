#+TITLE:  php recipes
#+AUTHOR:  Mohammad Reza Mansouri
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_HEAD: <script src="js/org-info.js"></script>
#+HTML_HEAD: <script src="js/ganalytics.js" async></script>
#+STARTUP: overview

* regular expression
** Finding the nth Occurrence of a Match

#+begin_src php
<?php
$todo = "1. Get Dressed 2. Eat Jelly 3. Squash every week into a day";

preg_match_all("/\d\. ([^\d]+)/", $todo, $matches);

print "The second item on the todo list is: ";
// $matches[1] is an array of each substring captured by ([^\d]+)
print $matches[1][1];

print "The entire todo list is: ";
foreach($matches[1] as $match) {
    print "$match\n";
}
?>
#+end_src

Because the preg_match() function stops after it finds one match, you
need to use preg_match_all() instead if you’re looking for additional
matches. The preg_match_all() function returns the number of full
pattern matches it finds. If it finds no matches, it returns 0. If it
encounters an error, such as a syntax problem in the pattern, it
returns false.

The third argument to preg_match_all() is populated with an array
holding information about the various substrings that the pattern has
matched. The first element holds an array of matches of the complete
pattern. For Example 22-4, this means that $matches[0] holds the parts
of $todo that match /\d\. ([^\d]+)/: 1. Get Dressed, 2. Eat Jelly,
and 3. Squash every week into a day.

Subsequent elements of the $matches array hold arrays of text matched
by each parenthesized subpattern. The pattern in Example 22-4 has just
one subpattern ([^\d]+). So $matches[1] is an array of strings that
match that subpattern: Get Dressed, Eat Jelly, and Squash every week
into a day.

If there were a second subpattern, the substrings that it matched
would be in $matches[2], a third subpattern’s matches would be in
$matches[3], and so on.

Instead of returning an array divided into full matches and then
submatches, preg_match_all() can return an array divided by matches,
with each submatch inside. To trigger this, pass PREG_SET_ORDER in as
the fourth argument. This is particularly useful when you’ve got
multiple captured subpatterns and you want to iterate through the
subpattern groups one group at a time, as shown in Example 22-5.

#+begin_src php
<?php
$todo = "
first=Get Dressed
next=Eat Jelly
last=Squash every week into a day
";

preg_match_all("/([a-zA-Z]+)=(.*)/", $todo, $matches, PREG_SET_ORDER);

foreach ($matches as $match) {
    print "The {$match[1]} action is {$match[2]} \n";
}
?>
#+end_src

** replace n counts of a pattern

#+begin_src php
preg_replace($pattern,$replacement,$string,$limit);
#+end_src

$limit is by the default is -1 which means no limit.
* strings
** defining heredoc document
   
#+begin_src php
print <<< END
It's funny when signs say things like:
   Original "Root" Beer
   "Free" Gift
   Shoes cleaned while "you" wait
or have other misquoted words.
END;
#+end_src

** search for substring in string

#+begin_src php
$a = 'How are you?';
if (strpos($a, 'are') !== false) {
    echo 'true';
}
#+end_src 

using =strstr()=

#+begin_src php
<?php
//string strstr ( string $haystack , mixed $needle [, bool $before_needle = false ] )
$email  = 'name@example.com';
$domain = strstr($email, '@');
echo $domain; // prints @example.com

$user = strstr($email, '@', true); // As of PHP 5.3.0
echo $user; // prints name
?>
#+end_src 

** Accessing Substrings

#+begin_src php
<?php

if (strpos($_POST['email'], '@') === false) {
    print 'There was no @ in the e-mail address!';
}

?>
#+end_src

** Extracting Substrings

#+begin_src php
<?php
 $substring = substr($string,$start,$length);
 $username = substr($_GET['username'],0,8);
?>
#+end_src

** substring from beginning of the line except the last char

#+begin_src php
substr("abcd",0,-1);       // abc
#+end_src

** Replacing substrings

#+begin_src php
// Everything from position $start to the end of $old_string
// becomes $new_substring
$new_string = substr_replace($old_string,$new_substring,$start);

// $length characters, starting at position $start, become $new_substring
$new_string = substr_replace($old_string,$new_substring,$start,$length);
#+end_src

** Processing a String One Byte at a Time

#+begin_src php
<?php
$string = "This weekend, I'm going shopping for a pet chicken.";
$vowels = 0;
for ($i = 0, $j = strlen($string); $i < $j; $i++) {
    if (strstr('aeiouAEIOU',$string[$i])) {
        $vowels++;
    }
}
?>
#+end_src

** Reversing a String by Byte

#+begin_src php
<?php
print strrev('This is not a palindrome.');
?>
#+end_src

** Reversing a string by word

#+begin_src php
<?php
$s = "Once upon a time there was a turtle.";
// break the string up into words
$words = explode(' ',$s);
// reverse the array of words
$words = array_reverse($words);
// rebuild the string
$s = implode(' ',$words);
print $s;
?>
#+end_src

#+begin_src php
<?php
$reversed_s = implode(' ',array_reverse(explode(' ',$s)));
?>
#+end_src

** Switching tabs and spaces

#+begin_src php
<?php
$r = mysql_query("SELECT message FROM messages WHERE id = 1") or die();
$ob = mysql_fetch_object($r);
$tabbed = str_replace(' ',"\t",$ob->message);
$spaced = str_replace("\t",' ',$ob->message);

print "With Tabs: <pre>$tabbed</pre>";
print "With Spaces: <pre>$spaced</pre>";
?>
#+end_src

** trimming space

Use ltrim(), rtrim(), or trim(). ltrim() removes whitespace from the
beginning of a string, rtrim() from the end of a string, and trim()
from both the beginning and end of a string:

** controlling case
*** capitalizing letters

#+begin_src php
<?php
print ucfirst("how do you do today?");  //capitalized the first word in string
print ucwords("the prince of wales");  //capitalizes the first character of each word in a string
?>
#+end_src

*** whole string case control

The functions strtolower() and strtoupper() work on entire strings,
not just individual characters. All alphabetic characters are changed
to lowercase by strtolower() and strtoupper() changes all alphabetic
characters to uppercase:

#+begin_src php
<?php
print strtolower("I programmed the WOPR and the TRS-80.");
print strtoupper('"since feeling is first" is a poem by e. e. cummings.');
?>
#+end_src

** ordinal value of character
use ~ord("h")~
** character value of integer
use ~chr(ascii)~
** replace multiple

#+begin_src php
str_ireplace(['a', 'e', 'i', 'o', 'u'], '!', $str);
#+end_src

** convert string to array

#+begin_src php
// split a string without delimiter
str_split($str);
// split a string with delimiter
str_split(' ',$str);
explode(' ', $str);
#+end_src
 
** split a string by char

#+begin_src php
preg_split('/,/',$str);   // split by ','
preg_split('//',$str);    // split characters
explode(',', $str);
#+end_src

** split a string to chunks of length n
#+begin_src php
$str="abcdefghijklm";
echo print_r(str_split($str, 3),true);

// result
Array
(
    [0] => abc
    [1] => def
    [2] => ghi
    [3] => jkl
    [4] => m
)

#+end_src

** split string by string

#+begin_src php
//array explode ( string $delimiter , string $string [, int $limit = PHP_INT_MAX ] );

// Example 1
$pizza  = "piece1 piece2 piece3 piece4 piece5 piece6";
$pieces = explode(" ", $pizza);
echo $pieces[0]; // piece1
echo $pieces[1]; // piece2

// Example 2
$data = "foo:*:1023:1000::/home/foo:/bin/sh";
list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(":", $data);
echo $user; // foo
echo $pass; // *
#+end_src 

** remove alphabet values from string

#+begin_src php
$res = preg_replace('/^[0-9].,/',$str);
#+end_src

** check if string is empty or null
#+begin_src php 
// Function for basic field validation (present and neither empty nor only white space)
function IsNullOrEmptyString($question){
    return (!isset($question) || trim($question)==='');
}
#+end_src 

** remove all leading zeros from  a string

#+begin_src php 
$str = ltrim($str, '0');
#+end_src 

* numbers
** Checking Whether a Variable Contains a Valid Number

#+begin_src php
<?php
if (is_numeric(5))          { /* true  */ }
if (is_numeric('5'))        { /* true  */ }
if (is_numeric("05"))       { /* true  */ }
if (is_numeric('five'))     { /* false */ }

if (is_numeric(0xDECAFBAD)) { /* true  */ }
if (is_numeric("10e200"))   { /* true  */ }
?>
#+end_src

** comparing floating point numbers

Use a small delta value, and check if the numbers have a difference smaller than that delta:

#+begin_src php
<?php
$delta = 0.00001;

$a = 1.00000001;
$b = 1.00000000;

if (abs($a - $b) < $delta) { /* $a and $b are equal */ }
?>
#+end_src


Floating-point numbers are represented in binary form with only a
finite number of bits for the mantissa and the exponent. You get
overflows when you exceed those bits. As a result, sometimes PHP (just
like some other languages) doesn’t believe that two equal numbers are
actually equal because they may differ toward the very end.

To avoid this problem, instead of checking if $a == $b, make sure the
first number is within a very small amount ($delta) of the second
one. The size of your delta should be the smallest amount of
difference you care about between two numbers. Then use abs() to get
the absolute value of the difference.
** Rounding Floating-Point Numbers

To round a number to the closest integer, use round() :

$number = round(2.4);   // $number = 2

To round up, use ceil() :

$number = ceil(2.4);    // $number = 3

To round down, use floor() :

$number = floor(2.4);   // $number = 2

To keep a set number of digits after the decimal point, round()
accepts an optional precision argument. For example, perhaps you are
calculating thetotal price for the items in a user’s shopping cart:

#+begin_src php
<?php
$cart = 54.23;
$tax = $cart * .05;
$total = $cart + $tax;       // $total = 56.9415

$final = round($total, 2);   // $final = 56.94
?>
#+end_src

** Converting between bases
Use the base_convert() function:

$hex = 'a1';                           // hexadecimal number (base 16)

// convert from base 16 to base 10
$decimal = base_convert($hex, 16, 10); // $decimal is now 161

The base_convert() function changes a string in one base to the
correct string in another. It works for all bases from 2 to 36
inclusive, using the letters a through z as additional symbols for
bases above 10. The first argument is the number to be converted,
followed by the base it is in and the base you want it to become.

There are also a few specialized functions for conversions to and from
base 10 and the most commonly used other bases of 2, 8,
and 16. They’re bindec() and decbin(), octdec() and decoct(), and
hexdec() and dechex() :

// convert to base 10
print bindec(11011); // 27
print octdec(33);    // 27
print hexdec('1b');  // 27

// convert from base 10
print decbin(27);    // 11011
print decoct(27);    // 33
print dechex(27);    // 1b

Another alternative is to use printf(), which allows you to convert
decimal numbers to binary, octal, and hexadecimal numbers with a wide
range of formatting, such as leading zeros and a choice between upper-
and lowercase letters for hexadecimal numbers.

For instance, say you want to print out HTML color values:

printf('#%02X%02X%02X', 0, 102, 204); // #0066CC

* arrays
** check for empty array

#+begin_src php
empty([]) // true
#+end_src

** sum of items in an array

#+begin_src php
  $scores  = array(98, 76, 56, 80);
  $total   = array_sum($scores);    // $total = 310
#+end_src

** Specifying an Array Not Beginning at Element 0
Instruct array() to use a different index using the => syntax:
#+begin_src php
$residents = array(1 => 'Washington', 'Adams', 'Jefferson', 'Madison');

foreach ($presidents as $number => $president) {
    print "$number: $president\n";
}
#+end_src

** Storing Multiple Elements Per Key in an Array

Store the multiple elements in an array:

#+begin_src php
$fruits = array('red' => array('strawberry','apple'),
                'yellow' => array('banana'));
#+end_src
 
Or use an object:

#+begin_src php
while ($obj = mysql_fetch_object($r)) {
    $fruits[] = $obj;
}
#+end_src

In PHP, keys are unique per array, so you can’t associate more than
one entry in a key without overwriting the old value. Instead, store
your values in an anonymous array:
#+begin_src php
$fruits['red'][] = 'strawberry';
$fruits['red'][] = 'apple';
$fruits['yellow'][] = 'banana';
#+end_src
 
Or, if you’re processing items in a loop:

#+begin_src php

while (list($color,$fruit) = mysql_fetch_array($r)) {
    $fruits[$color][] = $fruit;
}

#+end_src

To print the entries, loop through the array:

#+begin_src php
foreach ($fruits as $color=>$color_fruit) {
    // $color_fruit is an array
    foreach ($color_fruit as $fruit) {
        print "$fruit is colored $color.<br>";
    }
}
#+end_src

** Initializing an Array to a Range of Integers
#+begin_src php
range($start, $stop):
$cards = range(1, 52);
#+end_src 

** Iterating through an array
Use foreach:

#+begin_src php 
foreach ($array as $value) {
    // Act on $value
}

#Or to get an array’s keys and values:

foreach ($array as $key => $value) {
    // Act II
}

#Another technique is to use for:

for ($key = 0, $size = count($array); $key < $size; $key++) {
   // Act III
}

#Finally, you can use each() in combination with list() and while:

reset($array) // reset internal pointer to beginning of array
while (list($key, $value) = each ($array)) {
    // Final Act
}
#+end_src 

** Deleting elements from an array
To delete one element, use unset():
#+begin_src php
unset($array[3]);
unset($array['foo']);
#+end_src 
To delete multiple noncontiguous elements, also use unset():
#+begin_src php
unset($array[3], $array[5]);
unset($array['foo'], $array['bar']);
#+end_src 
To delete multiple contiguous elements, use array_splice():
#+begin_src php
array_splice($array, $offset, $length);
#+end_src 

** Changing array size

Use array_pad() to make an array grow:

#+begin_src php 

// start at three
$array = array('apple', 'banana', 'coconut');

// grow to five
$array = array_pad($array, 5, '');

Now, count($array) is 5, and the last two elements, $array[3] and $array[4], contain the empty string.

To reduce an array, you can use array_splice():

// no assignment to $array
array_splice($array, 2);

// This removes all but the first two elements from $array.
#+end_src 

* Date and Time
** Finding the Current Date and Time
Use strftime() or date() for a formatted time string, as in Example 3-2.

*Example 3-2. Finding the current date and time*
#+begin_src php
<?php
print strftime('%c');
print "\n";
print date('r');
?>
#+end_src
 
Example 3-2 prints:
#+begin_src 
Wed May 10 18:29:59 2006
Wed, 10 May 2006 18:29:59 -0400
#+end_src
 
*Use getdate() or localtime() if you want time parts.*
Example 3-3 shows how these functions work.

Example 3-3. Finding time parts
#+begin_src php
<?php
$now_1 = getdate();
$now_2 = localtime();
print "{$now_1['hours']}:{$now_1['minutes']}:{$now_1['seconds']}\n";
print "$now_2[2]:$now_2[1]:$now_2[0]";
#+end_src
 
Example 3-3 prints:
#+begin_src 
18:23:45
18:23:45
#+end_src
 
*Example 3-4 shows how to use getdate() to print out the month, day, and year.*

Example 3-4. Finding the month, day, and year
#+begin_src php
<?php
$a = getdate();
printf('%s %d, %d',$a['month'],$a['mday'],$a['year']);
?>
#+end_src
 
Example 3-4 prints:
#+begin_src 
May 5, 2007
#+end_src
 
Pass getdate() an epoch timestamp as an argument to make the returned
array the appropriate values for local time at that timestamp. The
month, day, and year at epoch timestamp 163727100 is shown in Example
3-5.

Example 3-5. getdate() with a specific timestamp
#+begin_src php
<?php
$a = getdate(163727100);
printf('%s %d, %d',$a['month'],$a['mday'],$a['year']);
?>
#+end_src
 
Example 3-5 prints:
#+begin_src 
March 10, 1975
#+end_src
 
The function localtime() returns an array of time and date parts. It
also takes an epoch timestamp as an optional first argument, as well
as a boolean as an optional second argument. If that second argument
is true, localtime() returns an associative array instead of a
numerically indexed array. The keys of that array are the same as the
members of the tm_struct structure that the C function localtime()
returns, as shown in Table 3-2.

*Example 3-6 shows how to use localtime() to print out today’s date in month/day/year format.*

Example 3-6. Using localtime()
#+begin_src php
<?php
$a = localtime();
$a[4] += 1;
$a[5] += 1900;
print "$a[4]/$a[3]/$a[5]";
#+end_src
 
Example 3-6 prints:
#+begin_src 
6/23/2006
#+end_src
 
The month is incremented by 1 before printing since localtime() starts
counting months with 0 for January, but we want to display 1 if the
current month is January. Similarly, the year is incremented by 1900
because localtime() starts counting years with 0 for 1900.

** Converting Time and Date Parts to an Epoch Timestamp

Use mktime() if your time and date parts are in the local time zone,
as shown in Example 3-7.

Example 3-7. Getting a specific epoch timestamp
#+begin_src php
<?php
// 7:45:03 PM on March 10, 1975, local time
$then = mktime(19,45,3,3,10,1975);
?>
#+end_src
 
Use gmmktime() , as in Example 3-8, if your time and date parts are in
GMT.

Example 3-8. Getting a specific GMT-based epoch timestamp
#+begin_src php
<?php
// 7:45:03 PM on March 10, 1975, in GMT
$then = gmmktime(19,45,3,3,10,1975);
?>
#+end_src
 
** Converting an Epoch Timestamp to Time and Date Parts
Pass an epoch timestamp to getdate(): $time_parts = getdate(163727100);.
** Finding the Difference of Two Dates
Convert both dates to epoch timestamps and subtract one from the
other. Example 3-13 separates the difference into weeks, days, hours,
minutes, and seconds.

Example 3-13. Calculating the difference between two dates
#+begin_src php
<?php
// 7:32:56 pm on May 10, 1965
$epoch_1 = mktime(19,32,56,5,10,1965);
// 4:29:11 am on November 20, 1962
$epoch_2 = mktime(4,29,11,11,20,1962);

$diff_seconds  = $epoch_1 - $epoch_2;
$diff_weeks    = floor($diff_seconds/604800);
$diff_seconds -= $diff_weeks   * 604800;
$diff_days     = floor($diff_seconds/86400);
$diff_seconds -= $diff_days    * 86400;
$diff_hours    = floor($diff_seconds/3600);
$diff_seconds -= $diff_hours   * 3600;
$diff_minutes  = floor($diff_seconds/60);
$diff_seconds -= $diff_minutes * 60;

print "The two dates have $diff_weeks weeks, $diff_days days, ";
print "$diff_hours hours, $diff_minutes minutes, and $diff_seconds ";
print "seconds elapsed between them.";
?>
#+end_src

Example 3-13 prints:

The two dates have 128 weeks, 6 days, 14 hours, 3 minutes, 
and 45 seconds elapsed between them.

Note that the difference isn’t divided into larger chunks than weeks
(i.e., months or years) because those chunks have variable length and
wouldn’t give an accurate count of the time difference calculated.

** date difference using ~DateInterval~
#+begin_src php
<?php
$datetime1 = new DateTime('2009-10-11');
$datetime2 = new DateTime('2009-10-13');
$interval = $datetime1->diff($datetime2);
echo $interval->format('%R%a days');
?>
#+end_src
 
Procedural style
#+begin_src php
<?php
$datetime1 = date_create('2009-10-11');
$datetime2 = date_create('2009-10-13');
$interval = date_diff($datetime1, $datetime2);
echo $interval->format('%R%a days');
?>
#+end_src
 
The above examples will output:

+2 days

** number of days between two dates
#+begin_src php
$today->diff($yesterday)->days;

date_diff($today, $yesterday)->days;

// using epoch timestamp
// 86400 is number of seoconds in day
$today->getTimestamp() - $yesterday->getTimestamp()/86400;
#+end_src

** convert seconds to time with format HH:MM:SS
#+begin_src php
date('H:i:s', $seconds);
#+end_src

** current minute, second

#+begin_src php 
$currentMinute = ltrim(date('i'),'0');
$currentSecond = date('s')+0;
#+end_src 

* variables
** Establishing a Default Value
Use isset() to assign a default to a variable that may already have a value:
#+begin_src php
if (! isset($cars)) { $cars = $default_cars; }
#+end_src 

Use the ternary (a ? b : c) operator to give a new variable a (possibly default) value:
#+begin_src php
$cars = isset($_REQUEST['cars']) ? $_REQUEST['cars'] : $default_cars;
#+end_src 

Using isset() is essential when assigning default values. Without it,
the nondefault value can’t be 0 or anything else that evaluates to
false. Consider this assignment:

#+begin_src php
$cars = $_REQUEST['cars'] ? $_REQUEST['cars'] : $default_cars;
#+end_src 

If $_REQUEST['cars'] is 0, $cars is set to $default_cars even though 0
may be a valid value for $cars.

An alternative syntax for checking arrays is the array_key_exists() function:
#+begin_src php
$cars = array_key_exists('cars', $_REQUEST) ? $_REQUEST['cars'] : $default_cars;
#+end_src 
The one difference between isset() and array_key_exists() is that when
a key exists but its value is null, then array_key_exists() returns
true, while isset() returns false:
#+begin_src php
$vehicles = array('cars' => null);
array_key_exists('cars', $vehicles); // true
isset($vehicles['cars']);            // false
#+end_src 
** Exchanging Values Without Using Temporary Variables
To swap $a and $b:
#+begin_src php
list($a,$b) = array($b,$a);
#+end_src 

** Creating a Dynamic Variable Name
You want to construct a variable’s name dynamically. For example, you
want to use variable names that match the field names from a database
query.

Use PHP’s variable variable syntax by prepending a $ to a variable
whose value is the variable name you want:
#+begin_src php
$animal = 'turtles';
$turtles = 103;
print $$animal;    // 103
#+end_src

Using curly braces , you can construct more complicated expressions that indicate variable names:

$stooges = array('Moe','Larry','Curly');
$stooge_moe = 'Moses Horwitz';
$stooge_larry = 'Louis Feinberg';
$stooge_curly = 'Jerome Horwitz';

foreach ($stooges as $s) {
  print "$s's real name was ${'stooge_'.strtolower($s)}.\n";
}
Moe's real name was Moses Horwitz.
Larry's real name was Louis Feinberg.
Curly's real name was Jerome Horwitz.

PHP evaluates the expression between the curly braces and uses it as a
variable name. That expression can even have function calls in it,
such as strtolower().

Variable variables are also useful when iterating through similarly
named variables. Say you are querying a database table that has fields
named title_1, title_2, etc. If you want to check if a title matches
any of those values, the easiest way is to loop through them like
this:

for ($i = 1; $i <= $n; $i++) {
    $t = "title_$i";
    if ($title == $$t) { /* match */ }
}

Of course, it would be more straightforward to store these values in
an array, but if you are maintaining old code that uses this technique
(and you can’t change it), variable variables are helpful.

The curly brace syntax is also necessary in resolving ambiguity about
array elements. The variable variable $$donkeys[12] could have two
meanings. The first is “take what’s in the 12th element of the
$donkeys array and use that as a variable name.” Write this as:
${$donkeys[12]}. The second is “use what’s in the scalar $donkeys as
an array name and look in the 12th element of that array.” Write this
as: ${$donkeys}[12].

You are not limited by two dollar signs. You can use three, or more,
but in practice it’s rare to see greater than two levels of
indirection.

** Using Static Variables
Declare the variable as static:
#+begin_src php
function track_times_called() {
    static $i = 0;
    $i++;
    return $i;
}
#+end_src
 
** Encapsulating Complex Data Types in a String

You want a string representation of an array or object for storage in
a file or database. This string should be easily reconstitutable into
the original array or object.  Solution

Use serialize() to encode variables and their values into a textual form:

#+begin_src php
$pantry = array('sugar' => '2 lbs.','butter' => '3 sticks');
$fp = fopen('/tmp/pantry','w') or die ("Can't open pantry");
fputs($fp,serialize($pantry));
fclose($fp);
#+end_src 

To recreate the variables, use unserialize():

#+begin_src php
$new_pantry = unserialize(file_get_contents('/tmp/pantry'));
#+end_src 

* functions
** checking for a function's existence
#+begin_src php
<?php
if (function_exists("array_combine"))
{
    echo "Function exists";
}
else
{
    echo "Function does not exist - better write our own";
}
?>
#+end_src

** Creating Functions That Take a Variable Number of Arguments 
use =func_num_args()= and =func_get_arg()= functions.

#+begin_src php
// find the "average" of a group of numbers
function mean() {
    // initialize to avoid warnings
    $sum = 0;

    // the number of arguments passed to the function
    $size = func_num_args();

    // iterate through the arguments and add up the numbers
    for ($i = 0; $i < $size; $i++) {
        $sum += func_get_arg($i);
    }

    // divide by the amount of numbers
    $average = $sum / $size;

    // return average
    return $average;
}

$mean = mean(96, 93, 97); 
#+end_src

There is a third version of this function that uses func_num_args( ) to return
an array containing all the values passed to the function.

#+begin_src php
// find the "average" of a group of numbers
function mean() {
    // initialize to avoid warnings
    $sum = 0;

    // load the arguments into $numbers
    $numbers = func_get_args();

    // the number of elements in the array
    $size = count($numbers);

    // iterate through the array and add up the numbers
    for ($i = 0; $i < $size; $i++) {
        $sum += $numbers[$i];
    }

    // divide by the amount of numbers
    $average = $sum / $size;

    // return average
    return $average;
}

$mean = mean(96, 93, 97);
#+end_src

* Misc
** get results from eval
use  ~return~ eg:

#+begin_src php
$res = eval('return 2 + 3;');      // 5
#+end_src

** check if a class has a property

#+begin_src php
bool property_exists ( mixed $class , string $property )
#+end_src

This function checks if the given property exists in the specified class.

Note:
As opposed with isset(), property_exists() returns TRUE even if the property has the value NULL.

Returns TRUE if the property exists, FALSE if it doesn't exist or NULL in case of an error.

** redirecting
   
When redirecting to some scripts, the redirection also passes on the
entire QUERY_STRING the query string is stored in the PHP
environment variable $QUERY_STRING as a GET method parameter. In
addition, a session variable, referer, is registered in selected cases
so that in later processing the script can redirect to the original
calling page.

#+begin_src php
<?php
if ($_POST[location] == "") {
   header("Location: http://127.0.0.1/redirect_form.html");
   exit;
} else {
   header("Location: $_POST[location]");
   exit;
}
?>
#+end_src

** making the root path

#+begin_src php
define("ROOT",realpath(dirname(__FILE__)));
#+end_src

** integer division

#+begin_src php
int intdiv ( int $dividend , int $divisor )
#+end_src

Returns the integer quotient of the division of dividend by divisor.
** HTTP refresh with echo

#+begin_src php 
echo "<meta http-equiv='refresh' content='0;url=http://domain.com?a=1&b=2'>";
//or even
header ("Location: url=http://domain.com?a=1&b=2");
#+end_src 

** user IP

#+begin_src php
if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
  $ip=$_SERVER['HTTP_CLIENT_IP'];}
elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
  $ip=$_SERVER['HTTP_X_FORWARDED_FOR'];} 
else {
  $ip=$_SERVER['REMOTE_ADDR'];
}
#+end_src 

* json
** json encode raw UTF?

#+begin_src php 
json_encode( $text, JSON_UNESCAPED_UNICODE );
#+end_src 

* webservice
** types of webservices
*** SOAP

SOAP is an acronym for Simple Object Access Protocol.

SOAP is a XML-based protocol for accessing web services.

SOAP is a W3C recommendation for communication between applications.

SOAP is XML based, so it is platform independent and language
independent. In other words, it can be used with Java, .Net or PHP
language on any platform.

*** WSDL

WSDL is an acronym for Web Services Description Language.

WSDL is a xml document containing information about web services such
as method name, method parameter and how to access it.

WSDL is a part of UDDI. It acts as a interface between web service applications.

WSDL is pronounced as wiz-dull.

* classes
** static attributes or methods.
A static property is a class variable that is associated with the class, rather than with an
instance of the class.

Static properties are declared with the static keyword and are
accessed via the syntax ClassName::$property .The following example illustrates
how static properties work:

#+begin_src php
class TestClass {
   public static $counter;
}
$counter = TestClass::$counter;
#+end_src

If you need to access a static property inside a class, you can also use the magic keywords
self and parent , which resolve to the current class and the parent of the current class.

#+begin_src php
class TestClass {
   public static $counter = 0;
      public $id;
   public function _ _construct()
   {
      $this->id = self::$counter++;
    }
}
#+end_src

** ~__clone~ magic method

To actually copy an object in PHP5, you need to use the built-in _ _ clone()
method.

#+begin_src php
$obj = new TestClass;
$copy = $obj->_ _clone();
#+end_src

For some classes, the built-in deep-copy _ _clone() method may not be adequate for
your needs, so PHP allows you to override it. Inside the _ _clone() method, you not
only have $this , which represents the new object, but also $that , which is the object
being cloned. For example, in the TestClass class defined previously in this chapter, if
you use the default _ _clone() method, you will copy its id property. Instead, you
should rewrite the class as follows:

#+begin_src php
class TestClass {
   public static $counter = 0;
   public $id;
   public $other;
   public function _ _construct()
   {
      $this->id = self::$counter++;
   }
   public function _ _clone()
   {
      $this->other = $that->other;
      $this->id = self::$counter++;
   }
}
#+end_src
 
** passing objects as function parameters.
objects are always passed by reference. This means that when you pass an object
into a function, the function operates on that same object, and if it is changed
inside the function, that change is reflected outside.
** Using Magic ~__get~ and ~__set~ Methods
These are called when you access a property that doesn’t exist.

#+begin_src php
class Courier
{
  protected $data = array();
  public function __get($property) {
    return $this->data[$property];
  }
  public function __set($property, $value) {
    $this->data[$property] = $value;
    return true;
  }
}

$courier = new Courier();
$courier->name = 'Avian Carrier';
echo $courier->name;
#+end_src

** counting objects
By default, if you count() an object in PHP, you’ll receive a count of how many
properties it has. However, by implementing the Countable interface as shown below
allows us to hook into this.

#+begin_src php
class Courier implements Countable
{
  protected $count = 0;
  public function ship(Parcel $parcel) {
    $this->count++;
    // ship parcel
    return true;
  }
  public function count() {
    return $this->count;
  }
}

$courier = new Courier();
$courier->ship(new Parcel());
$courier->ship(new Parcel());
$courier->ship(new Parcel());
echo count($courier); // outputs 3
#+end_src

** Using ~__call()~ and ~__callStatic()~
When we call a method that isn’t declared in the class, the ~__call()~ method is
called instead.

#+begin_src php
class Courier {
  public $name;
  public function __construct($name) {
    $this->name = $name;
    return true;
  }

  public function ship($parcel) {
    // sends the parcel to its destination
    return true;
  }
  
  public function __call($name, $params) {
    if($name == 'sendParcel') {
      // legacy system requirement, pass to newer send() method
      return $this->send($params[0]);
    } else {
      error_log('Failed call to ' . $name . ' in Courier class');
    return false;
    }
  }
}
#+end_src 

** serializing

To serialize data in PHP means to convert it into a text-based format that we can
store, for example, in a database.

#+begin_src php
$mycourier = new Courier('Avian Services', 'Australia');
var_dump($mycourier);
$s = serialize($mycourier);
#+end_src 

When we serialize an object, we can unserialize it in any system where the class
definition of the object is available. There are some object properties, however, that
we don’t want to serialize, because they’d be invalid in any other context. A good
example of this is a resource; a file pointer would make no sense if unserialized at
a later point, or on a totally different platform.

To help us deal with this situation, PHP provides the __sleep() and __wakeup()
methods, which are called when serializing and unserializing, respectively. These
methods allow us to name which properties to serialize, and fill in any that aren’t
stored when the object is “woken.”

#+begin_src php
class Courier {
  public $name;
  public $home_country;

  public function __construct($name, $home_country) {
    $this->name = $name;
    $this->home_country = $home_country;
    $this->logfile = $this->getLogFile();
    return true;
  }
  protected function getLogFile() {
      // error log location would be in a config file
      return fopen('/tmp/error_log.txt', 'a');
  }
  public function log($message) {
    if($this->logfile) {
      fputs($this->logfile, 'Log message: ' . $message . "\n");
    }
  }
  public function __sleep() {
    // only store the "safe" properties
    return array("name", "home_country");
  }
  public function __wakeup() {
    // properties are restored, now add the logfile
    $this->logfile = $this->getLogFile();
    return true;
  }
}
#+end_src 

* reflection
** retrieving the name of current function?

~__FUNCTION__~ returns only the name of the function.
while as ~__METHOD__~ returns the name of the class alongwith the name of the function.

#+begin_src php
class foo
{
  function print_func()
  {
            echo __FUNCTION__;
  }
  function print_method()
  {
            echo __METHOD__;
  }
}

$obj = new foo();
$obj->print_func();      // Returns: print_func
$obj->print_method();    // Returns: foo::print_method
#+end_src
http://www.php.net/manual/en/language.constants.predefined.php
** get type of variable 

#+begin_src php
string gettype ( mixed $var );
<?php

$data = array(1, 1., NULL, new stdClass, 'foo');

foreach ($data as $value) {
    echo gettype($value), "\n";
}

?>
#+end_src 

The above example will output something similar to:

#+begin_src 
integer
double
NULL
object
string
#+end_src 

* Debug
** dump all variables?

Use get_defined_vars and/or get_defined_constants

#+begin_src php
$arr = get_defined_vars();
print_r($arr);
#+end_src

#+begin_src php
$a = print_r(var_dump($GLOBALS),1);
echo htmlspecialchars($a);
#+end_src

** send an error message to  the web server's error log or to a file.

#+begin_src php
bool error_log ( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]] )
#+end_src

#+begin_src php
<?php
// Send notification through the server log if we can not
// connect to the database.
if (!Ora_Logon($username, $password)) {
    error_log("Oracle database not available!", 0);
}

// Notify administrator by email if we run out of FOO
if (!($foo = allocate_new_foo())) {
    error_log("Big trouble, we're all out of FOOs!", 1,
               "operator@example.com");
}

// another way to call error_log():
error_log("You messed up!", 3, "/var/tmp/my-errors.log");
?>
#+end_src

** enabling error reporting
   
#+begin_src php
ini_set("display_errors","1");
error_reporting(E_ALL);
#+end_src

* exceptions
** Throwing Exceptions
#+begin_src php
// something has gone wrong
throw new Exception('Meaningful error message string');
#+end_src 

** Extending Exceptions
#+begin_src php
class HeavyParcelException extends Exception {}
#+end_src 
We can set any properties or add any methods we desire to this Exception class.

** Setting a Global Exception Handler
To avoid seeing fatal errors where exceptions have been thrown and our code failed
to catch them, we can set a default behavior for our application in this situation.
To do this, we use a function called =set_exception_handler()= . This accepts a
callback as its parameter, so we can give the name of a function to use, for example.
An exception handler will usually present an error screen to the user—much nicer
than a fatal error message!

#+begin_src php
//A basic exception handler would look similar to this:
function handleMissedException($e) {
  echo "Sorry, something is wrong. Please try again, or contact us if the problem persists";
  error_log('Unhandled Exception: ' . $e->getMessage() . ' in file ' . $e->getFile() . ' on line ' . $e->getLine());
}
set_exception_handler('handleMissedException');
throw new Exception('just testing!');
#+end_src 

* patterns
** value object pattern

*The Problem*
So, how do you implement a lightweight, or easy to construct, descriptive object like Date or Dollar?

*The Solution*
Lightweight objects should behave like PHP integers: if you assign the same object to two different
variables and then change one of the variables, the other variable should remain unaffected.

#+begin_src php
class Dollar {
   protected $amount;
   public function __construct($amount=0) {
     $this->amount = (float)$amount;
   }
   public function getAmount() {
      return $this->amount;
   }
   public function add($dollar) {
      return new Dollar($this->amount + $dollar->getAmount());
   }
}
#+end_src

The fundamentals of the ValueObject pattern in PHP 5 are:
1. Protect the attributes of a Value Object so direct access is forbidden.
2. Set the object’s attributes in the constructor.
3. Provide no “setter” functions, which otherwise allow attributes to be altered.
** The factory pattern
*The Problem*
How can you create such “complex” objects easily and conveniently—without cut-and-paste pro-
gramming?

*The Solution*
Create a “factory”—a function or a class method— to “manufacture” new objects.
** creational 
*** Factory method
*** prototype

* files
** Reading Entire files

To read the contents of a file into a string, use =file_get_contents()=. Pass it a file‐
name, and it returns a string containing everything in the file.

** Writing Entire file
use =file_put_contents()=.

#+begin_src php
// Write the results to page.html
file_put_contents('page.html', $page);
#+end_src 

** Reading and writing parts of files
use =file()= function to access each line of file.
=file()= reads the whole file into an array and it is not good for large files.
#+begin_src php
foreach (file('people.txt') as $line) {
  $line = trim($line);
  $info = explode('|', $line);
  print '<li><a href="mailto:' . $info[0] . '">' . $info[1] ."</li>\n";
}
#+end_src 

** reading a file one line at a time

#+begin_src php
$fh = fopen('people.txt','rb');
while ((! feof($fh)) && ($line = fgets($fh))) {
  $line = trim($line);  // fgets() includes the trailing newline at the end of line.
  $info = explode('|', $line);
  print '<li><a href="mailto:' . $info[0] . '">' . $info[1] ."</li>\n";
}
fclose($fh);
#+end_src 

** Inserting CSV data into a database table
  
#+begin_src php
try {
  $db = new PDO('sqlite:/tmp/restaurant.db');
} catch (Exception $e) {
  print "Couldn't connect to database: " . $e->getMessage();
  exit();
}
$fh = fopen('dishes.csv','rb');
$stmt = $db->prepare('INSERT INTO dishes (dish_name, price, is_spicy) VALUES (?,?,?)');

while ((! feof($fh)) && ($info = fgetcsv($fh))) {
  // $info[0] is the dish name (the first field in a line of dishes.csv)
  // $info[1] is the price (the second field)
  // $info[2] is the spicy status (the third field)
  // Insert a row into the database table
  $stmt->execute($info);
  print "Inserted $info[0]\n";
}
// Close the file
fclose($fh);
#+end_src 

** Writing CSV-formatted data to a file

#+begin_src php
try {
  $db = new PDO('sqlite:/tmp/restaurant.db');
} catch (Exception $e) {
  print "Couldn't connect to database: " . $e->getMessage();
  exit();
}
// Open the CSV file for writing
$fh = fopen('dish-list.csv','wb');
$dishes = $db->query('SELECT dish_name, price, is_spicy FROM dishes');
while ($row = $dishes->fetch(PDO::FETCH_NUM)) {
    // Write the data in $row as a CSV-formatted string. fputcsv()
    // adds a newline at the end.
  fputcsv($fh, $row);
}
fclose($fh);
#+end_src 

** changing the page type of CSV
   
#+begin_src php
// Tell the web client to expect a CSV file
header('Content-Type: text/csv');
// Tell the web client to view the CSV file in a separate program
header('Content-Disposition: attachment; filename="dishes.csv"');
#+end_src 

* lumen
** lumen on apache
install a lumen app in */var/www*

#+begin_src shell
$ lumen new cms.app
#+end_src
 
make your storage folder writable

#+begin_src shell
$ sudo chmod -R 777 storage
#+end_src
 
create a virtual host file

#+begin_src shell
$ cp /ect/apache2/sites-available/000-default.conf /etc/apache2/sites-available/cms.conf
#+end_src
 
here we use a different port for listening incoming requests for this *VirtualHost*:

#+begin_src
<VirtualHost *:8081>
#...
DocunemtRoot /var/www/cms.app/public
<Directory /var/www/cms.app/public>
   AllowOverride all
   # other options
</Directory>
#...
</VirtualHost>
#+end_src

change *ports.conf* to listen to port 8081 by adding *Listen 8081* 
to */etc/apache2/ports.conf* file.

now we have to make the *VirtualHost* active by running *a2ensite*.

#+begin_src shell
$ sudo a2ensite cms.conf
#+end_src
 
restart the service for the new settings to take effect.

#+begin_src shell
$ sudo service apache2 restart   
#+end_src
 
https://httpd.apache.org/docs/2.4/vhosts/examples.html
https://gist.github.com/dbaeck/89d0b52d9d3d2777a96f
https://www.digitalocean.com/community/tutorials/how-to-set-up-apache-virtual-hosts-on-ubuntu-14-04-lts
https://www.digitalocean.com/community/questions/what-is-the-correct-folder-to-put-my-website-files-var-www-or-var-www-html
http://tecadmin.net/install-laravel-framework-on-ubuntu/
** installing globally
install the lumen-intaller

#+begin_src shell
$ composer global require "laravel/lumen-installer"
#+end_src

add the lumen binary to path. It can be found at:

 - *~/.composer/vendor/bin*
 - *~/.config/composer/vendor/bin*

call like this ~$ lumen new blog~ .

** PHP dependencies

#+begin_src shell
$ sudo apt-get install php7.0-zip 
#+end_src

** artisan
*** create a migration

#+begin_src 
$ php artisan make:migration create_books_table --create=books
#+end_src 

*** commit migration to db
    
#+begin_src shel
$ php artisan migrate
#+end_src 

*** Refreshing the Schema and Seeding the Database

#+begin_src shell 
$ composer dump-autoload
$ php artisan migrate:refresh
$ php artisan db:seed
#+end_src 

** middleware
Middleware provides a way to filter
incoming HTTP requests before a defined route handles the request. You can use middleware to do any
number of things, like authentication, validating a signed request, and CORS support, to name a few.
Middleware classes are typically created in the app/Http/Middleware path by convention

* elqoquent
** eloquent postgres json type
In your migrations you can do something like:

#+begin_src php
 $table->json('field_name');
#+end_src
 
And in you model cast it to JSON by adding the $casts property like so:

#+begin_src php
class SomeModel extends Model
{
    protected $casts = [
        'field_name' => 'json'
    ];
}
#+end_src

* installation
** php packages

#+begin_src shell
$ sudo apt-get install libapache2-mod-php    # for running php in apache2
#+end_src

** phpstorm xdebug

#+begin_src shell
$ sudo apt-get install php-xdebug
#+end_src

to enable for php storm add =xdebug.remote_enable=1= to ~php.ini~.

https://confluence.jetbrains.com/display/PhpStorm/Zero-configuration+Web+Application+Debugging+with+Xdebug+and+PhpStorm
https://www.jetbrains.com/phpstorm/marklets/

* session handling
** starting a session
You may start a session manually with session_start, or you can
configure PHP to automatically start sessions with the
session.auto_start directive in php.ini.

 #+begin_src php
 session_start() !== false or die('could not start session');
 #+end_src

** session variables example
   
#+begin_src php
<?php
    //start session
    session_start();

    //initialize a set of session variables
    if(!isset($_SESSION['a']))
    {
        print("Initializing Session<br>");

        $_SESSION['a'] = 'Session Var A';
        $_SESSION['b'] = 123.45;
        $_SESSION['c'] = 0;
    }

    //update session with access count
    $_SESSION['c']++;

    print("Access count: " . $_SESSION['c'] . "<br>");

    print("Session Dump: " . session_encode() . "<br>");
?>
#+end_src

** custom session handler

#+begin_src php
<?php
    class mySession
    {
        //prefix with which to mark session files
        var $mark;

        //path for storing session files
        var $path;

        //name of session cookie
        var $name;

        function mySession($mark='mySession_')
        {
            $this->mark = $mark;
        }

        function getFilePath($id)
        {
            return($this->path . '/' . $this->mark . $id);
        }

        function open($path, $name)
        {
            $this->path = $path;
            $this->name = $name;

            return(TRUE);
        }

        function close()
        {
            return(TRUE);
        }

        function read($id)
        {
            if($fp = @fopen(getFilePath($id), "r"))
            {
                return(fread($fp,
                       filesize($this->getFilePath($id))));
            }
            else
            {
                return("");
            }
        }

        function write($id, $data)
        {
            if($fp = @fopen($this->getFilePath($id), "w"))
            {
                return(fwrite($fp, $data));
            }
            else
            {
                return(FALSE);
            }
        }

        function destroy($id)
        {
            return(@unlink($this->getFilePath($id)));
        }

        function garbage($lifetime)
        {
            $d = dir($this->path);

            while($f = $d->read())
            {
                //file begins with mark and it's too old
                if((strpos($f, $this->mark) == 0) AND
                    (time() > (fileatime($f) + $lifetime)))
                {
                    unlink("$this->path/$f");
                }

            }
            $d->close();
            return(TRUE);
        }
    }

    $s = new mySession();

    session_set_save_handler(
        array($s, 'open'),
        array($s, 'close'),
        array($s, 'read'),
        array($s, 'write'),
        array($s, 'destroy'),
        array($s, 'garbage')
        );

    //start session
    session_start();

    //initialize a set of session variables
    if(!isset($_SESSION['a']))
    {
        print("Initializing Session<br>");

        $_SESSION['a'] = 'Session Var A';
        $_SESSION['b'] = 123.45;
        $_SESSION['c'] = 0;
    }

    //update session with access count
    $_SESSION['c']++;

    print("Access count: " . $_SESSION['c'] . "<br>");

    print("Session Dump: " . session_encode() . "<br>");
?>
#+end_src

** ending a session
   
use =session_destroy()= function.  

Keep in mind that ending a session
doesn't make the values from that session unavailable to the rest of
the currently executing PHP page.

#+begin_src php
<?php
session_start();
// Do some miscellaneous work
$_SESSION['username'] = 'Michele';
// Logout of the site
session_destroy();
echo "At this point we can still see the value of username as
".$_SESSION['username']."<br />";
$_SESSION = array();
echo "Now the value of username is blank: ".$_SESSION['username'];
?>
#+end_src

** Exposed Session Data 
   
 #+begin_src php
 #!/usr/bin/env php
 <?php

     header('Content-Type: text/plain');
     session_start();

     $path = ini_get('session.save_path');
     $handle = dir($path);

     while ($filename = $handle->read())
     {
       if (substr($filename, 0, 5) == 'sess_')
       {
         $data = file_get_contents("$path/$filename");

         if (!empty($data))
         {
           session_decode($data);
           $session = $_SESSION;
           $_SESSION = array();
           echo "Session [" . substr($filename, 5) . "]\n";
           print_r($session);
           echo "\n--\n\n";
         }
       }
     }

 ?>  
 #+end_src

** making sure session data is not lost after redirect

call =exit()= after redirect.
use =session_write_close()=

** check for session status
   
#+begin_src php
function is_session_started()
{
    if ( php_sapi_name() !== 'cli' ) {
        if ( version_compare(phpversion(), '5.4.0', '>=') ) {
            return session_status() === PHP_SESSION_ACTIVE ? TRUE : FALSE;
        } else {
            return session_id() === '' ? FALSE : TRUE;
        }
    }
    return FALSE;
}

// Example
if ( is_session_started() === FALSE ) session_start();
?>
#+end_src

* SPL
** Available objects in SPL
   
#+begin_src php
<?php
foreach(spl_classes() as  $k=>$v){
    echo nl2br($v."\n");
}
?>
#+end_src

* using =include_path= to manage larget projects

You can add include_path configuration option in the php.ini file. You
can use include_path to define a list of directories that will be
searched when include() type functions specify relative
paths. Directories should be separated by colons (semicolons on
Windows platforms), as shown here:

#+begin_src
include_path=".:/home/mary/php_lib:/usr/local/lib/php"
#+end_src
 
if you don't have access to php.ini file you can set the include_path option in .htaccess file:

#+begin_src
php_value include_path /home/mary/php_lib
#+end_src

you could also use the ini_set() function to set the option at runtime:
#+begin_src php
ini_set("include_path", "/home/mary/php_lib");
#+end_src
 
As of PHP 4.3, she can use the set_include_path() function to achieve the same effect, like so:

#+begin_src php
set_include_path( "/home/mary/php_lib" );
#+end_src
 
* output buffering
** intro
   
The idea of output buffering is to store all the content that has to
be outputted in a memory buffer before outputting the whole
buffer. This has the following advantages: 
 - I/O operations are reducedto one which is a great performance improvement
 - Content can be manipulated and parsed before outputting it to the browser
 - The I/O operation can be done sequentially and quickly

The downside to this is that the client has to wait until the script
completes. Therefore, depending on the application design and the
script execution time, the user might come to the conclusion that the
system crashed and they will close the browser or do something else
that would not be quite what we want.

** detect if output buffering is turned on?
   
#+begin_src php
if(ob_get_level() > 0){
   //there are some buffers active.
}

$ php -d output_buffering=1 -r'var_dump(ob_get_level());'
int(1)
$ php -d output_buffering=0 -r'var_dump(ob_get_level());'
int(0)
#+end_src
 
It does however check whether there is an output buffer active, not
what the actual setting of PHP itself is. A manual ob_start() (or more
then one) will also increase the level.

** example
   
#+begin_src php
<?php
ob_start();

echo("This is a test\n");
echo("More content\n");

ob_end_flush();
?>
#+end_src

* request
** check if request is ajax?
   
#+begin_src php
function is_ajax() {
  return isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest';
}
#+end_src

* page generation time
** solution1

#+begin_src php
<?php
$time = microtime();
$time = explode(' ', $time);
$time = $time[1] + $time[0];
$start = $time;
?>

<?php
$time = microtime();
$time = explode(' ', $time);
$time = $time[1] + $time[0];
$finish = $time;
$total_time = round(($finish - $start), 4);
echo 'Page generated in '.$total_time.' seconds.';
?>
#+end_src

** solution2
   
#+begin_src php

function microtime_float()
{
    list($usec, $sec) = explode(" ", microtime());
    return ((float)$usec + (float)$sec);
}

$time_start = microtime_float();

// Sleep for a while
usleep(100);

$time_end = microtime_float();
$time = $time_end - $time_start;

echo "Did nothing in $time seconds\n";
#+end_src

** solution3

=microtime()= and =REQUEST_TIME_FLOAT= (as of PHP 5.4.0)

#+begin_src php

// Randomize sleeping time
 usleep(mt_rand(100, 10000));
 
// As of PHP 5.4.0, REQUEST_TIME_FLOAT is available in the $_SERVER superglobal array.
// It contains the timestamp of the start of the request with microsecond precision.
$time = microtime(true) - $_SERVER["REQUEST_TIME_FLOAT"];

echo "Did nothing in $time seconds\n";
#+end_src

* autoloading
** intro
   
Autoloading is when we tell PHP where to look for our class files when it needs
a class declaration that it’s yet to see.

* security
** Cross-site scripting
   
For cross-site scripting—commonly abbreviated as XSS—the attack vector targets
an area where a user-supplied variable is included in application output, but not
properly escaped. This allows an attacker to inject a client-side script of their choice
as part of that variable’s value.
Here’s an example of code vulnerable to this type of attack:

#+begin_src html
<form action=”<?php echo $_SERVER['PHP_SELF']; ?>”>
<input type=”submit” value=”Submit” />
</form>
#+end_src 

*fix*
Compared to the attack itself, the fix is surprisingly simple: escape output from PHP
code to prevent the attacker from being able to inject their code in the first place.
This looks like the following:

#+begin_src html
<form action=”<?php echo htmlentities($_SERVER['PHP_SELF']); ?>”>
  <input type=”submit” value=”Submit” />
</form>
#+end_src 

** Cross-site Request Forgery(CSRF)
   
a Cross-site Request Forgery, often abbreviated to CSRF.
The purpose of this type of attack is to have a victim send an HTTP request to a
specific website, taking advantage of the victim’s established identity with that
website.

*fix*
 - Don't use GET for creation,modification or deletion.

the specification for the HTTP protocol, which states the following:"the
convention has been established that the GET and HEAD methods SHOULD NOT have
the significance of taking an action other than retrieval."

 - use CSRF token

This change(use of POST method) doesn’t preclude the possibility that an
attacker might duplicate this HTML on another website. When a victim submits the
form, the request will include their session cookie for the domain in the form
action.

To address this, you can take advantage that a normal user will view the
form before submitting it by including a field with a random value, known as a
nonce or CSRF token. The token will also be stored in the user’s session, and
compared to the form value when the form is submitted to confirm that the values
are identical. The modified script to output the form looks as follows:

#+begin_src php
<?php
session_start();
if ($_POST && $_POST['token'] == $_SESSION['token']) {
  // process form submission
} else {
  $token = uniqid(rand(), true);
  $_SESSION['token'] = $token;
?>
<form method=”post” action=”http://example.com/oneclickpurchase.php”>
<input type=”hidden” name=”token” value=”<?php echo $token; ?>” />
<input type=”hidden” name=”product_id” value=”12345” />
<input type=”submit” value=”1-Click Purchase” />
</form>
<?php
}
#+end_src 

* apache =.htaccess= sample configuration
  
#+begin_src
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-l
RewriteRule .* index.php [L,QSA]
#+end_src

The script tells Apache that whenever an HTTP request arrives and if
no physical file (!-f) or path (!-d) or symbolic link (!-l) can be
found, it should transfer control to index.php

* turn off DNS prefetching from individual documents

You can also turn off DNS Prefetching from individual documents, using the
http-equiv attribute on the <meta> element, like this:

#+begin_src html
<meta http-equiv="x-dns-prefetch-control" content="off">
 <!-- turns on dns prefetching -->
<meta http-equiv="x-dns-prefetch-control" content="off">
<!-- force the lookup of specific hostnames -->
<link rel="dns-prefetch" href="http://www.spreadfirefox.com/">
#+end_src 

* disable caching for a website

#+begin_src html
<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
<meta http-equiv="Pragma" content="no-cache" />
<meta http-equiv="Expires" content="0" />
#+end_src 

http://live.datatables.net/sadipaji/132/edit
* disable ajax browser caching
  
#+begin_src javascript
//prevents browser caching
$.ajaxSetup({ cache: false });
#+end_src 

* query
  
#+BEGIN_SRC sql :engine postgresql  :cmdline -p 5432 -h 127.0.0.1 -U postgres -d test2
SELECT s,md5 from huge_data_table limit 10;
#+END_SRC 

#+name: my-query
#+header: :engine postgresql
#+header: :dbhost 127.0.0.1
#+header: :dbuser postgres
#+header: :dbpassword jjj
#+header: :database test2
#+begin_src sql
SELECT s,md5 FROM huge_data_table limit 10;
#+end_src

#+RESULTS: my-query

* error handler

#+begin_src php
 <?php
    ini_set('error_reporting', E_ALL | E_STRICT);
    ini_set('display_errors', 'Off');
    ini_set('log_errors', 'On');
    ini_set('error_log', '/usr/local/apache/logs/error_log');
  ?>
  
// PHP also allows you to handle your own errors with the set_error_handler( ) function: 
    <?php
    set_error_handler('my_error_handler');
    ?>

// This allows you to define your own function (my_error_handler( )) to handle errors; the following is an example implementation: 
    <?php
    function my_error_handler($number, $string, $file, $line, $context)
    {
      $error = "=  ==  ==  ==  ==\nPHP ERROR\n=  ==  ==  ==  ==\n";
      $error .= "Number: [$number]\n";
      $error .= "String: [$string]\n";
      $error .= "File:   [$file]\n";
      $error .= "Line:   [$line]\n";
      $error .= "Context:\n" . print_r($context, TRUE) . "\n\n";
      error_log($error, 3, '/usr/local/apache/logs/error_log');
    }
?>
// This restricts errors to warnings.
<?php
    set_error_handler('my_warning_handler', E_WARNING);
 ?>
#+end_src 

* security
** disable =register_globals=
* bootstrap
** structure of page
*** settings of the viewing arena

#+begin_src html
<meta name="viewport"
      content="width=device-width, initial-scale=1" />
#+end_src

The zoom behavior can be turned off with no user-scalable=no.

*** Container
    
Bootstrap utilizes a container element to initiate the page and find a
basis for the grid.
*Containers can be used multiple times on the page, but should not be nested.*


#+begin_src html
<div class="container">
     ...
</div>
#+end_src

Alternatively, the class .container-fluid can be used, which always
uses the full width of the device:

#+begin_src html
1   <div class="container-fluid">
2     ...
3   </div>
#+end_src

*** Device Specific Definitions
    
#+begin_src
“xs” <= 544 px
“sm” <= 768 px
“md” <= 992 px
“lg” <= 1200 px
“xl” > 1200 px
1   @media (min-width: @screen-sm-min) { ... }
2
3   @media (min-width: @screen-md-min) { ... }
4
5   @media (min-width: @screen-lg-min) { ... }
#+end_src

*** Order Column

If individual columns have class styles such as .push-md- or pull-md-, they can be used,
even if different from their natural order. “Push” means pushing columns to the right,
while they are pulled to the left with “pull”.

#+begin_src html
1   <div class="row">
2     <div class="col-md-9 push-md-3">9 + 3 right</div>
3     <div class="col-md-3 pull-md-9">3 + 9 left</div>
4   </div>
#+end_src

** typography
*** Orientation
    
The alignment of text is up to your creative nature.

- text-left: Left aligned
- text-center: Text is centered
- text-right: Right aligned
- text-justify: Justified
- text-nowrap: Obstruction of upheaval

In addition, there are alignment variants that are only valid for certain viewports.

- text-xs-left: Left aligned when the viewport “xs” is used.
- text-xs-center: Text is centered when the viewport “xs” is used.
- text-xs-right: Right aligned when the viewport “xs” is used.
  
*** transformation
    
Transformations convert text from lowercase to uppercase and vice versa.

 - text-lowercase: Converts to lowercase
 - text-uppercase: Converts to uppercase
 - text-capitalize: First letter of each word is capitalized.
 - text-weight-bold: Bold without an explicit tag.
 - text-weight-normal: Normal weight without an explicit tag
 - text-italics: Italics without an explicit tag

*** lists
**** =.list-unstyled=

If the default style used and there are icons not needed, they can be removed by the
class =.list-unstyled=.
This will affect only the immediate members not the deeper nesting
levels.

** form 
** show/hide bootstrap modals 
Bootstrap has a few functions that can be called manually on modals:

#+begin_src javascript
$('#myModal').modal('toggle');
$('#myModal').modal('show');
$('#myModal').modal('hide');
#+end_src 

** change =table-stripped= strip color

#+begin_src html
    /* for bootstrap table-striped strip color*/
    .table-striped>tbody>tr:nth-child(odd)>td,
    .table-striped>tbody>tr:nth-child(odd)>th {
        background-color: #B6E9DF;  /* choose your color here */
    }
#+end_src 

** disable modal outside popup close

#+begin_src html
 <div class="modal fade"  role="dialog" data-backdrop="static" data-keyboard="false">
#+end_src 

** customize modal style

add an extra class to the modal like ~<div class="modal custom">~ then you can
style it like ~.modal.custom~.

#+begin_src html
<div class="modal custom fade" id="myModal2" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
  
.modal.custom .modal-dialog {
    width:50%;
    margin:0 auto;
    /*add what you want here*/
}

#+end_src 

http://jsfiddle.net/surjithctly/ka8uW/

** useful resources

http://www.tutorialrepublic.com/twitter-bootstrap-tutorial

* =datatables=
** filter for text inside a =<span>= or other html

#+begin_src javascript
  {column_number: 4, filter_reset_button_text: false, filter_default_label: '', column_data_type:'html', html_data_type:'text', filter_match_mode:'exact'},
#+end_src

** make hidden column details visible in responsive mode

#+begin_src javascript 
var table = $('#datatable-packages').DataTable({
 //...
 {
              details:{
                  display: $.fn.dataTable.Responsive.display.childRowImmediate,
                  type: ''
              }
            },
//..
}]
#+end_src 

* HTML
** How do you disable browser Autocomplete on web form field / input tag?

autocomplete prevents form data from being cached in older browsers.

#+begin_src html
<input type="text" name="foo" autocomplete="off" />
#+end_src 

** How to use the “required” attribute with a “radio” input field

You just need to set the required-attribute for one input of the radiogroup, but you can set it for all.

For example:

#+begin_src html
<form>
  <label for="input1">1:</label>
  <input type="radio" name="myradiogroup1" id="input1" value="1" required><br>

  <label for="input2">2:</label>
  <input type="radio" name="myradiogroup1" id="input2" value="2"><br>

  <label for="input3">3:</label>
  <input type="radio" name="myradiogroup1" id="input3" value="3"><br>

  <input type="submit" value="send">
</form>
#+end_src 

** HTML5 form required attribute. Set custom validation message?

http://jsfiddle.net/nteb4/23/

** disable input box =autocomplete=
   
#+begin_src html
<input type="text"  id="codetxt" autocomplete="off"/>
#+end_src

** How to disable the mobile keyboard from displaying input field

To block the mobile device keyboard from displaying you simply need to set the
field to readonly with jQuery as displayed in the code below.

#+begin_src html
$('#input_92_31').attr('readonly','readonly');
#+end_src

** useful resources 

https://html.spec.whatwg.org/multipage/index.html

** web application mobile icons

#+begin_src html
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<link rel="apple-touch-startup-image" href="startup.png">
<link rel="apple-touch-icon" href="youricon.png"/>
<link rel="apple-touch-icon-precomposed" sizes="128x128" href="youricon.png">

<meta name="mobile-web-app-capable" content="yes">
<link rel="shortcut icon" sizes="196x196" href="youriconhighres.png">
<link rel="shortcut icon" sizes="128x128" href="youricon.png">
#+end_src 

* FatFreeFramework
** CSRF protection example

#+begin_src php
$f3->route('GET /',
    function($f3) {
        $f3->set('IP',$f3->get('IP'));
        $f3->set('AGENT',$f3->get('AGENT'));
        $rand= mt_rand(79, 7900);
        $f3->set('csrf',$rand);
        $f3->set('SESSION.csrf',$rand);    
        echo \Template::instance()->render('login.html');
    }
,0,64);

///
if ($f3->get('POST.csrf') == $f3->get('SESSION.csrf')) {
balalalala
}
#+end_src

* css
** media query
*** basic syntax
You can use media queries in three ways, all of which match
the different ways that CSS can be applied to a document.

<link href="file" rel="stylesheet" media="logic media and (expression)">

The second is to call an external style sheet using the @import directive:

@import url('file') logic media and (expression);

The third is to use media queries in an embedded style element or in
the style sheet itself with the extended @media rule:

@media logic media and (expression) { rules }

writing rules that will apply to all media types

@media all and (expression) { rules }
@media (expression) { rules }

*** logic
The first new attribute for the @media rule is logic . This optional key-
word can have the value of either only or not:

@media only media and (expression) { rules }
@media not media and (expression) { rules }

The only value is mainly useful if you want to hide the rule from older
browsers that don’t support the syntax; for browsers that do support it, only
is effectively ignored. The not value is used to negate the query; you use not
to apply the styles if the parameters you set are not met.

*** feature

Media features are information about the device that’s being used to display
the web page: its dimensions, resolution, and so on.

@media (feature: value) { rules }
@media (feature) { rules }

*** width and height

@media (width: 600px) { rules }
the rules are applied only to browsers that are set to be
exactly 600px wide

@media (max-width: 480px) { rules }
@media (min-width: 640px) { rules }

The first query applies the rules in browsers that are no wider than
480px, and the second in browsers that are at least 640px wide.

*** Pixel ratio
In general, the CSS pixel unit (px) is a measurement of a single pixel on the
computer screen.
The ratio of physical pixels to CSS pixels is known as the device pixel ratio (DPR).

**** resolution media feature
@media media and (resolution: value) { rules }

The value of resolution is a number with a unit of resolution: dots per
inch (DPI), dots per centimeter (DPCM), or, most pertinently to us, dots per pixel
(DPPX). The DPPX unit maps to the DPR of the device, so to apply a rule to
devices that have a DPR value of 1.5, you use this:

@media (resolution: 1.5dppx) { rules }

As with the other media features, you can also detect maximum and
minimum pixel ratios:

@media (max-resolution: number) { rules }
@media (min-resolution: number) { rules }
*** device width and height

The width and height media features are related to the dimensions of the
browser viewport, but that viewport isn’t always as big as the screen it’s
displayed on. If you need to target the physical screen size rather than the
viewport size, you can use the *device-width* and *device-height* properties and
their related min- and max- variants.

<meta name="viewport" content="width=device-width">

When the viewport meta tag with these values is present in the head of a
page, mobile browsers go into “mobile mode,” in which the viewport is sized
to ideal dimensions for that device.

*** orientation

If you’re less concerned with the actual dimensions of the viewing device
but want to optimize your pages for either horizontal (like a typical desk-
top/laptop web browser) or vertical (like a mobile phone or ebook reader)
viewing, the media feature you need is orientation . Here is its syntax:

@media (orientation: value) { rules }

value can be one of two keyword options: landscape or portrait . The
landscape value applies when the width of your browser is greater than its
height, and the portrait value applies when the opposite is true.

*example*

ul { overflow: hidden; }
li { float: left; }
@media (orientation: portrait) {
    li { float: none; }
}

*** aspect ratio
You can also create queries that apply when a certain width-to-height ratio is
met. Use aspect-ratio to test the browser’s aspect ratio or device-aspect-ratio
to test the device’s aspect ratio. Here is the syntax for these two features:

@media (aspect-ratio: horizontal/vertical) { rules }
@media (device-aspect-ratio: horizontal/vertical) { rules }

The horizontal and vertical values are positive integers that represent
the ratio of the width and height (respectively) of the viewing device’s screen,
so a square display would be 1/1 and a cinematic widescreen display would
be 16/9.

*** Multiple Media Features

You can chain multiple queries together on the same media type by adding
expressions with the and operator:

@media logic media and (expression) and (expression) { rules }

For example, to test for a narrow screen on a device with an
aspect ratio no greater than 15/10, you use this query:

@media (max-device-aspect-ratio: 15/10) and (max-width: 800px) {...}

You can also use a conditional “or” expression by adding extra queries
in a comma-separated list:

@media logic media and (expression), logic media and (expression) { rules }

** selectors
*** Attribute selectors
E[attr] {...} /* Simple Attribute Selector */
E[attr='value'] {...} /* Exact Attribute Value Selector */
E[attr  ~='value'] {...} /* Partial Attribute Value Selector */
E[attr|='value'] {...} /* Language Attribute Selector */


The Simple Attribute Selector applies rules to elements that have the
s ­ pecified attribute defined, regardless of that attribute’s value.

a[rel] { color: red; }

If you want to be more specific, you can use the Exact Attribute Value Selector
to define a value:

a[rel='friend'] { color: red; }

This code applies the rule only to the second a element in the
markup (v) because it selects only elements that have the exact value
of  friend . If you want to select both of the elements that have this value,
you would use the Partial Attribute Value Selector:

a[rel~='friend'] { color: red; }

This code looks for the value of friend as part of a space-separated list
(in most cases, a word)

The final selector, the Language Attribute Selector, applies rules to ele-
ments that have an attribute matching the first argument in the selector,
the value of which is the second argument in the selector followed immedi-
ately by a hyphen.

a[lang|='es'] { color: red; }

*** New Attribute Selectors in CSS3
Beginning Substring Attribute Value Selector

E[attr^='value'] {...}

This code looks for the supplied value at the beginning of the specified
attribute.

To illustrate, consider the following example markup, showing a
list of three items, each of which contains a hyperlink with different (albeit
similar) values for the title attribute:

<li><a href="http://example.com/" title="Image Library">Example</a></li>
<li><a href="http://example.com/" title="Free Image Library">Example</a></li>
<li><a href="http://example.com/" title="Free Sound Library">Example</a></li>

I’ll apply this selector to the example markup:

a[title^='image'] {...}

In this case, the rule will be applied to the a element in the first list
item because the title attribute string begins with the word image. The rule
will not be applied to the a element in the second item, however, because,
although its title attribute contains that string, it doesn’t begin with it. Nor
will it be applied to the third string, as that string doesn’t match.

*** Ending Substring Attribute Value Selector

E[attr$='value'] {...}

a[title$='library'] {...}
This time the rule applies to all of the list items, as all of their title
attribute values end with the string library .

*** Arbitrary Substring Attribute Value Selector

This selector uses the asterisk ( * ) character. Here’s the new syntax:
E[attr*='value'] {...}

a[title*='image'] {...}
This rule is applied to the first and second list items because they both
contain the text string image in their title attributes, even though the string
appears in a different position in each example.

*** Multiple Attribute Selectors

You can also chain multiple selectors together, which allows you to be really
specific.
Imagine,
for example, that you had links to two files with identical names but that
were located in different folders:

<p><a href="http://example.com/folder1/file.pdf">Example</a></p>
<p><a href="http://example.com/folder2/file.pdf">Example</a></p>

If you want to specify a rule to apply to only the second p element, you
can chain some selectors together:

a[href^='http://'][href*='/folder2/'][href$='.pdf'] {...}

This code looks for a elements that have an href attribute beginning
with http:// , ending with .pdf , and with /folder2/ contained within it. That’s
specific!

*** The General Sibling Combinator
Our final new DOM selector in CSS3 is a combinator, which you’ll recall
means that it joins together more than one selector. The General Sibling
Combinator is an extension of the Adjacent Sibling Combinator, which was
introduced in CSS2. The syntaxes differ by just a single character:

E + F {...} /* Adjacent Sibling Combinator */
E ~ F {...} /* General Sibling Combinator */

The difference between the two is subtle but important: Adjacent
Sibling selects any element ( F ) that is immediately preceded by element
( E ) on the same level of the document tree, but General Sibling selects any
element ( F ) that is preceded by element ( E ) on the same level of the tree,
regardless of whether it is immediately adjacent.

*** Structural Pseudo-classes

As I stated in the introduction to this chapter, a pseudo-class provides a way
to select an element based on information that is not specified in the docu-
ment tree.

Take, for example, the following markup:

<div>
<p>Lorem ipsum.</p>
<p>Dolor sit amet.</p>
</div>

The first of the two p elements is the first child of the div element. That’s
obvious from the document tree, but the document tree doesn’t provide any
information that would allow you to apply a rule only to that element. CSS2
introduced the :first-child pseudo-class for exactly that reason:

E:first-child {...}

*** The :nth-* Pseudo-classes

The basic syntax of the :nth-* pseudo-classes is quite straightforward.
By default, n represents a number that begins at 0 and increments by 1 (1, 2,
3, etc.). Another integer can be passed into it as a multiplier. For example,
2n is every multiple of 2 (2, 4, 6, etc.), 3n is every multiple of 3 (3, 6, 9, etc.),
and so on:

E:nth-*(n) {...}
E:nth-*(2n) {...}
E:nth-*(3n) {...}

You may also use the mathematical operators for plus (+) and minus (−).
So 2n+1 selects every multiple of two plus one (1, 3, 5, etc.), and 3n-1 selects
every multiple of three minus one (2, 5, 8, etc.):

E:nth-*(n+1) {...}
E:nth-*(2n+1) {...}
E:nth-*(3n-1) {...}

Two special keyword values, even and odd , are also available; you can use
these to replace 2n and 2n+1 , respectively:

E:nth-*(even) {...}
E:nth-*(odd) {...}

*** :nth-child() and :nth-of-type()
    
The simplest examples of these pseudo-classes are :nth-child()
and  :nth-of-type() . The first, :nth-child() , selects an element based on its
position in a count of the total number of children in its parent element;
:nth-of-type() bases its count not on the total children, but only on those
of the specified element type.

E:nth-child(n) {...}
E:nth-of-type(n) {...}
E:nth-child(2n) {...}
E:nth-of-type(2n) {...}


In this example, rules u and v are equivalent because the count value
( n ) is left at the default; both of these simply select all child elements of type
E . The difference reveals itself in the later examples: in w, :nth-child(2n)
selects all elements of type E from a count that includes all its siblings
but only where those elements are even-numbered. In x, by comparison,
:nth-of-type(2n) selects all even-numbered elements of type E from a count
that includes only those elements.

.table td{
    border: red solid 1px !important;
}

.table th{
    border: red solid 1px !important;
}

*** :nth-last-child() and :nth-last-of-type()
The :nth-last-child() and :nth-last-of-type() pseudo-classes accept the
same arguments as :nth-child() and :nth-of-type() , except they are counted
from the last element, working in reverse.
*** :first-of-type, :last-child, and :last-of-type
As you’re no doubt aware, the :first-child pseudo-class is a selector
used to apply rules to an element that is the first child of its parent. As
with  :nth-of-type() , however, :first-of-type is more specific, applying only
to the element that is the first child of the named type of its parent. A pair
of counterpart pseudo-classes is also available, :last-child and :last-of-type ,
which—as you might have guessed—select the last child element or the last
child element of that type, respectively, of the parent.
*** :only-child and :only-of-type
These two pseudo-classes are used to select elements in the document tree
that have a parent but either no sibling elements ( :only-child ) or no siblings
of the same type ( :only-of-type ).

*** :target
For example, if you had this markup in a page:
<h4 id="my_id">Lorem ipsum</h4>
you could refer to it with this link:
<a href="page.html#my_id">Lorem</a>
The :target pseudo-class allows you to apply styles to the element when
the referring URI has been followed. In this example, if you want to apply
styles to the h4 element when the URI is followed, you use:
#my_id:target {...}

*** :empty
The :empty pseudo-class selects an element that has no children, including
text nodes.
html {...} /* Specificity: 1; */
html:root {...} /* Specificity: 2; */

*** :root
The :root pseudo-class selects the first element in a document tree
Let’s say you’re creating a base style sheet and want to set a property on
the html element, which shouldn’t be altered. In this case, you would use
something like this:

html:root { background-color: black; }

The higher specificity gives precedence to this rule over any other rules
applied to the html element, meaning the following is ignored:

html { background-color: white; }

*** :not()
The negation pseudo-class :not() selects all elements except those that are
given as the value of an argument:
E :not(F) {...}
This rule selects all children of element E except for those of type F . For
example, to color all the immediate child elements of a div , except for p ele-
ments, you use this:
div > :not(p) { color: red; }

*** UI Element States
CSS3 has three UI state pseudo-class selectors, which allow you to apply
rules to elements based on their current state:
:checked {...}
:disabled {...}
:enabled {...}

input[type='text']:disabled { border: 1px dotted gray; }
input[type='text']:enabled { border: 1px solid black; }

*** Constraint Validation Pseudo-classes
HTML5 introduced a new API for client-side validation of forms, known
as the constraint validation API, which can be used to determine if certain
requirements are met before the form contents are sent to the server.
You can style elements depending on whether they’re required or
optional by using their namesake pseudo-classes:

:required {...}
:optional {...}

Each form field can be in one of two states of validation: either valid or
invalid. If no specific constraints are applied, either by the browser or the
author, a form field is valid by default. As before, each state has a namesake
pseudo-class:

:valid {...}
:invalid {...}

Finally, some HTML5 elements can have a permitted range of values,
set by using the min and max attributes.

:in-range {...}
:out-of-range {...}

*** Pseudo-elements

Like pseudo-classes, pseudo-elements provide information that is not speci-
fied in the document tree. But where pseudo-classes use “phantom” condi-
tions such as an element’s position in the tree or its state, pseudo-elements
go further and allow you to apply styles to elements that don’t exist in the
tree at all.

In CSS2, the four pseudo-elements are :first-line and :first-letter ,
which select subelements in text nodes, and :after and :before , which allow
you to apply styles at the beginning and end of existing elements. CSS3
doesn’t introduce any new pseudo-elements, but it refines the definitions
slightly and introduces a new syntax to differentiate them from pseudo-
classes. In CSS3, pseudo-elements are prefixed with a double colon ( :: ),
like so:

::first-line {...}
::first-letter {...}
::after {...}
::before {...}

*** The ::selection Pseudo-element

::selection is used to apply rules to an element that the user has
selected in the browser (for example, a portion of a text node):
::selection {...}

Only a limited number of properties can be applied with ::­selection :
color , background-color , and the background shorthand (although not
background-image ). Using ::selection , you can do something like this:

p::selection {
background-color: black;
color: white;
}

** web fonts
*** The @font-face Rule
To display web fonts on your pages, you first need to define them by using
the @font-face rule.

@font-face {
font-family: FontName;
src: local('fontname'), xurl('/path/filename.otf') yformat('opentype');
}

To use the font I just defined, I need only call its name in the font stack,
as I’d normally do:
E { font-family: FontName; }

*** Defining Different Faces
If you want to use a different face, such as a
bolder weight or an italic type, you have to define each font face individu-
ally. To do this, you re-use the same name and add extra descriptors to the
@font-face rule:

@font-face {
font-family: 'Gentium Basic';
src: url('vGenBasR.woff') format('woff');
}
@font-face {
font-family: 'Gentium Basic';
font-style: italic;
src: url('yGenBasI.woff') format('woff');
}
h1 { font-family: 'Gentium Basic', sans-serif; }

*** The Final “Bulletproof” Syntax
For your chosen font to display the same in every browser on every plat-
form, you should use code in this format:
@font-face {
font-family: 'Gentium Basic';
src: url('GenBkBasR.eot');
src: url('GenBasR.eot?#iefix') format('embedded-opentype'),
url('GenBkBasR.woff') format('woff'),
url('GenBkBasR.ttf') format('truetype');
}

*** todo: continue text effects@ch6 the book of css3
** useful resources

https://www.w3.org/TR/css3-selectors/

http://www.w3.org/TR/css3-fonts/

https://css-tricks.com/
