In	Python	3,	there	are	two	types	that	represent	sequences	of	characters:	bytes	and	str.
================================================================================

================================================================================
Instances	of	bytes	contain	raw	8-bit	values.	Instances	of	str	contain	Unicode
characters.
================================================================================

================================================================================
In	Python	2,	there	are	two	types	that	represent	sequences	of	characters:	str	and
unicode.
================================================================================

================================================================================
In	contrast	to	Python	3,	instances	of	str	contain	raw	8-bit	values.	Instances	of
unicode	contain	Unicode	characters.
================================================================================

================================================================================
The	core	of	your	program	should	use
Unicode	character	types	(str	in	Python	3,	unicode	in	Python	2)
================================================================================

================================================================================
The	first	issue	is	that	in	Python	2,	unicode	and	str	instances	seem	to	be	the	same	type
when	a	str	only	contains	7-bit	ASCII	characters.
================================================================================

================================================================================
In	Python	3,	bytes	and	str	instances	are	never	equivalent
================================================================================

================================================================================
In	Python	3,	bytes	contains	sequences	of	8-bit	values,	str	contains	sequences	of
Unicode	characters.	bytes	and	str	instances	can’t	be	used	together	with	operators
(like	>	or	+).
	In	Python	2,	str	contains	sequences	of	8-bit	values,	unicode	contains	sequences
of	Unicode	characters.	str	and	unicode	can	be	used	together	with	operators	if
the	str	only	contains	7-bit	ASCII	characters.
	Use	helper	functions	to	ensure	that	the	inputs	you	operate	on	are	the	type	of
character	sequence	you	expect	(8-bit	values,	UTF-8	encoded	characters,	Unicode
characters,	etc.).
	If	you	want	to	read	or	write	binary	data	to/from	a	file,	always	open	the	file	using	a
binary	mode	(like	'rb'	or	'wb').
================================================================================

================================================================================
Item	3:	Know	the	Differences	Between	bytes,	str,	and
unicode
================================================================================

================================================================================
In Python 3, bytes contains sequences of 8-bit values, str contains sequences of
Unicode characters. bytes and str instances can’t be used together with operators
(like > or +).
In Python 2, str contains sequences of 8-bit values, unicode contains sequences
of Unicode characters. str and unicode can be used together with operators if
the str only contains 7-bit ASCII characters.
Use helper functions to ensure that the inputs you operate on are the type of
character sequence you expect (8-bit values, UTF-8 encoded characters, Unicode
characters, etc.).
If you want to read or write binary data to/from a file, always open the file using a
binary mode (like 'rb' or 'wb')
================================================================================

================================================================================
Item 3: Know the Differences Between bytes, str, and
unicode
================================================================================

================================================================================
Item 4: Write Helper Functions Instead of Complex
Expressions
================================================================================

================================================================================
Python’s syntax makes it all too easy to write single-line expressions that are overly
complicated and difficult to read.
Move complex expressions into helper functions, especially if you need to use the
same logic repeatedly.
The if/else expression provides a more readable alternative to using Boolean
operators like or and and in expressions.
================================================================================

================================================================================
Slicing can be extended to any Python class that
implements the __getitem__ and __setitem__ special methods
================================================================================

================================================================================
Avoid being verbose: Don’t supply 0 for the start index or the length of the
sequence for the end index.
Slicing is forgiving of start or end indexes that are out of bounds, making it easy
to express slices on the front or back boundaries of a sequence (like a[:20] or
a[-20:]).
Assigning to a list slice will replace that range in the original sequence with
what’s referenced even if their lengths are different.
================================================================================

================================================================================
Item 6: Avoid Using start, end, and stride in a Single
Slice
================================================================================

================================================================================
Specifying start, end, and stride in a slice can be extremely confusing.
Prefer using positive stride values in slices without start or end indexes.
Avoid negative stride values if possible.
Avoid using start, end, and stride together in a single slice. If you need all
three parameters, consider doing two assignments (one to slice, another to stride) or
using islice from the itertools built-in module.
================================================================================

================================================================================
Item 7: Use List Comprehensions Instead of map and
filter
================================================================================

================================================================================
List comprehensions are clearer than the map and filter built-in functions
because they don’t require extra lambda expressions.
List comprehensions allow you to easily skip items from the input list, a behavior
map doesn’t support without help from filter.
Dictionaries and sets also support comprehension expressions
================================================================================

================================================================================
Item 8: Avoid More Than Two Expressions in List
Comprehensions
================================================================================

================================================================================
List comprehensions support multiple levels of loops and multiple conditions per
loop level.
List comprehensions with more than two expressions are very difficult to read and
should be avoided.
================================================================================

================================================================================
Item 9: Consider Generator Expressions for Large
Comprehensions
================================================================================

================================================================================
List comprehensions can cause problems for large inputs by using too much
memory.
Generator expressions avoid memory issues by producing outputs one at a time as
an iterator.
Generator expressions can be composed by passing the iterator from one generator
expression into the for subexpression of another.
Generator expressions execute very quickly when chained together.
================================================================================

================================================================================
Item 10: Prefer enumerate Over range
================================================================================

================================================================================
enumerate provides concise syntax for looping over an iterator and getting the
index of each item from the iterator as you go.
Prefer enumerate instead of looping over a range and indexing into a sequence.
You can supply a second parameter to enumerate to specify the number from
which to begin counting (zero is the default).
================================================================================

================================================================================
The zip built-in function can be used to iterate over multiple iterators in parallel.
In Python 3, zip is a lazy generator that produces tuples. In Python 2, zip returns
the full result as a list of tuples.
zip truncates its output silently if you supply it with iterators of different lengths.
The zip_longest function from the itertools built-in module lets you iterate
over multiple iterators in parallel regardless of their lengths (see Item 46: “Use
Built-in Algorithms and Data Structures”).
================================================================================

================================================================================
Item 12: Avoid else Blocks After for and while Loops
================================================================================

================================================================================
Python has special syntax that allows else blocks to immediately follow for and
while loop interior blocks.
The else block after a loop only runs if the loop body did not encounter a break
statement.
================================================================================

================================================================================
Avoid using else blocks after loops because their behavior isn’t intuitive and can
be confusing.
================================================================================

================================================================================
Use try/finally when you want exceptions to propagate up
================================================================================

================================================================================
The try/finally compound statement lets you run cleanup code regardless of
whether exceptions were raised in the try block.
The else block helps you minimize the amount of code in try blocks and visually
distinguish the success case from the try/except blocks.
An else block can be used to perform additional actions after a successful try
block but before common cleanup in a finally block.
================================================================================

================================================================================
Item 14: Prefer Exceptions to Returning None
================================================================================

================================================================================
Functions that return None to indicate special meaning are error prone because
None and other values (e.g., zero, the empty string) all evaluate to False in
conditional expressions.
================================================================================

================================================================================
Raise exceptions to indicate special situations instead of returning None. Expect the
calling code to handle exceptions properly when they’re documented.
================================================================================

================================================================================
Item 15: Know How Closures Interact with Variable Scope
================================================================================
